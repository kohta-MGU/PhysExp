%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Japanese
%%Title: wave2.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Kazutoshi Ohta
%%CreationDate: 12/21/09
%%BoundingBox: 0 0 1348 852
%%HiResBoundingBox: 0 0 1348 852
%%CropBox: 0 0 1348 852
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.3%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.3 x483 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=400 GradRes=200 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-12-21T18:46:07+09:00</xap:CreateDate>
         <xap:ModifyDate>2009-12-21T19:05:43+09:00</xap:ModifyDate>
         <xap:MetadataDate>2009-12-21T19:05:43+09:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>164</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgApAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FUr80&#xA;WWsX/l++sdGu0sNSuojDBfOCwg9T4WlVVpydEJZB3alSBirBfIWqap5N8keTNE1r1NVOoNBZWF7E&#xA;oVkglRGgjnUll9SJXK0ViDHGz9RxxVmWn+YbfXfKkus2SyQwTx3Jti9A5WJnjSUcSdnCc136EYqw&#xA;mL8zz5a0ZrS40e8vU0fSdL1Se6W4jkkmttQZonkHruHLpNG/ws24FajYFVP4PMD6xq1ostrPp19o&#xA;+tSabe25m5RuX0w3akem3GRGjniYc1qD22xVmeKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV53q3lLWfMXkTyvbabdx21xaW0MqXsjzwzQyvYtbrcRPbM&#xA;lWRJ3rGQA9aclxVl+n6BbaX5Wt/L+n7W9lZJY2vP+WKIRIWoPbfFWKp+UmiappwbXxcrqF1p1ppm&#xA;pRWt/cCBobI8o0TiYgF51fZRuzeJxVNLfyVFputRXummWVbzUDqOry3d1NK3NLN7VDEj8xUqyIaF&#xA;fhUeAxVleKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kp&#xA;do/mLRdYm1KHTbpbmTSLtrDUAlf3dyiJI0dSBXiJBUjatR1BxVQ8mhR5Q0MKnpKNPtQI9hxHor8P&#xA;w1G3tiqcYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUFousWWsa&#xA;ZBqNmW9CcH4XHGRHRikkUi/syRurI69mBGKo3FXYq7FXYqxzzl5gnsYrbSNNYprusubbTpTE8kUB&#xA;/buJWClFEa1ZVcjm1FHXFWIflTaDSvOHnnQ4kEESy2M9o0cbiJitjHbTMskgHquJIAZCTUsanrXF&#xA;Wd+T1dfKWih25sLC2q1KV/cr2GKo7U9SstM0651G+lENnaRtNcSmp4og5MaCpPToMVY3G35jXlod&#xA;Whks7GVh6lr5fuYWasfVY7m6V6pMy9SiFYyaUkpUqp7oOtW+s6XFfQo8JYtHcW0tBLBPExjlhkAJ&#xA;HKN1KmhIPUEihxVMMVdirsVdirsVdirsVUry7tbK0nvLuVYLW2jaa4mc0VI41LOzHsABU4qxe3m8&#xA;+axaDV7Ge20mGUepp2k3ls8jvEaFTeSCRGieQfsov7uvxcyKYqnXl3XI9Z0/6x6RtruCRrfULJyG&#xA;e3uY6epExFK9Qyt0ZSrDYjFUzxV2KuxV2KuxV2KuxVbJJHFG0kjBI0BZ3YgKqgVJJPQDFWKWN55x&#xA;8wW/6X025t9J02Uc9Jtrm2eeW4j/AGZrr95EY0lHxJGlGUULNUlFVTjy5rjatZyfWIPqep2UptdT&#xA;sS3P0bhQGIVqLzjdGWSNqDkjAkA1AVTXFWM2VdI863Vh9mw16I6haLTZLy34xXa16D1Y2ikVe5Ej&#xA;eOKsmxV2KuxV2KuxV2KpP5NCjyhoYVPSUafagR7DiPRX4fhqNvbFUDrwXV/M2l6D9q1s+OsaooOx&#xA;EL8bGNx4PcK0o/4wnFWTYqxhVXRvPBC/DY+Z4yxFaKNSs4x0Hdp7RN/aD3xVk+KuxV2KuxV2KuxV&#xA;2KsZ80j9KatpXloDlb3DNqGqilQbSzZCsTH/AIuuHjFD9pFceOKsmxVjN2P0P51tbxaJY+YkNldj&#xA;p/p1ujS20nzkgSWNm/yY18MVZNirsVdirsVdirsVdirGfOifpNtO8rDdNZkZ9RAr/wAc614vcj5S&#xA;s8Vu3+TIcVZMAAKDYDoMVYxrA/RHm3TdYT4bTVuOkan1oJPiksZj8pC8PuZV7LirJ8VY359pa6PF&#xA;rwH7zy9cJqRalSLeMGO8oB1JtJJQPemKskBBFRuD0OKuxV2KuxV2KuxVKfKAceU9EDkF/qFryIFA&#xA;T6K1oCTT78VQPk3/AE19X19hvql7JHbE9RaWJNrCAf5HaOSdf+MmKskxVj/nqCY+XZb+2QveaO6a&#xA;pbKv2mNo3qSRL7zQh4vk2Kp7bzw3EEdxA4khmVZIpF3DKwqpHzBxVfirsVdirsVdirsVY15W43+s&#xA;a9rxFRNc/oyzf/l200tEw/6THuN+4pirJcVSXzjp11f+XLtLJeWo2/C805elbq0dbiBSfBpIwrex&#xA;OKpjpepWup6ZaalZtztL6GO5t38Y5kDofpVsVROKuxV2KuxV2KuxVjWggah5q13WGFY7Vo9HsW7F&#xA;LdfWuHT/AFriYxN7xDFWS4qlXmrSJdX8vX2nwOIruWPlZTkV9K6iIkt5af8AFcyK/wBGKq3l/V4t&#xA;Z0Ow1WJSi3sEc/pn7SF1BZG8GQ1UjxxVGTwRTwSQTKHhlUpIh6MrChB+YxVIvIU8z+V7S1uGL3Wm&#xA;NLplw7fad7CVrb1D/wAZREJB7NirIMVdirsVdirTtxRmoW4gmg3Jp4YqxCPVJdL/ACptLyyQR3aa&#xA;Tbx6dCwCj6zLCkVtHTenKZ0XFWSaLpVtpGj2OlW1fq2n28VrCT14QoEWvvRcVRmKuIBFDuD1GKsc&#xA;8hH0NCOjnZ9CuJtLCHqsNu3+iV/1rRoW+nFWR4q7FXYq7FXYql3mPV00bQNR1Zk9T6jbS3AiHV2j&#xA;QsqD3YjiMVW+WNIbR/LunaW7+pNaW8cc83+/Jgo9WQ9N3erH54qmeKuxVjnkj/RrXUtFPXRr+e3j&#xA;HQC3m43dsq/5McFykY/1cVZHirsVdirsVdiqF1XUbbTNLvNSujxtrGCS5nI6iOJC7fguKpf5L026&#xA;07yvp9veqF1B4zc6iB0+uXTG4uiPnPK+Kp1irsVY55RP1W713RTsLC/kuLYHqbfUALsNTsonlmjX&#xA;2TFWR4qxzRgLPzhr9h0jvVtdWi7DlJGbSZV/1fqaMfd/fFWR4q7FXYq7FXYqwWESXel+QtGJD+rH&#xA;b6hfKBQGDTrZZFYAk0pePbYqzrFXYq7FWOWI+o+e9Ttq8YdYs4dQhX+a4tT9Vum/5FNajFWR4q7F&#xA;XYq7FXYqxzzj/pUmiaOOmoalC81O0NiGvmqP5We2SNv9fFWR4q7FXYqxxQbL8wWFf3WtaaGA6ATa&#xA;bNRj/rSR3y/RH7YqyPFXYq7FXYq7FWOeeR9Y02y0cddavrezdezQKxubpD/rWtvKuKsjxV2KuxVj&#xA;l3ysfP1jcdINZsZbKVvGeyf6xbIPnFNcn6MVZHirHde/0TzV5d1L9mdrnSZj2C3MQuUY/wDPWyVB&#xA;/r++KsixV2KuxV2KuxVgn5fhby8t7hU42+k6HpthbrSnpzXEQublKdv3QtTirO8VdirsVY55pIs9&#xA;W8vav9lYb02F0/8AxRqCGJV/2V2tvirI8VdirsVdirsVY4h+ufmDIafu9F0xVU9jLqUxLj/WRLBf&#xA;of3xVkeKuxV2Ksc85H6q2iauB/xz9Ut1kp3jv+Vg1f8AJVrpZD/q1xVkeKuxV2KuxV2KscuSL3z9&#xA;ZW/WPR7CW8lXwmvpPQtnH/PO3uR9OKsjxVj0XnK2m88z+U4rWdpbWyS8urz0phEjTORDHy9P0zzW&#xA;OQ8vUpVeIqa8VVHUPMyab5nvV1G9FtpFnZWDJCI+bSXOoXVzAoHFWkZqwIqqo7nFUi1/Xze3a6tZ&#xA;XJl07R5rG/jV4jE0IF3cadqPLmqSDjB6tQw6jFXomKse/MBGHlO9vUUvLpXparEgFWZtOlW74LT/&#xA;AH4IeH04qyBHR0V0YMjAFWBqCDuCCMVbxV2KuxV2KsJ/J2CceRbO/uaG51Mm5dwCA8ahbe2YAk9b&#xA;WCLvirNsVdirsVSTzvZXF55T1NLRed9DCbqwX/l6tSLi2+6aJcVTSwvbe/sba+tm5291Ek8LeKSK&#xA;GU/ccVV8VdirsVdirHPJlbj9Nasf+ljqlz6ff93ZcbBKH+VvqhkHb4q98VZHirsVdiqWeaNKfVvL&#xA;mp6ZE3Ca7tZYoJOnCVkIjce6vRhiqp5f1VNX0LTtVReC39tDchP5fVjD8d/CtMVR+KuxV2KuxVjn&#xA;lX/StU8xauRVbi++pWz/APFOnxiBl/2N19YxVkeKpFZeWZbTzZqOupfMYdSSET2RjFecCenH+9rX&#xA;01BZgnH7TE8ugCqQ+Z/Lh1/zLqulXEQFpf6fpZ53Vk95ZTCzu7ySaGQ/BGGpKhH7wOKhl6YqgPL3&#xA;l/SdMuLjyDqWpPdyXOiC1Ek/OJ54pZ7ppVtjM0pkWBJ1TZ3KLx5knqqzX/C2g/8ALL/w8n/NWKtP&#xA;5T8vujI9oGRgVZS8hBB2IPxYqkPkPy7pEnlayt7iD1LnTvV024kLyVeSwla1Zz8X7fo8/pxVP/8A&#xA;C2g/8sv/AA8n/NWKu/wtoP8Ayy/8PJ/zVirv8LaD/wAsv/Dyf81Yqk/nHSNI03yrqt5bWnK7jtpB&#xA;Zp6knxXDrwgT7X7UrKMVYdoVtEP8NeUNBht7edPLMWqS3V6lxKCF9K3gj9NJYCvJixc1qAKAb7Ks&#xA;t8jx+X/M/k/RvMK2PoHVLOG6eASSkI8iAugJbcK1QD3xVPP8LaD/AMsv/Dyf81Yq7/C2g/8ALL/w&#xA;8n/NWKu/wtoP/LL/AMPJ/wA1Yqx7yL5a0RdDfTpLesukXVzpxHN6iKCVhbVo3e2MTfTirIf8LaD/&#xA;AMsv/Dyf81Yq7/C2g/8ALL/w8n/NWKu/wtoP/LL/AMPJ/wA1Yql/mHTPL+j6BqWrPZ810+1mujGH&#xA;kq3oxl+Io3U8aYqwfW9L1byh5c0+3s7aykMX6K0i0S5W4llvNQu5khnl5R3ESpGofn9kkkN0AFVW&#xA;a6J5ZJa/j1i1gYw3PCxntxNCstuYYn5FGnnIZZWkT7W/GtMVTP8AwtoP/LL/AMPJ/wA1Yq7/AAto&#xA;P/LL/wAPJ/zVirv8LaD/AMsv/Dyf81Yqx7yZ5a0SO31PS3tqvpWpXNuKPIAIpiLy3UUbokF1Gv0Y&#xA;qyH/AAtoP/LL/wAPJ/zVirv8LaD/AMsv/Dyf81Yq7/C2g/8ALL/w8n/NWKofUdF8s6fp9zf3UHC2&#xA;tInnnfnJtHEpdj9rwGKvO7qLUvK3lKO4GiwPHpuhya5rN7dzTJHLeE+tNaRsh+B2Yu3Jgeq7HfFV&#xA;+r3uuLJoU1lp9lZReZNRgsNN0+9iupbpIWtzPcXMzJdQqPTEUhEYXccasK7Ks30Hy0r2cg1m1hN3&#xA;HPLGkluJoUkiVqI4jeacryH+WcVTL/C2g/8ALL/w8n/NWKsb8x/k15J8x6zp2o6vBLcQ6UGazsBK&#xA;6Q+s5BMrlSJGYcFCjnx9jXFWc4q7FWOaABZ+aPMem9FmkttVhA6BLuL6u6j/AJ7WTuf9bFWR4q7F&#xA;XYqxzzdW5vPL+kjcXepRXE47iLT1a8D/AC+sQwr/ALLFUg0ryvrIbQPNWjyWz6kPLkekzw3RkiiI&#xA;YRzwzKUWY/BIrAoR8Qb7QpuqynyZ5bh8seU9I8vQymdNKtIrX1yOJkMaBWfjU05NU0rtiqc4q7FX&#xA;YqxzSyLPzvrdl0TUYLXVI6/tShTZzgeyR21v/wAFirI8VdirsVY553Jnt9K0gCp1bU7aFh2MVuWv&#xA;p1b2eG0dPpxVrzN5W1DWtY0O8W/igs9Eu/r62b27S+tMIZYFLyCaOgQTllHH7QBNemKskxV2KuxV&#xA;2KsctybP8wLyClItY06K6iA6GawlMNwx9zHdW4/2OKsjxV2KuxVjnn6k+grpPU63c2+msn80E8g+&#xA;tD/pFWU/RiqE89eVfNGv3FgNN1KwttOs39eawv7Ka7jnuENYXf0rm1qsR+JUaq8qMakLRV1x5O1m&#xA;581eXNautSinh8vW9xEsLQsJJp7qOOKS4ZxJxVgiMAAn7RxVl2KuxV2KuxV2Ksd1f/Q/OWg33SO+&#xA;jutKlA7uyC8hZv8AVFpKo/18VZFirsVdirHICL38wLmTrHounJbow6etqMvqzIfdY7SBvk+Kovyb&#xA;w/whofAEJ+j7XiCCCB6K0qG3H04qnGKuxV2KuxVjfmMG08zeW9WGyGafSrluyxX0YkQn53NpCg/1&#xA;sVZJirsVdirHJSb38wIIqVh0XTnncHp62oS+nCw90jtJh8nxVkeKuxV2KuxV2Ksc82H6pqHl/VwK&#xA;LbaglncsOph1FTaqvy+tPAx+WKsjxV2KuxVjepKb7z1o1r1h0m2udTmH8s8w+p23/BRyXP3YqyTF&#xA;XYq7FXYq7FXYq7FWPefo5F8sXF/EpefR3i1WJVryb6jIs7xrTvLGjR/7LFU/jkjljWSNg8bgMjDc&#xA;EEVBGKrsVdirGvJHO60q+1lSBJrl7cXsTkVUwiltaPQEVDWtvE3XviqO8niQeUtFEjBn+oW3JlBU&#xA;E+ivQEt+vFU3xV2KuxV2KpH53sbm88raglmnqX9ui3lhGKjldWbrc2428ZoVxVNbC+tr+xtr61f1&#xA;La7iSeBx0aORQyn6QcVV8VdirG/Jp+tya3rXUajqMyW5PaCxAslA/wAlnt3lX/XxVkmKuxV2KuxV&#xA;2KpV5r0mbVvLepadbsI7u4t3FnKekdwo5QSf7CUK30Yqr6FqsWr6LYarCpSO/t4rhUb7SiVA/Fvd&#xA;a0OKo7FXYqxzyvW91nzDrJ3SW6XTbR/GDTQY2H0XklzirI8VdirsVdirsVdirsVaZVZSrAMrCjKd&#xA;wQexxVjnkB3i8vjR5TW40CaTSpATyb07YgWrOTvyktGikNf5sVZJiqR+dr+7s/LN6bFuGo3QWy05&#xA;v5bq8dbeBj7JJKGb2BxVNNOsLXTtPtdPtE9O0s4Y7e3j/ljiUIg+hRiqX+TeP+END48uP6PtePPl&#xA;yp6K/a5fFX574qnGKuxV2KuxV2Ksa8iMLWxvtAI4toF5LZxJ4WrgXFmF/wAlbadI/mp+WKslxVKv&#xA;NerTaT5dv763CveRxFLGJukl1KRFbR/7OZ0X6cVV9B0mLR9EsNKhbnHYW8Vurnq3poF5H3alTiqO&#xA;xV2KuxV2KuxV2Ksa8nMLO41rQDUfoy+kmtuX7VrqBN3GV/yEkklhX/jHirJcVQGvatFo+iX2qSoZ&#xA;FsoJJvSX7TlFJWNfFnNFA8Tiqj5V0iXSPLun6dO4luoIV+uTKKCS5f455af8WSszfTiqa4q7FXYq&#xA;7FXYq7FXYq7FWMv/ALifPSvTjZeZIBGT+yNQslLL3+1PalvohxVk2KsZv/8Acr52sLEDlaaBEdSu&#xA;j2+tXCvb2ieB4xmd2HY+mfDFWTYqlPlDn/hPROdOf1C15U6V9Fa0riqbYq7FXYq7FXYqxm//ANxP&#xA;naxv6cbTXof0bdN2F1b857NjttyjadCxO59NfDFWTYqxrWiNV816VoqkmDTaaxqQHT4S0VlE4/y5&#xA;ucy+8OKslxV2KuxV2KuxV2KuxVjOtn9Fea9K1rZbTUB+htSfpRpGMlhIx8FnLwqP5phirJsVYz5l&#xA;b9Ja7o3l5DWP1RqupAV2t7Jg0CkjoZLsxEA/aVHGKsmxV2KuxV2KuxV2KuxV2KuxVLPMei/pjSpL&#xA;RJja3Ssk9leBQxguYWEkMvE05BXUclr8S1U7HFUlTz1dRWYt7zRL4+ZV/dnSre3meGWYbcor0oLb&#xA;0G+0JHdeI2YBvhxVNvLGi3GmWEjX0q3GrX8zXmqXCV4NPIAvGOu/pxRosUdd+Ciu9cVTZ2CIzGpC&#xA;gk0BY7eAFScVYroPmby/pXlXQIr69W1aTTrVoln5hyoiUVPIcu3ffFU80vXtH1WKWXT7uO5jhIEr&#xA;IdlqK71xV5l5d88Ta1+ctnLDqfq6HqOkahFp+mIaIv1S5tily9ftSTq0jLTpHx78sVeuYq7FXYql&#xA;+v6NDrOkXGnSyNCZQrQ3Mf8AeQzRsJIZo6/txSKrr7jFUjh863llZmz1jS7yTzHAvBrWxtZ5YLqQ&#xA;CiyW1xx9BY5Dv+9kX06/HTqVUx8raNd2MFzfamUbW9Vl+s6i0RLRoQoSKCJiATHDGoQGg5Gr0BY4&#xA;qneKuxV2KuxV2KuxV2KoLWtIs9Y0m60y8BNvdRlGZDxdT1V0b9l0YBlbsRXFWPWXnC9021On+YrG&#xA;8m1y2HpiSys5pob+myTW7RK0SGSlXjd19M1r8FHKqYeVtK1CH65q+rqF1rVnV7iFW5rbQRAi3tEY&#xA;bMIlZixGxkZ2GxAxVPsVdirsVdirsVdirsVdirsVdirsVdirsVSnygXPlPRC4Af6ha8gDUA+itaE&#xA;gV+7FV3mby9beYdGn0i7uLi3tLocLg2knpSPGdmjL0J4t0Ydxt0xVC3vk7T7zzHpHmCa4uRfaLFL&#xA;DZKjIsXG4CrNzQJ8XqBFr4UFKYqn2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KpP5N4f4Q0PgSU/R9rxJJJI9FaVLbn6cVTjFXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUp8oFz5T0QuAH+oWvI&#xA;A1APorWhIFfuxVNsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVQuk/UP0VZfo//eD0Ivqf2v7ngPT+38X2afa3xVFYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:E659FC6DF3EFDE11967EA2303830C27F</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:F059FC6DF3EFDE11967EA2303830C27F</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:125C98A1F0EFDE11967EA2303830C27F</stRef:instanceID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>475.544444</stDim:w>
            <stDim:h>300.566667</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>初期設定のスウォッチグループ</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -852 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 852 li
1348 852 li
1348 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 852 mo
1348 852 li
1348 0 li
0 0 li
0 852 li
cp
clp
1348 426 mo
1323.17 413.584 li
1330.62 426 li
1323.17 438.415 li
1348 426 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
3 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
0 426 mo
1348 426 li
@
grestore
gsave
0 852 mo
1348 852 li
1348 0 li
0 0 li
0 852 li
cp
clp
297 0 mo
284.483 25.0337 li
297 17.5234 li
309.517 25.0337 li
297 0 li
cp
false sop
0 0 0 rgb
f
3 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
297 852 mo
297 0 li
@
295 823.6 mo
299 823.6 li
295 795.2 mo
299 795.2 li
295 766.8 mo
299 766.8 li
295 738.4 mo
299 738.4 li
295 681.6 mo
299 681.6 li
295 653.2 mo
299 653.2 li
295 624.8 mo
299 624.8 li
295 596.4 mo
299 596.4 li
295 539.6 mo
299 539.6 li
295 511.2 mo
299 511.2 li
295 482.8 mo
299 482.8 li
295 454.4 mo
299 454.4 li
295 397.6 mo
299 397.6 li
295 369.2 mo
299 369.2 li
295 340.8 mo
299 340.8 li
295 312.4 mo
299 312.4 li
295 255.6 mo
299 255.6 li
295 227.2 mo
299 227.2 li
295 198.8 mo
299 198.8 li
295 170.4 mo
299 170.4 li
295 113.6 mo
299 113.6 li
295 85.2002 mo
299 85.2002 li
295 56.7998 mo
299 56.7998 li
295 28.3999 mo
299 28.3999 li
@
293 710 mo
301 710 li
293 568 mo
301 568 li
293 426 mo
301 426 li
293 284 mo
301 284 li
293 142 mo
301 142 li
@
grestore
gsave
0 715 mo
1348 715 li
1348 137 li
0 137 li
0 715 li
cp
clp
4.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
0 155.181 mo
0.329102 155.602 li
0.658203 156.029 li
0.987305 156.462 li
1.31641 156.903 li
1.64551 157.349 li
1.97461 157.802 li
2.30371 158.262 li
2.63281 158.727 li
2.96191 159.199 li
3.29102 159.678 li
3.62012 160.163 li
3.94922 160.653 li
4.27832 161.151 li
4.60742 161.655 li
4.93652 162.165 li
5.26563 162.681 li
5.59473 163.204 li
5.92383 163.732 li
6.25293 164.268 li
6.58203 164.81 li
6.91113 165.357 li
7.24023 165.911 li
7.56934 166.471 li
7.89844 167.037 li
8.22754 167.609 li
8.55664 168.188 li
8.88574 168.772 li
9.21484 169.363 li
9.54395 169.96 li
9.87305 170.563 li
10.2021 171.173 li
10.5313 171.788 li
10.8604 172.409 li
11.1895 173.036 li
11.5186 173.67 li
11.8477 174.309 li
12.1768 174.955 li
12.5059 175.606 li
12.835 176.263 li
13.1641 176.927 li
13.4932 177.596 li
13.8223 178.271 li
14.1514 178.952 li
14.4805 179.639 li
14.8096 180.332 li
15.1387 181.03 li
15.4678 181.735 li
15.7969 182.445 li
16.126 183.161 li
16.4551 183.883 li
16.7842 184.611 li
17.1133 185.344 li
17.4424 186.083 li
17.7715 186.829 li
18.1006 187.579 li
18.4297 188.335 li
18.7588 189.098 li
19.0879 189.865 li
19.417 190.638 li
19.7461 191.417 li
20.0752 192.202 li
20.4043 192.992 li
20.7334 193.787 li
21.0625 194.588 li
21.3916 195.395 li
21.7207 196.207 li
22.0498 197.025 li
22.3789 197.848 li
22.708 198.676 li
23.0371 199.51 li
23.3662 200.35 li
23.6953 201.194 li
24.0244 202.044 li
24.3535 202.9 li
24.6826 203.761 li
25.0117 204.626 li
25.3408 205.498 li
25.6699 206.375 li
25.999 207.256 li
26.3281 208.143 li
26.6572 209.035 li
26.9863 209.933 li
27.3154 210.835 li
27.6445 211.743 li
27.9736 212.656 li
28.3027 213.574 li
28.6318 214.497 li
28.9609 215.425 li
29.29 216.357 li
29.6191 217.295 li
29.9482 218.238 li
30.2773 219.187 li
30.6064 220.139 li
30.9355 221.097 li
31.2646 222.06 li
31.5938 223.027 li
31.9229 224 li
32.252 224.977 li
32.5811 225.958 li
32.9102 226.945 li
33.2393 227.937 li
33.5684 228.933 li
33.8975 229.934 li
34.2266 230.939 li
34.5557 231.95 li
34.8848 232.964 li
35.2139 233.984 li
35.543 235.008 li
35.8721 236.036 li
36.2012 237.069 li
36.5303 238.107 li
36.8594 239.149 li
37.1885 240.196 li
37.5176 241.247 li
37.8467 242.302 li
38.1758 243.362 li
38.5049 244.426 li
38.834 245.494 li
39.1631 246.567 li
39.4922 247.644 li
39.8213 248.726 li
40.1504 249.811 li
40.4795 250.9 li
40.8086 251.995 li
41.1377 253.093 li
41.4668 254.194 li
41.7959 255.301 li
42.125 256.411 li
42.4541 257.525 li
42.7832 258.644 li
43.1123 259.766 li
43.4414 260.893 li
43.7705 262.023 li
44.0996 263.157 li
44.4287 264.295 li
44.7578 265.437 li
45.0869 266.583 li
45.416 267.732 li
45.7451 268.886 li
46.0742 270.042 li
46.4033 271.203 li
46.7324 272.368 li
47.0615 273.536 li
47.3906 274.708 li
47.7197 275.883 li
48.0488 277.062 li
48.3779 278.245 li
48.707 279.431 li
49.0361 280.62 li
49.3652 281.813 li
49.6943 283.01 li
50.0234 284.209 li
50.3525 285.413 li
50.6816 286.619 li
51.0107 287.829 li
51.3398 289.042 li
51.6689 290.259 li
51.998 291.479 li
52.3271 292.701 li
52.6563 293.927 li
52.9854 295.156 li
53.3145 296.389 li
53.6436 297.624 li
53.9727 298.863 li
54.3018 300.104 li
54.6309 301.349 li
54.96 302.596 li
55.2891 303.847 li
55.6182 305.1 li
55.9473 306.356 li
56.2764 307.615 li
56.6055 308.877 li
56.9346 310.142 li
57.2637 311.409 li
57.5928 312.68 li
57.9219 313.952 li
58.251 315.228 li
58.5801 316.506 li
58.9092 317.787 li
59.2383 319.07 li
59.5674 320.356 li
59.8965 321.645 li
60.2256 322.936 li
60.5547 324.229 li
60.7192 324.877 li
60.8838 325.525 li
61.0483 326.174 li
61.2129 326.823 li
61.3774 327.473 li
61.542 328.124 li
61.7065 328.775 li
61.8711 329.427 li
62.0356 330.079 li
62.2002 330.732 li
62.3647 331.385 li
62.5293 332.04 li
62.6938 332.694 li
62.8584 333.349 li
63.0229 334.005 li
63.1875 334.661 li
63.3521 335.318 li
63.5166 335.975 li
63.6812 336.633 li
63.8457 337.292 li
64.0103 337.95 li
64.1748 338.61 li
64.3394 339.27 li
64.5039 339.931 li
64.6685 340.591 li
64.833 341.253 li
64.9976 341.915 li
65.1621 342.577 li
65.3267 343.24 li
65.4912 343.904 li
65.6558 344.568 li
65.8203 345.232 li
65.9849 345.897 li
66.1494 346.563 li
66.314 347.229 li
66.4785 347.895 li
66.6431 348.562 li
66.8076 349.229 li
66.9722 349.897 li
67.1367 350.565 li
67.3013 351.234 li
67.4658 351.903 li
67.6304 352.573 li
67.7949 353.243 li
67.9595 353.913 li
68.124 354.584 li
68.2886 355.255 li
68.4531 355.927 li
68.6177 356.599 li
68.7822 357.271 li
68.9468 357.945 li
69.1113 358.618 li
69.2759 359.292 li
69.4404 359.966 li
69.605 360.641 li
69.7695 361.315 li
69.9341 361.991 li
70.0986 362.667 li
70.2632 363.343 li
70.4277 364.019 li
70.5923 364.696 li
70.7568 365.373 li
70.9214 366.051 li
71.0859 366.729 li
71.2505 367.407 li
71.415 368.085 li
71.5796 368.764 li
71.7441 369.444 li
71.9087 370.123 li
72.0732 370.803 li
72.2378 371.483 li
72.4023 372.164 li
72.5669 372.845 li
72.7314 373.526 li
72.896 374.208 li
73.0605 374.89 li
73.2251 375.572 li
73.3896 376.254 li
73.5542 376.938 li
73.7188 377.621 li
73.8833 378.304 li
74.0479 378.987 li
74.2124 379.671 li
74.377 380.355 li
74.5415 381.04 li
74.7061 381.725 li
74.8706 382.41 li
75.0352 383.095 li
75.1997 383.781 li
75.3643 384.466 li
75.5288 385.152 li
75.6934 385.839 li
75.8579 386.525 li
76.0225 387.212 li
76.187 387.899 li
76.3516 388.586 li
76.5161 389.273 li
76.6807 389.961 li
76.8452 390.649 li
77.0098 391.337 li
77.1743 392.025 li
77.3389 392.714 li
77.5034 393.402 li
77.668 394.091 li
77.8325 394.78 li
77.9971 395.47 li
78.1616 396.159 li
78.3262 396.849 li
78.4907 397.539 li
78.6553 398.229 li
78.8198 398.919 li
78.9844 399.609 li
79.1489 400.299 li
79.3135 400.99 li
79.478 401.681 li
79.6426 402.372 li
79.8071 403.063 li
79.9717 403.754 li
80.1362 404.445 li
80.3008 405.137 li
80.4653 405.828 li
80.6299 406.52 li
80.7944 407.211 li
80.959 407.903 li
81.1235 408.595 li
81.2881 409.288 li
81.4526 409.979 li
81.6172 410.672 li
81.7817 411.364 li
81.9463 412.057 li
82.1108 412.75 li
82.2754 413.442 li
82.4399 414.135 li
82.6045 414.828 li
82.769 415.521 li
82.9336 416.213 li
83.0981 416.906 li
83.2627 417.6 li
83.4272 418.292 li
83.5918 418.985 li
83.7563 419.679 li
83.9209 420.372 li
84.0854 421.065 li
84.25 421.758 li
84.4146 422.452 li
84.5791 423.145 li
84.7437 423.838 li
84.9082 424.532 li
85.0728 425.225 li
85.2373 425.918 li
85.4019 426.612 li
85.5664 427.306 li
85.731 427.998 li
85.8955 428.691 li
86.0601 429.385 li
86.2246 430.078 li
86.3892 430.771 li
86.5537 431.465 li
86.7183 432.158 li
86.8828 432.852 li
87.0474 433.545 li
87.2119 434.237 li
87.3765 434.931 li
87.541 435.624 li
87.7056 436.316 li
87.8701 437.01 li
88.0347 437.702 li
88.1992 438.395 li
88.3638 439.088 li
88.5283 439.78 li
88.6929 440.473 li
88.8574 441.165 li
89.022 441.857 li
89.1865 442.55 li
89.3511 443.242 li
89.5156 443.934 li
89.6802 444.626 li
89.8447 445.317 li
90.0093 446.01 li
90.1738 446.701 li
90.3384 447.393 li
90.5029 448.084 li
90.6675 448.774 li
90.832 449.466 li
90.9966 450.157 li
91.1611 450.848 li
91.3257 451.538 li
91.4902 452.229 li
91.6548 452.919 li
91.8193 453.609 li
91.9839 454.299 li
92.1484 454.989 li
92.313 455.679 li
92.4775 456.368 li
92.6421 457.058 li
92.8066 457.746 li
92.9712 458.436 li
93.1357 459.124 li
93.3003 459.813 li
93.4648 460.501 li
93.6294 461.189 li
93.7939 461.877 li
93.9585 462.564 li
94.123 463.252 li
94.2876 463.939 li
94.4521 464.627 li
94.6167 465.313 li
94.7813 466 li
94.9458 466.687 li
95.1104 467.372 li
95.2749 468.059 li
95.4395 468.744 li
95.604 469.429 li
95.7686 470.114 li
95.9331 470.799 li
96.0977 471.483 li
96.2622 472.168 li
96.4268 472.852 li
96.5913 473.535 li
96.7559 474.219 li
96.9204 474.902 li
97.085 475.585 li
97.2495 476.268 li
97.4141 476.949 li
97.5786 477.632 li
97.7432 478.313 li
97.9077 478.995 li
98.0723 479.676 li
98.2368 480.356 li
98.4014 481.037 li
98.5659 481.717 li
98.7305 482.396 li
98.895 483.076 li
99.0596 483.755 li
99.2241 484.434 li
99.3887 485.112 li
99.5532 485.79 li
99.7178 486.468 li
99.8823 487.145 li
100.047 487.822 li
100.211 488.498 li
100.376 489.175 li
100.541 489.851 li
100.705 490.525 li
100.87 491.201 li
101.034 491.875 li
101.199 492.55 li
101.363 493.224 li
101.528 493.897 li
101.692 494.57 li
101.857 495.243 li
102.021 495.915 li
102.186 496.587 li
102.351 497.258 li
102.515 497.929 li
102.68 498.6 li
102.844 499.27 li
103.009 499.939 li
103.173 500.608 li
103.338 501.277 li
103.502 501.945 li
103.667 502.613 li
103.832 503.281 li
103.996 503.948 li
104.161 504.614 li
104.325 505.28 li
104.49 505.946 li
104.654 506.611 li
104.819 507.275 li
104.983 507.939 li
105.148 508.604 li
105.313 509.267 li
105.477 509.93 li
105.642 510.592 li
105.806 511.253 li
105.971 511.914 li
106.135 512.575 li
106.3 513.235 li
106.464 513.895 li
106.629 514.554 li
106.793 515.212 li
106.958 515.87 li
107.123 516.527 li
107.287 517.185 li
107.452 517.841 li
107.616 518.497 li
107.781 519.152 li
107.945 519.807 li
108.11 520.461 li
108.274 521.114 li
108.439 521.768 li
108.604 522.42 li
108.768 523.072 li
108.933 523.723 li
109.097 524.374 li
109.262 525.024 li
109.426 525.674 li
109.591 526.322 li
109.755 526.971 li
109.92 527.619 li
110.249 528.912 li
110.578 530.203 li
110.907 531.492 li
111.236 532.778 li
111.565 534.063 li
111.895 535.344 li
112.224 536.622 li
112.553 537.897 li
112.882 539.171 li
113.211 540.441 li
113.54 541.709 li
113.869 542.975 li
114.198 544.236 li
114.527 545.496 li
114.856 546.753 li
115.186 548.006 li
115.515 549.257 li
115.844 550.505 li
116.173 551.75 li
116.502 552.991 li
116.831 554.23 li
117.16 555.466 li
117.489 556.699 li
117.818 557.929 li
118.147 559.154 li
118.477 560.378 li
118.806 561.599 li
119.135 562.815 li
119.464 564.028 li
119.793 565.238 li
120.122 566.445 li
120.451 567.649 li
120.78 568.85 li
121.109 570.047 li
121.438 571.24 li
121.768 572.43 li
122.097 573.616 li
122.426 574.799 li
122.755 575.979 li
123.084 577.154 li
123.413 578.326 li
123.742 579.495 li
124.071 580.66 li
124.4 581.821 li
124.729 582.979 li
125.059 584.133 li
125.388 585.282 li
125.717 586.429 li
126.046 587.571 li
126.375 588.709 li
126.704 589.844 li
127.033 590.975 li
127.362 592.102 li
127.691 593.225 li
128.021 594.343 li
128.35 595.458 li
128.679 596.568 li
129.008 597.676 li
129.337 598.778 li
129.666 599.877 li
129.995 600.971 li
130.324 602.062 li
130.653 603.147 li
130.982 604.229 li
131.312 605.307 li
131.641 606.38 li
131.97 607.449 li
132.299 608.514 li
132.628 609.573 li
132.957 610.629 li
133.286 611.681 li
133.615 612.729 li
133.944 613.771 li
134.273 614.809 li
134.603 615.842 li
134.932 616.871 li
135.261 617.896 li
135.59 618.916 li
135.919 619.932 li
136.248 620.942 li
136.577 621.948 li
136.906 622.949 li
137.235 623.946 li
137.564 624.938 li
137.894 625.926 li
138.223 626.908 li
138.552 627.886 li
138.881 628.858 li
139.21 629.827 li
139.539 630.79 li
139.868 631.748 li
140.197 632.702 li
140.526 633.65 li
140.855 634.594 li
141.185 635.532 li
141.514 636.466 li
141.843 637.395 li
142.172 638.318 li
142.501 639.236 li
142.83 640.15 li
143.159 641.059 li
143.488 641.961 li
143.817 642.859 li
144.146 643.752 li
144.476 644.64 li
144.805 645.522 li
145.134 646.399 li
145.463 647.271 li
145.792 648.138 li
146.121 648.999 li
146.45 649.855 li
146.779 650.706 li
147.108 651.552 li
147.438 652.392 li
147.767 653.226 li
148.096 654.055 li
148.425 654.879 li
148.754 655.697 li
149.083 656.51 li
149.412 657.317 li
149.741 658.119 li
150.07 658.915 li
150.399 659.706 li
150.729 660.491 li
151.058 661.271 li
151.387 662.044 li
151.716 662.813 li
152.045 663.575 li
152.374 664.332 li
152.703 665.084 li
153.032 665.829 li
153.361 666.569 li
153.69 667.303 li
154.02 668.031 li
154.349 668.754 li
154.678 669.471 li
155.007 670.182 li
155.336 670.887 li
155.665 671.587 li
155.994 672.28 li
156.323 672.968 li
156.652 673.649 li
156.981 674.325 li
157.311 674.995 li
157.64 675.659 li
157.969 676.317 li
158.298 676.969 li
158.627 677.615 li
158.956 678.256 li
159.285 678.89 li
159.614 679.518 li
159.943 680.14 li
160.272 680.756 li
160.602 681.365 li
160.931 681.969 li
161.26 682.566 li
161.589 683.158 li
161.918 683.744 li
162.247 684.323 li
162.576 684.896 li
162.905 685.463 li
163.234 686.023 li
163.563 686.578 li
163.893 687.127 li
164.222 687.669 li
164.551 688.205 li
164.88 688.734 li
165.209 689.258 li
165.538 689.774 li
165.867 690.285 li
166.196 690.79 li
166.525 691.288 li
166.854 691.78 li
167.184 692.266 li
167.513 692.745 li
167.842 693.218 li
168.171 693.684 li
168.5 694.145 li
168.829 694.598 li
169.158 695.045 li
169.487 695.486 li
169.816 695.92 li
170.146 696.349 li
170.475 696.77 li
170.804 697.185 li
171.133 697.594 li
171.462 697.996 li
171.791 698.392 li
172.12 698.78 li
172.449 699.163 li
172.778 699.539 li
173.107 699.909 li
173.437 700.272 li
173.766 700.629 li
174.095 700.979 li
174.424 701.322 li
174.753 701.659 li
175.082 701.989 li
175.411 702.313 li
175.74 702.63 li
176.069 702.941 li
176.398 703.245 li
176.728 703.542 li
177.057 703.833 li
177.386 704.117 li
177.715 704.395 li
178.044 704.665 li
178.373 704.93 li
178.702 705.188 li
179.031 705.438 li
179.36 705.682 li
179.689 705.92 li
180.019 706.15 li
180.348 706.375 li
180.677 706.592 li
181.006 706.803 li
181.335 707.008 li
181.664 707.205 li
181.993 707.396 li
182.322 707.579 li
182.651 707.757 li
182.98 707.928 li
183.31 708.091 li
183.639 708.248 li
183.968 708.398 li
184.297 708.543 li
184.626 708.68 li
184.955 708.81 li
185.284 708.933 li
185.613 709.05 li
185.942 709.16 li
186.271 709.263 li
186.601 709.359 li
186.93 709.449 li
187.259 709.532 li
187.588 709.608 li
187.917 709.678 li
188.246 709.74 li
188.575 709.796 li
188.904 709.846 li
189.233 709.888 li
189.563 709.923 li
189.892 709.952 li
190.221 709.975 li
190.55 709.989 li
190.879 709.998 li
191.208 710 li
191.537 709.995 li
191.866 709.983 li
192.195 709.965 li
192.524 709.939 li
192.854 709.907 li
193.183 709.868 li
193.512 709.822 li
193.841 709.77 li
194.17 709.711 li
194.499 709.645 li
194.828 709.572 li
195.157 709.492 li
195.486 709.406 li
195.815 709.313 li
196.145 709.214 li
196.474 709.107 li
196.803 708.994 li
197.132 708.874 li
197.461 708.747 li
197.79 708.614 li
198.119 708.474 li
198.448 708.327 li
198.777 708.173 li
199.106 708.013 li
199.436 707.846 li
199.765 707.672 li
200.094 707.491 li
200.423 707.304 li
200.752 707.11 li
201.081 706.909 li
201.41 706.702 li
201.739 706.488 li
202.068 706.267 li
202.397 706.04 li
202.727 705.806 li
203.056 705.564 li
203.385 705.317 li
203.714 705.063 li
204.043 704.803 li
204.372 704.535 li
204.701 704.261 li
205.03 703.98 li
205.359 703.693 li
205.688 703.399 li
206.018 703.099 li
206.347 702.791 li
206.676 702.478 li
207.005 702.157 li
207.334 701.83 li
207.663 701.497 li
207.992 701.156 li
208.321 700.811 li
208.65 700.457 li
208.979 700.097 li
209.309 699.73 li
209.638 699.358 li
209.967 698.979 li
210.296 698.593 li
210.625 698.2 li
210.954 697.802 li
211.283 697.396 li
211.612 696.984 li
211.941 696.566 li
212.271 696.142 li
212.6 695.711 li
212.929 695.273 li
213.258 694.829 li
213.587 694.379 li
213.916 693.922 li
214.245 693.459 li
214.574 692.989 li
214.903 692.514 li
215.232 692.031 li
215.562 691.543 li
215.891 691.048 li
216.22 690.547 li
216.549 690.039 li
216.878 689.525 li
217.207 689.005 li
217.536 688.479 li
217.865 687.946 li
218.194 687.407 li
218.523 686.862 li
218.853 686.311 li
219.182 685.753 li
219.511 685.189 li
219.84 684.619 li
220.169 684.043 li
220.498 683.461 li
220.827 682.873 li
221.156 682.278 li
221.485 681.678 li
221.814 681.07 li
222.144 680.458 li
222.473 679.839 li
222.802 679.214 li
223.131 678.583 li
223.46 677.946 li
223.789 677.303 li
224.118 676.654 li
224.447 675.999 li
224.776 675.338 li
225.105 674.672 li
225.435 673.999 li
225.764 673.32 li
226.093 672.636 li
226.422 671.945 li
226.751 671.249 li
227.08 670.547 li
227.409 669.838 li
227.738 669.125 li
228.067 668.405 li
228.396 667.68 li
228.726 666.948 li
229.055 666.211 li
229.384 665.469 li
229.713 664.721 li
230.042 663.967 li
230.371 663.207 li
230.7 662.441 li
231.029 661.67 li
231.358 660.894 li
231.688 660.111 li
232.017 659.323 li
232.346 658.53 li
232.675 657.731 li
233.004 656.927 li
233.333 656.117 li
233.662 655.302 li
233.991 654.48 li
234.32 653.654 li
234.649 652.822 li
234.979 651.985 li
235.308 651.143 li
235.637 650.295 li
235.966 649.441 li
236.295 648.583 li
236.624 647.719 li
236.953 646.85 li
237.282 645.976 li
237.611 645.096 li
237.94 644.211 li
238.27 643.32 li
238.599 642.425 li
238.928 641.524 li
239.257 640.619 li
239.586 639.708 li
239.915 638.792 li
240.244 637.871 li
240.573 636.945 li
240.902 636.015 li
241.231 635.078 li
241.561 634.138 li
241.89 633.191 li
242.219 632.241 li
242.548 631.285 li
242.877 630.324 li
243.206 629.358 li
243.535 628.389 li
243.864 627.413 li
244.193 626.433 li
244.522 625.448 li
244.852 624.459 li
245.181 623.464 li
245.51 622.465 li
245.839 621.462 li
246.168 620.453 li
246.497 619.44 li
246.826 618.423 li
247.155 617.4 li
247.484 616.374 li
247.813 615.342 li
248.143 614.307 li
248.472 613.267 li
248.801 612.222 li
249.13 611.172 li
249.459 610.119 li
249.788 609.061 li
250.117 607.998 li
250.446 606.932 li
250.775 605.86 li
251.104 604.785 li
251.434 603.706 li
251.763 602.622 li
252.092 601.534 li
252.421 600.441 li
252.75 599.346 li
253.079 598.245 li
253.408 597.14 li
253.737 596.031 li
254.066 594.919 li
254.396 593.802 li
254.725 592.681 li
255.054 591.557 li
255.383 590.428 li
255.712 589.295 li
256.041 588.158 li
256.37 587.019 li
256.699 585.874 li
257.028 584.726 li
257.357 583.574 li
257.687 582.419 li
258.016 581.26 li
258.345 580.097 li
258.674 578.93 li
259.003 577.76 li
259.332 576.585 li
259.661 575.408 li
259.99 574.227 li
260.319 573.042 li
260.648 571.854 li
260.978 570.662 li
261.307 569.467 li
261.636 568.269 li
261.965 567.067 li
262.294 565.861 li
262.623 564.653 li
262.952 563.441 li
263.281 562.227 li
263.61 561.008 li
263.939 559.786 li
264.269 558.562 li
264.598 557.333 li
264.927 556.103 li
265.256 554.868 li
265.585 553.631 li
265.914 552.391 li
266.243 551.147 li
266.572 549.9 li
266.901 548.651 li
267.23 547.399 li
267.56 546.145 li
267.889 544.887 li
268.218 543.626 li
268.547 542.362 li
268.876 541.096 li
269.205 539.826 li
269.534 538.555 li
269.863 537.28 li
270.192 536.003 li
270.521 534.724 li
270.851 533.441 li
271.18 532.156 li
271.509 530.868 li
271.838 529.578 li
272.167 528.286 li
272.332 527.639 li
272.496 526.991 li
272.661 526.343 li
272.825 525.694 li
272.99 525.045 li
273.154 524.395 li
273.319 523.744 li
273.483 523.093 li
273.648 522.44 li
273.813 521.788 li
273.977 521.135 li
274.142 520.481 li
274.306 519.827 li
274.471 519.173 li
274.635 518.518 li
274.8 517.861 li
274.964 517.205 li
275.129 516.548 li
275.293 515.891 li
275.458 515.232 li
275.623 514.574 li
275.787 513.915 li
275.952 513.256 li
276.116 512.596 li
276.281 511.936 li
276.445 511.274 li
276.61 510.612 li
276.774 509.95 li
276.939 509.287 li
277.104 508.625 li
277.268 507.961 li
277.433 507.297 li
277.597 506.632 li
277.762 505.967 li
277.926 505.302 li
278.091 504.636 li
278.255 503.969 li
278.42 503.302 li
278.584 502.635 li
278.749 501.967 li
278.914 501.299 li
279.078 500.63 li
279.243 499.961 li
279.407 499.291 li
279.572 498.621 li
279.736 497.95 li
279.901 497.279 li
280.065 496.607 li
280.23 495.937 li
280.395 495.264 li
280.559 494.592 li
280.724 493.918 li
280.888 493.245 li
281.053 492.571 li
281.217 491.896 li
281.382 491.222 li
281.546 490.547 li
281.711 489.872 li
281.875 489.196 li
282.04 488.52 li
282.205 487.843 li
282.369 487.166 li
282.534 486.489 li
282.698 485.812 li
282.863 485.134 li
283.027 484.455 li
283.192 483.776 li
283.356 483.098 li
283.521 482.418 li
283.686 481.738 li
283.85 481.059 li
284.015 480.378 li
284.179 479.697 li
284.344 479.016 li
284.508 478.335 li
284.673 477.653 li
284.837 476.971 li
285.002 476.289 li
285.167 475.606 li
285.331 474.924 li
285.496 474.24 li
285.66 473.557 li
285.825 472.873 li
285.989 472.189 li
286.154 471.505 li
286.318 470.82 li
286.483 470.136 li
286.647 469.451 li
286.812 468.766 li
286.977 468.08 li
287.141 467.394 li
287.306 466.708 li
287.47 466.021 li
287.635 465.335 li
287.799 464.648 li
287.964 463.961 li
288.128 463.273 li
288.293 462.586 li
288.458 461.898 li
288.622 461.211 li
288.787 460.522 li
288.951 459.834 li
289.116 459.146 li
289.28 458.457 li
289.445 457.769 li
289.609 457.079 li
289.774 456.39 li
289.938 455.7 li
290.103 455.011 li
290.268 454.321 li
290.432 453.631 li
290.597 452.94 li
290.761 452.25 li
290.926 451.56 li
291.09 450.869 li
291.255 450.179 li
291.419 449.487 li
291.584 448.797 li
291.749 448.105 li
291.913 447.414 li
292.078 446.723 li
292.242 446.031 li
292.407 445.34 li
292.571 444.647 li
292.736 443.956 li
292.9 443.264 li
293.065 442.571 li
293.229 441.879 li
293.394 441.188 li
293.559 440.494 li
293.723 439.802 li
293.888 439.109 li
294.052 438.417 li
294.217 437.724 li
294.381 437.031 li
294.546 436.339 li
294.71 435.646 li
294.875 434.952 li
295.04 434.26 li
295.204 433.566 li
295.369 432.873 li
295.533 432.18 li
295.698 431.486 li
295.862 430.794 li
296.027 430.101 li
296.191 429.407 li
296.356 428.714 li
296.521 428.021 li
296.685 427.327 li
296.85 426.634 li
297.014 425.94 li
297.179 425.247 li
297.343 424.554 li
297.508 423.86 li
297.672 423.167 li
297.837 422.474 li
298.001 421.78 li
298.166 421.087 li
298.331 420.394 li
298.495 419.701 li
298.66 419.007 li
298.824 418.314 li
298.989 417.621 li
299.153 416.928 li
299.318 416.235 li
299.482 415.542 li
299.647 414.85 li
299.812 414.157 li
299.976 413.464 li
300.141 412.771 li
300.305 412.079 li
300.47 411.386 li
300.634 410.694 li
300.799 410.001 li
300.963 409.309 li
301.128 408.617 li
301.292 407.925 li
301.457 407.233 li
301.622 406.542 li
301.786 405.85 li
301.951 405.158 li
302.115 404.467 li
302.28 403.775 li
302.444 403.084 li
302.609 402.394 li
302.773 401.703 li
302.938 401.012 li
303.103 400.321 li
303.267 399.631 li
303.432 398.94 li
303.596 398.25 li
303.761 397.561 li
303.925 396.871 li
304.09 396.181 li
304.254 395.492 li
304.419 394.802 li
304.583 394.113 li
304.748 393.424 li
304.913 392.735 li
305.077 392.047 li
305.242 391.359 li
305.406 390.671 li
305.571 389.983 li
305.735 389.295 li
305.9 388.608 li
306.064 387.92 li
306.229 387.233 li
306.394 386.547 li
306.558 385.86 li
306.723 385.174 li
306.887 384.488 li
307.052 383.802 li
307.216 383.117 li
307.381 382.432 li
307.545 381.747 li
307.71 381.062 li
307.875 380.377 li
308.039 379.693 li
308.204 379.009 li
308.368 378.325 li
308.533 377.642 li
308.697 376.959 li
308.862 376.276 li
309.026 375.594 li
309.191 374.911 li
309.355 374.229 li
309.52 373.548 li
309.685 372.867 li
309.849 372.186 li
310.014 371.505 li
310.178 370.825 li
310.343 370.145 li
310.507 369.465 li
310.672 368.786 li
310.836 368.107 li
311.001 367.428 li
311.166 366.75 li
311.33 366.072 li
311.495 365.395 li
311.659 364.717 li
311.824 364.041 li
311.988 363.364 li
312.153 362.688 li
312.317 362.012 li
312.482 361.337 li
312.646 360.662 li
312.811 359.987 li
312.976 359.313 li
313.14 358.639 li
313.305 357.966 li
313.469 357.293 li
313.634 356.62 li
313.798 355.948 li
313.963 355.276 li
314.127 354.605 li
314.292 353.934 li
314.457 353.264 li
314.621 352.594 li
314.786 351.924 li
314.95 351.255 li
315.115 350.586 li
315.279 349.918 li
315.444 349.25 li
315.608 348.583 li
315.773 347.916 li
315.938 347.25 li
316.102 346.584 li
316.267 345.918 li
316.431 345.253 li
316.596 344.589 li
316.76 343.925 li
316.925 343.261 li
317.089 342.598 li
317.254 341.936 li
317.418 341.274 li
317.583 340.612 li
317.748 339.951 li
317.912 339.291 li
318.077 338.631 li
318.241 337.971 li
318.406 337.313 li
318.57 336.654 li
318.735 335.996 li
318.899 335.339 li
319.064 334.682 li
319.229 334.025 li
319.393 333.37 li
319.558 332.715 li
319.722 332.06 li
319.887 331.406 li
320.051 330.752 li
320.216 330.1 li
320.38 329.447 li
320.545 328.795 li
320.709 328.145 li
320.874 327.494 li
321.039 326.844 li
321.203 326.194 li
321.368 325.545 li
321.532 324.897 li
321.697 324.25 li
321.861 323.603 li
322.19 322.311 li
322.52 321.021 li
322.849 319.733 li
323.178 318.448 li
323.507 317.167 li
323.836 315.887 li
324.165 314.61 li
324.494 313.336 li
324.823 312.064 li
325.152 310.795 li
325.481 309.529 li
325.811 308.266 li
326.14 307.005 li
326.469 305.748 li
326.798 304.493 li
327.127 303.241 li
327.456 301.992 li
327.785 300.746 li
328.114 299.502 li
328.443 298.263 li
328.772 297.025 li
329.102 295.792 li
329.431 294.561 li
329.76 293.333 li
330.089 292.108 li
330.418 290.887 li
330.747 289.669 li
331.076 288.454 li
331.405 287.243 li
331.734 286.034 li
332.063 284.83 li
332.393 283.628 li
332.722 282.43 li
333.051 281.235 li
333.38 280.043 li
333.709 278.856 li
334.038 277.671 li
334.367 276.491 li
334.696 275.313 li
335.025 274.14 li
335.354 272.97 li
335.684 271.804 li
336.013 270.641 li
336.342 269.482 li
336.671 268.327 li
337 267.175 li
337.329 266.027 li
337.658 264.884 li
337.987 263.744 li
338.316 262.607 li
338.646 261.475 li
338.975 260.347 li
339.304 259.222 li
339.633 258.102 li
339.962 256.985 li
340.291 255.873 li
340.62 254.765 li
340.949 253.66 li
341.278 252.561 li
341.607 251.464 li
341.937 250.373 li
342.266 249.285 li
342.595 248.201 li
342.924 247.122 li
343.253 246.047 li
343.582 244.977 li
343.911 243.91 li
344.24 242.848 li
344.569 241.791 li
344.898 240.737 li
345.228 239.688 li
345.557 238.644 li
345.886 237.604 li
346.215 236.569 li
346.544 235.538 li
346.873 234.511 li
347.202 233.49 li
347.531 232.473 li
347.86 231.46 li
348.189 230.452 li
348.519 229.448 li
348.848 228.45 li
349.177 227.456 li
349.506 226.467 li
349.835 225.482 li
350.164 224.503 li
350.493 223.528 li
350.822 222.558 li
351.151 221.593 li
351.48 220.633 li
351.81 219.677 li
352.139 218.727 li
352.468 217.781 li
352.797 216.841 li
353.126 215.905 li
353.455 214.975 li
353.784 214.049 li
354.113 213.128 li
354.442 212.213 li
354.771 211.303 li
355.101 210.397 li
355.43 209.498 li
355.759 208.603 li
356.088 207.713 li
356.417 206.829 li
356.746 205.949 li
357.075 205.075 li
357.404 204.207 li
357.733 203.343 li
358.063 202.485 li
358.392 201.632 li
358.721 200.785 li
359.05 199.942 li
359.379 199.105 li
359.708 198.274 li
360.037 197.448 li
360.366 196.628 li
360.695 195.813 li
361.024 195.004 li
361.354 194.2 li
361.683 193.401 li
362.012 192.608 li
362.341 191.821 li
362.67 191.039 li
362.999 190.263 li
363.328 189.493 li
363.657 188.728 li
363.986 187.969 li
364.315 187.215 li
364.645 186.467 li
364.974 185.725 li
365.303 184.988 li
365.632 184.258 li
365.961 183.533 li
366.29 182.814 li
366.619 182.101 li
366.948 181.393 li
367.277 180.691 li
367.606 179.996 li
367.936 179.306 li
368.265 178.621 li
368.594 177.943 li
368.923 177.271 li
369.252 176.604 li
369.581 175.944 li
369.91 175.29 li
370.239 174.641 li
370.568 173.999 li
370.897 173.362 li
371.227 172.732 li
371.556 172.107 li
371.885 171.489 li
372.214 170.877 li
372.543 170.271 li
372.872 169.67 li
373.201 169.077 li
373.53 168.489 li
373.859 167.907 li
374.188 167.332 li
374.518 166.762 li
374.847 166.199 li
375.176 165.642 li
375.505 165.091 li
375.834 164.546 li
376.163 164.008 li
376.492 163.476 li
376.821 162.95 li
377.15 162.431 li
377.479 161.917 li
377.809 161.41 li
378.138 160.909 li
378.467 160.415 li
378.796 159.927 li
379.125 159.445 li
379.454 158.97 li
379.783 158.501 li
380.112 158.038 li
380.441 157.582 li
380.771 157.132 li
381.1 156.689 li
381.429 156.252 li
381.758 155.821 li
382.087 155.397 li
382.416 154.979 li
382.745 154.568 li
383.074 154.164 li
383.403 153.766 li
383.732 153.374 li
384.062 152.988 li
384.391 152.609 li
384.72 152.237 li
385.049 151.872 li
385.378 151.513 li
385.707 151.16 li
386.036 150.814 li
386.365 150.474 li
386.694 150.142 li
387.023 149.815 li
387.353 149.495 li
387.682 149.182 li
388.011 148.875 li
388.34 148.575 li
388.669 148.282 li
388.998 147.996 li
389.327 147.715 li
389.656 147.442 li
389.985 147.175 li
390.314 146.915 li
390.644 146.661 li
390.973 146.414 li
391.302 146.174 li
391.631 145.94 li
391.96 145.714 li
392.289 145.494 li
392.618 145.28 li
392.947 145.073 li
393.276 144.873 li
393.605 144.68 li
393.935 144.493 li
394.264 144.313 li
394.593 144.14 li
394.922 143.973 li
395.251 143.813 li
395.58 143.66 li
395.909 143.514 li
396.238 143.374 li
396.567 143.242 li
396.896 143.115 li
397.226 142.996 li
397.555 142.883 li
397.884 142.777 li
398.213 142.678 li
398.542 142.586 li
398.871 142.5 li
399.2 142.421 li
399.529 142.349 li
399.858 142.284 li
400.188 142.225 li
400.517 142.173 li
400.846 142.128 li
401.175 142.09 li
401.504 142.059 li
401.833 142.034 li
402.162 142.016 li
402.491 142.004 li
402.82 142 li
403.149 142.002 li
403.479 142.012 li
403.808 142.027 li
404.137 142.05 li
404.466 142.08 li
404.795 142.116 li
405.124 142.159 li
405.453 142.208 li
405.782 142.265 li
406.111 142.328 li
406.44 142.398 li
406.77 142.475 li
407.099 142.558 li
407.428 142.648 li
407.757 142.746 li
408.086 142.85 li
408.415 142.96 li
408.744 143.077 li
409.073 143.201 li
409.402 143.332 li
409.731 143.47 li
410.061 143.614 li
410.39 143.765 li
410.719 143.923 li
411.048 144.087 li
411.377 144.258 li
411.706 144.436 li
412.035 144.621 li
412.364 144.812 li
412.693 145.01 li
413.022 145.215 li
413.352 145.426 li
413.681 145.645 li
414.01 145.869 li
414.339 146.101 li
414.668 146.339 li
414.997 146.583 li
415.326 146.835 li
415.655 147.093 li
415.984 147.358 li
416.313 147.629 li
416.643 147.907 li
416.972 148.192 li
417.301 148.483 li
417.63 148.781 li
417.959 149.085 li
418.288 149.396 li
418.617 149.714 li
418.946 150.039 li
419.275 150.37 li
419.604 150.707 li
419.934 151.051 li
420.263 151.402 li
420.592 151.759 li
420.921 152.123 li
421.25 152.493 li
421.579 152.869 li
421.908 153.253 li
422.237 153.643 li
422.566 154.039 li
422.896 154.441 li
423.225 154.851 li
423.554 155.266 li
423.883 155.688 li
424.212 156.117 li
424.541 156.552 li
424.87 156.993 li
425.199 157.441 li
425.528 157.895 li
425.857 158.356 li
426.187 158.823 li
426.516 159.296 li
426.845 159.776 li
427.174 160.262 li
427.503 160.754 li
427.832 161.253 li
428.161 161.758 li
428.49 162.27 li
428.819 162.787 li
429.148 163.311 li
429.478 163.841 li
429.807 164.377 li
430.136 164.92 li
430.465 165.469 li
430.794 166.024 li
431.123 166.585 li
431.452 167.153 li
431.781 167.727 li
432.11 168.307 li
432.439 168.893 li
432.769 169.484 li
433.098 170.083 li
433.427 170.687 li
433.756 171.297 li
434.085 171.914 li
434.414 172.536 li
434.743 173.165 li
435.072 173.799 li
435.401 174.44 li
435.73 175.087 li
436.06 175.739 li
436.389 176.398 li
436.718 177.063 li
437.047 177.732 li
437.376 178.409 li
437.705 179.091 li
438.034 179.779 li
438.363 180.474 li
438.692 181.173 li
439.021 181.879 li
439.351 182.591 li
439.68 183.308 li
440.009 184.031 li
440.338 184.76 li
440.667 185.495 li
440.996 186.235 li
441.325 186.981 li
441.654 187.732 li
441.983 188.49 li
442.313 189.253 li
442.642 190.022 li
442.971 190.796 li
443.3 191.577 li
443.629 192.362 li
443.958 193.153 li
444.287 193.95 li
444.616 194.752 li
444.945 195.56 li
445.274 196.373 li
445.604 197.192 li
445.933 198.016 li
446.262 198.846 li
446.591 199.681 li
446.92 200.521 li
447.249 201.367 li
447.578 202.218 li
447.907 203.075 li
448.236 203.937 li
448.565 204.804 li
448.895 205.676 li
449.224 206.554 li
449.553 207.437 li
449.882 208.324 li
450.211 209.218 li
450.54 210.116 li
450.869 211.02 li
451.198 211.929 li
451.527 212.842 li
451.856 213.761 li
452.186 214.685 li
452.515 215.614 li
452.844 216.548 li
453.173 217.487 li
453.502 218.431 li
453.831 219.38 li
454.16 220.334 li
454.489 221.292 li
454.818 222.256 li
455.147 223.225 li
455.477 224.198 li
455.806 225.176 li
456.135 226.159 li
456.464 227.147 li
456.793 228.139 li
457.122 229.136 li
457.451 230.138 li
457.78 231.145 li
458.109 232.156 li
458.438 233.172 li
458.768 234.192 li
459.097 235.217 li
459.426 236.247 li
459.755 237.28 li
460.084 238.319 li
460.413 239.362 li
460.742 240.409 li
461.071 241.461 li
461.4 242.518 li
461.729 243.578 li
462.059 244.643 li
462.388 245.712 li
462.717 246.786 li
463.046 247.864 li
463.375 248.946 li
463.704 250.032 li
464.033 251.123 li
464.362 252.218 li
464.691 253.317 li
465.021 254.419 li
465.35 255.527 li
465.679 256.638 li
466.008 257.753 li
466.337 258.872 li
466.666 259.995 li
466.995 261.123 li
467.324 262.253 li
467.653 263.389 li
467.982 264.527 li
468.312 265.67 li
468.641 266.816 li
468.97 267.967 li
469.299 269.121 li
469.628 270.279 li
469.957 271.44 li
470.286 272.605 li
470.615 273.774 li
470.944 274.947 li
471.273 276.123 li
471.603 277.303 li
471.932 278.486 li
472.261 279.672 li
472.59 280.863 li
472.919 282.057 li
473.248 283.253 li
473.577 284.454 li
473.906 285.658 li
474.235 286.865 li
474.564 288.076 li
474.894 289.29 li
475.223 290.507 li
475.552 291.727 li
475.881 292.951 li
476.21 294.177 li
476.539 295.407 li
476.868 296.64 li
477.197 297.876 li
477.526 299.115 li
477.855 300.357 li
478.185 301.603 li
478.514 302.851 li
478.843 304.102 li
479.172 305.355 li
479.501 306.612 li
479.83 307.872 li
480.159 309.135 li
480.488 310.4 li
480.817 311.668 li
481.146 312.938 li
481.476 314.212 li
481.805 315.488 li
482.134 316.767 li
482.463 318.048 li
482.792 319.332 li
483.121 320.619 li
483.45 321.907 li
483.779 323.199 li
484.108 324.493 li
484.273 325.141 li
484.438 325.789 li
484.602 326.438 li
484.767 327.088 li
484.931 327.738 li
485.096 328.389 li
485.26 329.04 li
485.425 329.692 li
485.589 330.345 li
485.754 330.998 li
485.918 331.652 li
486.083 332.306 li
486.248 332.961 li
486.412 333.616 li
486.577 334.272 li
486.741 334.929 li
486.906 335.585 li
487.07 336.243 li
487.235 336.901 li
487.399 337.56 li
487.564 338.219 li
487.729 338.879 li
487.893 339.539 li
488.058 340.2 li
488.222 340.861 li
488.387 341.522 li
488.551 342.185 li
488.716 342.848 li
488.88 343.511 li
489.045 344.174 li
489.209 344.838 li
489.374 345.503 li
489.539 346.168 li
489.703 346.834 li
489.868 347.5 li
490.032 348.167 li
490.197 348.834 li
490.361 349.501 li
490.526 350.169 li
490.69 350.837 li
490.855 351.506 li
491.02 352.176 li
491.184 352.846 li
491.349 353.516 li
491.513 354.187 li
491.678 354.857 li
491.842 355.529 li
492.007 356.201 li
492.171 356.873 li
492.336 357.546 li
492.5 358.219 li
492.665 358.893 li
492.83 359.566 li
492.994 360.241 li
493.159 360.916 li
493.323 361.59 li
493.488 362.266 li
493.652 362.942 li
493.817 363.618 li
493.981 364.294 li
494.146 364.972 li
494.311 365.649 li
494.475 366.327 li
494.64 367.005 li
494.804 367.683 li
494.969 368.362 li
495.133 369.041 li
495.298 369.72 li
495.462 370.4 li
495.627 371.08 li
495.792 371.761 li
495.956 372.441 li
496.121 373.123 li
496.285 373.804 li
496.45 374.486 li
496.614 375.167 li
496.779 375.85 li
496.943 376.533 li
497.108 377.215 li
497.272 377.899 li
497.437 378.582 li
497.602 379.266 li
497.766 379.95 li
497.931 380.634 li
498.095 381.319 li
498.26 382.004 li
498.424 382.689 li
498.589 383.375 li
498.753 384.06 li
498.918 384.746 li
499.083 385.432 li
499.247 386.118 li
499.412 386.805 li
499.576 387.492 li
499.741 388.179 li
499.905 388.866 li
500.07 389.554 li
500.234 390.241 li
500.399 390.929 li
500.563 391.618 li
500.728 392.306 li
500.893 392.994 li
501.057 393.683 li
501.222 394.372 li
501.386 395.061 li
501.551 395.75 li
501.715 396.44 li
501.88 397.13 li
502.044 397.82 li
502.209 398.51 li
502.374 399.2 li
502.538 399.89 li
502.703 400.581 li
502.867 401.271 li
503.032 401.962 li
503.196 402.653 li
503.361 403.344 li
503.525 404.035 li
503.69 404.727 li
503.854 405.418 li
504.019 406.11 li
504.184 406.802 li
504.348 407.493 li
504.513 408.185 li
504.677 408.877 li
504.842 409.569 li
505.006 410.262 li
505.171 410.954 li
505.335 411.646 li
505.5 412.339 li
505.665 413.032 li
505.829 413.724 li
505.994 414.417 li
506.158 415.11 li
506.323 415.803 li
506.487 416.496 li
506.652 417.188 li
506.816 417.882 li
506.981 418.575 li
507.146 419.268 li
507.31 419.961 li
507.475 420.654 li
507.639 421.348 li
507.804 422.041 li
507.968 422.734 li
508.133 423.428 li
508.297 424.121 li
508.462 424.814 li
508.626 425.507 li
508.791 426.201 li
508.956 426.894 li
509.12 427.588 li
509.285 428.281 li
509.449 428.975 li
509.614 429.668 li
509.778 430.361 li
509.943 431.054 li
510.107 431.747 li
510.272 432.44 li
510.437 433.134 li
510.601 433.827 li
510.766 434.52 li
510.93 435.213 li
511.095 435.906 li
511.259 436.599 li
511.424 437.292 li
511.588 437.984 li
511.753 438.677 li
511.917 439.37 li
512.082 440.063 li
512.247 440.755 li
512.411 441.447 li
512.576 442.14 li
512.74 442.832 li
512.905 443.523 li
513.069 444.216 li
513.234 444.907 li
513.398 445.6 li
513.563 446.291 li
513.728 446.982 li
513.892 447.674 li
514.057 448.365 li
514.221 449.057 li
514.386 449.747 li
514.55 450.438 li
514.715 451.129 li
514.879 451.819 li
515.044 452.51 li
515.208 453.2 li
515.373 453.891 li
515.538 454.58 li
515.702 455.27 li
515.867 455.96 li
516.031 456.648 li
516.196 457.338 li
516.36 458.027 li
516.525 458.716 li
516.689 459.404 li
516.854 460.093 li
517.019 460.781 li
517.183 461.47 li
517.348 462.157 li
517.512 462.845 li
517.677 463.532 li
517.841 464.22 li
518.006 464.906 li
518.17 465.593 li
518.335 466.279 li
518.5 466.966 li
518.664 467.651 li
518.829 468.338 li
518.993 469.022 li
519.158 469.708 li
519.322 470.394 li
519.487 471.078 li
519.651 471.762 li
519.816 472.446 li
519.98 473.13 li
520.145 473.813 li
520.31 474.497 li
520.474 475.181 li
520.639 475.863 li
520.803 476.545 li
520.968 477.228 li
521.132 477.909 li
521.297 478.591 li
521.461 479.272 li
521.626 479.953 li
521.791 480.634 li
521.955 481.313 li
522.12 481.994 li
522.284 482.673 li
522.449 483.353 li
522.613 484.031 li
522.778 484.71 li
522.942 485.389 li
523.107 486.066 li
523.271 486.743 li
523.436 487.421 li
523.601 488.098 li
523.765 488.773 li
523.93 489.45 li
524.094 490.125 li
524.259 490.801 li
524.423 491.476 li
524.588 492.15 li
524.752 492.824 li
524.917 493.498 li
525.082 494.171 li
525.246 494.844 li
525.411 495.517 li
525.575 496.188 li
525.74 496.86 li
525.904 497.531 li
526.069 498.202 li
526.233 498.873 li
526.398 499.543 li
526.563 500.212 li
526.727 500.881 li
526.892 501.55 li
527.056 502.218 li
527.221 502.886 li
527.385 503.553 li
527.55 504.22 li
527.714 504.886 li
527.879 505.552 li
528.043 506.217 li
528.208 506.882 li
528.373 507.547 li
528.537 508.21 li
528.702 508.874 li
528.866 509.537 li
529.031 510.199 li
529.195 510.861 li
529.36 511.522 li
529.524 512.184 li
529.689 512.844 li
529.854 513.504 li
530.018 514.163 li
530.183 514.822 li
530.347 515.48 li
530.512 516.138 li
530.676 516.795 li
530.841 517.452 li
531.005 518.108 li
531.17 518.764 li
531.334 519.419 li
531.499 520.073 li
531.664 520.728 li
531.828 521.381 li
531.993 522.033 li
532.157 522.686 li
532.322 523.337 li
532.486 523.988 li
532.651 524.639 li
532.815 525.289 li
532.98 525.938 li
533.145 526.587 li
533.309 527.234 li
533.474 527.883 li
533.803 529.176 li
534.132 530.466 li
534.461 531.755 li
534.79 533.04 li
535.119 534.323 li
535.448 535.604 li
535.777 536.882 li
536.106 538.157 li
536.436 539.43 li
536.765 540.7 li
537.094 541.967 li
537.423 543.231 li
537.752 544.493 li
538.081 545.752 li
538.41 547.008 li
538.739 548.261 li
539.068 549.512 li
539.397 550.759 li
539.727 552.003 li
540.056 553.244 li
540.385 554.482 li
540.714 555.718 li
541.043 556.949 li
541.372 558.179 li
541.701 559.404 li
542.03 560.627 li
542.359 561.847 li
542.688 563.063 li
543.018 564.275 li
543.347 565.485 li
543.676 566.691 li
544.005 567.895 li
544.334 569.094 li
544.663 570.29 li
544.992 571.482 li
545.321 572.672 li
545.65 573.857 li
545.979 575.04 li
546.309 576.218 li
546.638 577.394 li
546.967 578.564 li
547.296 579.732 li
547.625 580.896 li
547.954 582.057 li
548.283 583.214 li
548.612 584.367 li
548.941 585.516 li
549.271 586.661 li
549.6 587.803 li
549.929 588.94 li
550.258 590.074 li
550.587 591.204 li
550.916 592.33 li
551.245 593.452 li
551.574 594.57 li
551.903 595.685 li
552.232 596.795 li
552.562 597.9 li
552.891 599.002 li
553.22 600.1 li
553.549 601.193 li
553.878 602.283 li
554.207 603.368 li
554.536 604.449 li
554.865 605.525 li
555.194 606.598 li
555.523 607.666 li
555.853 608.729 li
556.182 609.789 li
556.511 610.844 li
556.84 611.895 li
557.169 612.94 li
557.498 613.982 li
557.827 615.02 li
558.156 616.053 li
558.485 617.08 li
558.814 618.104 li
559.144 619.123 li
559.473 620.138 li
559.802 621.147 li
560.131 622.152 li
560.46 623.153 li
560.789 624.148 li
561.118 625.14 li
561.447 626.126 li
561.776 627.107 li
562.105 628.084 li
562.435 629.057 li
562.764 630.023 li
563.093 630.985 li
563.422 631.943 li
563.751 632.896 li
564.08 633.843 li
564.409 634.785 li
564.738 635.723 li
565.067 636.655 li
565.396 637.583 li
565.726 638.506 li
566.055 639.423 li
566.384 640.335 li
566.713 641.242 li
567.042 642.145 li
567.371 643.042 li
567.7 643.934 li
568.029 644.82 li
568.358 645.701 li
568.688 646.577 li
569.017 647.448 li
569.346 648.313 li
569.675 649.174 li
570.004 650.029 li
570.333 650.879 li
570.662 651.723 li
570.991 652.562 li
571.32 653.396 li
571.649 654.224 li
571.979 655.046 li
572.308 655.863 li
572.637 656.675 li
572.966 657.48 li
573.295 658.281 li
573.624 659.076 li
573.953 659.866 li
574.282 660.65 li
574.611 661.429 li
574.94 662.201 li
575.27 662.969 li
575.599 663.729 li
575.928 664.485 li
576.257 665.235 li
576.586 665.98 li
576.915 666.719 li
577.244 667.452 li
577.573 668.179 li
577.902 668.9 li
578.231 669.616 li
578.561 670.326 li
578.89 671.03 li
579.219 671.729 li
579.548 672.421 li
579.877 673.106 li
580.206 673.787 li
580.535 674.462 li
580.864 675.131 li
581.193 675.794 li
581.522 676.45 li
581.852 677.102 li
582.181 677.746 li
582.51 678.385 li
582.839 679.018 li
583.168 679.645 li
583.497 680.266 li
583.826 680.88 li
584.155 681.488 li
584.484 682.091 li
584.813 682.688 li
585.143 683.278 li
585.472 683.862 li
585.801 684.44 li
586.13 685.012 li
586.459 685.578 li
586.788 686.137 li
587.117 686.69 li
587.446 687.237 li
587.775 687.778 li
588.104 688.313 li
588.434 688.842 li
588.763 689.363 li
589.092 689.879 li
589.421 690.389 li
589.75 690.892 li
590.079 691.389 li
590.408 691.88 li
590.737 692.363 li
591.066 692.842 li
591.396 693.313 li
591.725 693.778 li
592.054 694.237 li
592.383 694.689 li
592.712 695.136 li
593.041 695.575 li
593.37 696.008 li
593.699 696.435 li
594.028 696.854 li
594.357 697.269 li
594.687 697.676 li
595.016 698.077 li
595.345 698.471 li
595.674 698.859 li
596.003 699.24 li
596.332 699.615 li
596.661 699.983 li
596.99 700.346 li
597.319 700.7 li
597.648 701.049 li
597.978 701.392 li
598.307 701.727 li
598.636 702.056 li
598.965 702.378 li
599.294 702.694 li
599.623 703.003 li
599.952 703.306 li
600.281 703.602 li
600.61 703.892 li
600.939 704.174 li
601.269 704.45 li
601.598 704.72 li
601.927 704.982 li
602.256 705.238 li
602.585 705.488 li
602.914 705.731 li
603.243 705.967 li
603.572 706.197 li
603.901 706.42 li
604.23 706.636 li
604.56 706.846 li
604.889 707.048 li
605.218 707.244 li
605.547 707.434 li
605.876 707.616 li
606.205 707.792 li
606.534 707.961 li
606.863 708.124 li
607.192 708.279 li
607.521 708.429 li
607.851 708.571 li
608.18 708.706 li
608.509 708.835 li
608.838 708.957 li
609.167 709.072 li
609.496 709.182 li
609.825 709.283 li
610.154 709.378 li
610.483 709.467 li
610.813 709.548 li
611.142 709.623 li
611.471 709.691 li
611.8 709.752 li
612.129 709.807 li
612.458 709.854 li
612.787 709.896 li
613.116 709.93 li
613.445 709.957 li
613.774 709.978 li
614.104 709.992 li
614.433 709.999 li
614.762 709.999 li
615.091 709.993 li
615.42 709.979 li
615.749 709.96 li
616.078 709.934 li
616.407 709.899 li
616.736 709.859 li
617.065 709.813 li
617.395 709.759 li
617.724 709.698 li
618.053 709.631 li
618.382 709.557 li
618.711 709.476 li
619.04 709.388 li
619.369 709.294 li
619.698 709.192 li
620.027 709.085 li
620.356 708.971 li
620.686 708.849 li
621.015 708.721 li
621.344 708.586 li
621.673 708.444 li
622.002 708.296 li
622.331 708.141 li
622.66 707.979 li
622.989 707.811 li
623.318 707.636 li
623.647 707.453 li
623.977 707.265 li
624.306 707.069 li
624.635 706.867 li
624.964 706.659 li
625.293 706.443 li
625.622 706.222 li
625.951 705.992 li
626.28 705.757 li
626.609 705.515 li
626.938 705.266 li
627.268 705.011 li
627.597 704.748 li
627.926 704.479 li
628.255 704.204 li
628.584 703.922 li
628.913 703.634 li
629.242 703.338 li
629.571 703.036 li
629.9 702.728 li
630.229 702.413 li
630.559 702.091 li
630.888 701.763 li
631.217 701.428 li
631.546 701.087 li
631.875 700.738 li
632.204 700.384 li
632.533 700.023 li
632.862 699.655 li
633.191 699.281 li
633.521 698.9 li
633.85 698.514 li
634.179 698.12 li
634.508 697.72 li
634.837 697.313 li
635.166 696.9 li
635.495 696.48 li
635.824 696.055 li
636.153 695.622 li
636.482 695.184 li
636.812 694.738 li
637.141 694.286 li
637.47 693.828 li
637.799 693.364 li
638.128 692.894 li
638.457 692.416 li
638.786 691.933 li
639.115 691.442 li
639.444 690.946 li
639.773 690.443 li
640.103 689.935 li
640.432 689.42 li
640.761 688.898 li
641.09 688.371 li
641.419 687.837 li
641.748 687.297 li
642.077 686.75 li
642.406 686.197 li
642.735 685.639 li
643.064 685.074 li
643.394 684.503 li
643.723 683.925 li
644.052 683.342 li
644.381 682.752 li
644.71 682.156 li
645.039 681.555 li
645.368 680.946 li
645.697 680.332 li
646.026 679.712 li
646.355 679.086 li
646.685 678.454 li
647.014 677.815 li
647.343 677.172 li
647.672 676.521 li
648.001 675.865 li
648.33 675.203 li
648.659 674.535 li
648.988 673.861 li
649.317 673.181 li
649.646 672.495 li
649.976 671.804 li
650.305 671.106 li
650.634 670.402 li
650.963 669.693 li
651.292 668.979 li
651.621 668.258 li
651.95 667.531 li
652.279 666.799 li
652.608 666.061 li
652.938 665.316 li
653.267 664.567 li
653.596 663.813 li
653.925 663.051 li
654.254 662.285 li
654.583 661.513 li
654.912 660.734 li
655.241 659.951 li
655.57 659.162 li
655.899 658.368 li
656.229 657.568 li
656.558 656.763 li
656.887 655.951 li
657.216 655.135 li
657.545 654.313 li
657.874 653.485 li
658.203 652.652 li
658.532 651.814 li
658.861 650.971 li
659.19 650.121 li
659.52 649.267 li
659.849 648.407 li
660.178 647.542 li
660.507 646.672 li
660.836 645.797 li
661.165 644.916 li
661.494 644.029 li
661.823 643.139 li
662.152 642.242 li
662.481 641.341 li
662.811 640.434 li
663.14 639.522 li
663.469 638.605 li
663.798 637.684 li
664.127 636.757 li
664.456 635.824 li
664.785 634.888 li
665.114 633.945 li
665.443 632.998 li
665.772 632.047 li
666.102 631.09 li
666.431 630.128 li
666.76 629.161 li
667.089 628.19 li
667.418 627.214 li
667.747 626.232 li
668.076 625.247 li
668.405 624.257 li
668.734 623.262 li
669.063 622.262 li
669.393 621.257 li
669.722 620.247 li
670.051 619.233 li
670.38 618.215 li
670.709 617.191 li
671.038 616.164 li
671.367 615.132 li
671.696 614.095 li
672.025 613.054 li
672.354 612.008 li
672.684 610.958 li
673.013 609.903 li
673.342 608.845 li
673.671 607.781 li
674 606.714 li
674.329 605.642 li
674.658 604.565 li
674.987 603.485 li
675.316 602.4 li
675.646 601.312 li
675.975 600.219 li
676.304 599.121 li
676.633 598.021 li
676.962 596.915 li
677.291 595.805 li
677.62 594.691 li
677.949 593.574 li
678.278 592.452 li
678.607 591.327 li
678.937 590.197 li
679.266 589.063 li
679.595 587.927 li
679.924 586.785 li
680.253 585.641 li
680.582 584.492 li
680.911 583.339 li
681.24 582.183 li
681.569 581.022 li
681.898 579.859 li
682.228 578.691 li
682.557 577.521 li
682.886 576.346 li
683.215 575.168 li
683.544 573.985 li
683.873 572.801 li
684.202 571.611 li
684.531 570.419 li
684.86 569.224 li
685.189 568.024 li
685.519 566.822 li
685.848 565.616 li
686.177 564.406 li
686.506 563.194 li
686.835 561.979 li
687.164 560.76 li
687.493 559.537 li
687.822 558.312 li
688.151 557.083 li
688.48 555.852 li
688.81 554.616 li
689.139 553.379 li
689.468 552.138 li
689.797 550.894 li
690.126 549.646 li
690.455 548.396 li
690.784 547.145 li
691.113 545.889 li
691.442 544.63 li
691.771 543.368 li
692.101 542.104 li
692.43 540.838 li
692.759 539.567 li
693.088 538.295 li
693.417 537.021 li
693.746 535.742 li
694.075 534.463 li
694.404 533.18 li
694.733 531.894 li
695.063 530.606 li
695.392 529.315 li
695.721 528.022 li
695.886 527.375 li
696.05 526.728 li
696.215 526.079 li
696.379 525.43 li
696.544 524.779 li
696.708 524.129 li
696.873 523.479 li
697.037 522.827 li
697.202 522.175 li
697.366 521.522 li
697.531 520.869 li
697.695 520.215 li
697.86 519.561 li
698.024 518.906 li
698.189 518.25 li
698.354 517.595 li
698.519 516.938 li
698.683 516.28 li
698.848 515.623 li
699.012 514.965 li
699.176 514.306 li
699.341 513.646 li
699.506 512.987 li
699.67 512.327 li
699.834 511.666 li
699.999 511.005 li
700.164 510.343 li
700.328 509.681 li
700.492 509.018 li
700.657 508.354 li
700.822 507.69 li
700.986 507.026 li
701.15 506.361 li
701.315 505.696 li
701.48 505.03 li
701.645 504.364 li
701.809 503.697 li
701.974 503.03 li
702.139 502.362 li
702.303 501.694 li
702.467 501.026 li
702.632 500.357 li
702.797 499.688 li
702.961 499.018 li
703.125 498.348 li
703.29 497.677 li
703.455 497.006 li
703.619 496.334 li
703.783 495.662 li
703.948 494.99 li
704.113 494.317 li
704.277 493.644 li
704.441 492.971 li
704.606 492.297 li
704.771 491.622 li
704.936 490.947 li
705.1 490.272 li
705.265 489.597 li
705.43 488.921 li
705.594 488.244 li
705.758 487.567 li
705.923 486.891 li
706.088 486.213 li
706.252 485.535 li
706.416 484.857 li
706.581 484.179 li
706.746 483.5 li
706.91 482.82 li
707.074 482.142 li
707.239 481.461 li
707.404 480.781 li
707.568 480.101 li
707.732 479.42 li
707.897 478.738 li
708.063 478.058 li
708.227 477.375 li
708.391 476.693 li
708.556 476.011 li
708.721 475.328 li
708.885 474.646 li
709.049 473.962 li
709.214 473.278 li
709.379 472.595 li
709.543 471.91 li
709.707 471.227 li
709.872 470.542 li
710.037 469.856 li
710.201 469.172 li
710.365 468.486 li
710.53 467.801 li
710.695 467.114 li
710.859 466.429 li
711.023 465.742 li
711.188 465.056 li
711.354 464.368 li
711.518 463.682 li
711.682 462.994 li
711.847 462.307 li
712.012 461.618 li
712.176 460.931 li
712.34 460.242 li
712.505 459.554 li
712.669 458.865 li
712.834 458.177 li
712.998 457.487 li
713.163 456.799 li
713.327 456.109 li
713.492 455.42 li
713.656 454.729 li
713.821 454.04 li
713.985 453.35 li
714.15 452.659 li
714.314 451.969 li
714.479 451.278 li
714.644 450.588 li
714.809 449.897 li
714.973 449.206 li
715.138 448.515 li
715.302 447.824 li
715.467 447.133 li
715.631 446.441 li
715.796 445.749 li
715.96 445.058 li
716.125 444.366 li
716.29 443.674 li
716.454 442.981 li
716.619 442.29 li
716.783 441.598 li
716.948 440.905 li
717.112 440.213 li
717.277 439.52 li
717.441 438.827 li
717.606 438.135 li
717.771 437.441 li
717.936 436.749 li
718.1 436.057 li
718.265 435.363 li
718.429 434.67 li
718.594 433.978 li
718.758 433.284 li
718.923 432.591 li
719.087 431.897 li
719.252 431.204 li
719.416 430.511 li
719.581 429.818 li
719.745 429.125 li
719.91 428.432 li
720.074 427.738 li
720.238 427.045 li
720.403 426.351 li
720.568 425.658 li
720.732 424.965 li
720.896 424.271 li
721.062 423.578 li
721.227 422.885 li
721.391 422.191 li
721.555 421.498 li
721.72 420.805 li
721.885 420.111 li
722.049 419.418 li
722.213 418.725 li
722.378 418.032 li
722.543 417.339 li
722.707 416.646 li
722.871 415.953 li
723.036 415.26 li
723.201 414.567 li
723.365 413.875 li
723.529 413.182 li
723.694 412.489 li
723.859 411.797 li
724.023 411.104 li
724.188 410.412 li
724.353 409.72 li
724.518 409.027 li
724.682 408.335 li
724.846 407.644 li
725.011 406.952 li
725.176 406.26 li
725.34 405.568 li
725.504 404.876 li
725.669 404.186 li
725.834 403.494 li
725.998 402.803 li
726.162 402.112 li
726.327 401.421 li
726.492 400.73 li
726.656 400.04 li
726.82 399.35 li
726.985 398.659 li
727.15 397.969 li
727.314 397.279 li
727.479 396.59 li
727.644 395.9 li
727.809 395.211 li
727.973 394.521 li
728.137 393.833 li
728.302 393.144 li
728.467 392.455 li
728.631 391.767 li
728.795 391.079 li
728.96 390.391 li
729.125 389.703 li
729.289 389.015 li
729.453 388.328 li
729.618 387.641 li
729.783 386.954 li
729.947 386.267 li
730.111 385.581 li
730.276 384.895 li
730.441 384.208 li
730.605 383.523 li
730.77 382.837 li
730.935 382.152 li
731.1 381.467 li
731.264 380.783 li
731.428 380.099 li
731.593 379.414 li
731.758 378.73 li
731.922 378.047 li
732.086 377.364 li
732.251 376.681 li
732.416 375.998 li
732.58 375.316 li
732.744 374.634 li
732.909 373.952 li
733.074 373.271 li
733.238 372.589 li
733.402 371.908 li
733.567 371.228 li
733.731 370.548 li
733.896 369.868 li
734.061 369.188 li
734.226 368.509 li
734.39 367.83 li
734.555 367.152 li
734.719 366.474 li
734.884 365.796 li
735.048 365.119 li
735.213 364.441 li
735.377 363.765 li
735.542 363.088 li
735.706 362.413 li
735.871 361.737 li
736.035 361.062 li
736.2 360.387 li
736.364 359.712 li
736.529 359.039 li
736.693 358.365 li
736.858 357.692 li
737.022 357.019 li
737.188 356.347 li
737.353 355.675 li
737.517 355.003 li
737.682 354.332 li
737.846 353.661 li
738.011 352.991 li
738.175 352.321 li
738.34 351.651 li
738.504 350.983 li
738.669 350.314 li
738.833 349.646 li
738.998 348.979 li
739.162 348.312 li
739.327 347.645 li
739.491 346.979 li
739.656 346.313 li
739.82 345.647 li
739.985 344.983 li
740.149 344.318 li
740.314 343.655 li
740.479 342.991 li
740.644 342.329 li
740.808 341.666 li
740.973 341.004 li
741.137 340.343 li
741.301 339.682 li
741.466 339.022 li
741.631 338.362 li
741.795 337.703 li
741.959 337.044 li
742.124 336.386 li
742.289 335.728 li
742.453 335.071 li
742.617 334.415 li
742.782 333.758 li
742.947 333.103 li
743.111 332.448 li
743.275 331.793 li
743.44 331.14 li
743.605 330.486 li
743.77 329.834 li
743.934 329.182 li
744.099 328.53 li
744.264 327.879 li
744.428 327.229 li
744.592 326.579 li
744.757 325.93 li
744.922 325.281 li
745.086 324.633 li
745.25 323.986 li
745.415 323.339 li
745.744 322.047 li
746.073 320.758 li
746.402 319.472 li
746.731 318.188 li
747.061 316.906 li
747.39 315.626 li
747.719 314.35 li
748.048 313.077 li
748.377 311.806 li
748.706 310.537 li
749.035 309.271 li
749.364 308.009 li
749.693 306.749 li
750.022 305.492 li
750.352 304.237 li
750.681 302.986 li
751.01 301.738 li
751.339 300.492 li
751.668 299.25 li
751.997 298.01 li
752.326 296.774 li
752.655 295.541 li
752.984 294.311 li
753.313 293.083 li
753.643 291.859 li
753.972 290.639 li
754.301 289.421 li
754.63 288.207 li
754.959 286.996 li
755.288 285.789 li
755.617 284.584 li
755.946 283.384 li
756.275 282.186 li
756.604 280.992 li
756.934 279.802 li
757.263 278.614 li
757.592 277.431 li
757.921 276.251 li
758.25 275.074 li
758.579 273.901 li
758.908 272.732 li
759.237 271.566 li
759.566 270.404 li
759.896 269.246 li
760.225 268.092 li
760.554 266.941 li
760.883 265.794 li
761.212 264.651 li
761.541 263.512 li
761.87 262.376 li
762.199 261.245 li
762.528 260.117 li
762.857 258.994 li
763.187 257.874 li
763.516 256.759 li
763.845 255.647 li
764.174 254.54 li
764.503 253.436 li
764.832 252.337 li
765.161 251.242 li
765.49 250.15 li
765.819 249.063 li
766.148 247.981 li
766.478 246.903 li
766.807 245.829 li
767.136 244.759 li
767.465 243.693 li
767.794 242.632 li
768.123 241.576 li
768.452 240.523 li
768.781 239.475 li
769.11 238.432 li
769.439 237.393 li
769.769 236.358 li
770.098 235.328 li
770.427 234.303 li
770.756 233.282 li
771.085 232.266 li
771.414 231.254 li
771.743 230.247 li
772.072 229.245 li
772.401 228.247 li
772.73 227.254 li
773.06 226.266 li
773.389 225.283 li
773.718 224.304 li
774.047 223.33 li
774.376 222.361 li
774.705 221.397 li
775.034 220.438 li
775.363 219.483 li
775.692 218.534 li
776.021 217.589 li
776.351 216.65 li
776.68 215.715 li
777.009 214.786 li
777.338 213.861 li
777.667 212.942 li
777.996 212.027 li
778.325 211.118 li
778.654 210.214 li
778.983 209.315 li
779.313 208.421 li
779.642 207.532 li
779.971 206.649 li
780.3 205.771 li
780.629 204.898 li
780.958 204.03 li
781.287 203.168 li
781.616 202.311 li
781.945 201.459 li
782.274 200.613 li
782.604 199.771 li
782.933 198.936 li
783.262 198.106 li
783.591 197.281 li
783.92 196.462 li
784.249 195.648 li
784.578 194.839 li
784.907 194.037 li
785.236 193.239 li
785.565 192.448 li
785.895 191.661 li
786.224 190.881 li
786.553 190.106 li
786.882 189.336 li
787.211 188.573 li
787.54 187.814 li
787.869 187.062 li
788.198 186.315 li
788.527 185.574 li
788.856 184.839 li
789.186 184.11 li
789.515 183.386 li
789.844 182.668 li
790.173 181.956 li
790.502 181.25 li
790.831 180.549 li
791.16 179.854 li
791.489 179.166 li
791.818 178.483 li
792.147 177.806 li
792.477 177.135 li
792.806 176.47 li
793.135 175.811 li
793.464 175.157 li
793.793 174.51 li
794.122 173.869 li
794.451 173.233 li
794.78 172.604 li
795.109 171.981 li
795.438 171.364 li
795.768 170.753 li
796.097 170.148 li
796.426 169.549 li
796.755 168.957 li
797.084 168.37 li
797.413 167.789 li
797.742 167.215 li
798.071 166.647 li
798.4 166.085 li
798.729 165.529 li
799.059 164.979 li
799.388 164.436 li
799.717 163.899 li
800.046 163.368 li
800.375 162.844 li
800.704 162.325 li
801.033 161.813 li
801.362 161.308 li
801.691 160.808 li
802.021 160.315 li
802.35 159.828 li
802.679 159.348 li
803.008 158.874 li
803.337 158.406 li
803.666 157.945 li
803.995 157.49 li
804.324 157.042 li
804.653 156.6 li
804.982 156.164 li
805.312 155.734 li
805.641 155.312 li
805.97 154.896 li
806.299 154.485 li
806.628 154.082 li
806.957 153.685 li
807.286 153.294 li
807.615 152.911 li
807.944 152.533 li
808.273 152.163 li
808.603 151.798 li
808.932 151.44 li
809.261 151.089 li
809.59 150.744 li
809.919 150.406 li
810.248 150.074 li
810.577 149.749 li
810.906 149.431 li
811.235 149.119 li
811.564 148.814 li
811.894 148.515 li
812.223 148.223 li
812.552 147.938 li
812.881 147.659 li
813.21 147.387 li
813.539 147.122 li
813.868 146.862 li
814.197 146.61 li
814.526 146.365 li
814.855 146.126 li
815.185 145.894 li
815.514 145.668 li
815.843 145.449 li
816.172 145.237 li
816.501 145.032 li
816.83 144.833 li
817.159 144.641 li
817.488 144.456 li
817.817 144.277 li
818.146 144.105 li
818.476 143.94 li
818.805 143.782 li
819.134 143.63 li
819.463 143.485 li
819.792 143.347 li
820.121 143.215 li
820.45 143.09 li
820.779 142.973 li
821.108 142.861 li
821.438 142.757 li
821.767 142.659 li
822.096 142.568 li
822.425 142.483 li
822.754 142.406 li
823.083 142.335 li
823.412 142.271 li
823.741 142.214 li
824.07 142.164 li
824.399 142.12 li
824.729 142.083 li
825.058 142.053 li
825.387 142.029 li
825.716 142.013 li
826.045 142.003 li
826.374 142 li
826.703 142.004 li
827.032 142.014 li
827.361 142.031 li
827.69 142.056 li
828.02 142.086 li
828.349 142.124 li
828.678 142.168 li
829.007 142.219 li
829.336 142.277 li
829.665 142.342 li
829.994 142.413 li
830.323 142.491 li
830.652 142.576 li
830.981 142.668 li
831.311 142.766 li
831.64 142.872 li
831.969 142.983 li
832.298 143.102 li
832.627 143.228 li
832.956 143.359 li
833.285 143.499 li
833.614 143.644 li
833.943 143.796 li
834.272 143.956 li
834.602 144.122 li
834.931 144.294 li
835.26 144.473 li
835.589 144.659 li
835.918 144.852 li
836.247 145.051 li
836.576 145.257 li
836.905 145.47 li
837.234 145.689 li
837.563 145.916 li
837.893 146.148 li
838.222 146.388 li
838.551 146.634 li
838.88 146.887 li
839.209 147.146 li
839.538 147.413 li
839.867 147.685 li
840.196 147.965 li
840.525 148.251 li
840.854 148.543 li
841.184 148.843 li
841.513 149.148 li
841.842 149.461 li
842.171 149.78 li
842.5 150.105 li
842.829 150.438 li
843.158 150.777 li
843.487 151.122 li
843.816 151.474 li
844.146 151.833 li
844.475 152.197 li
844.804 152.569 li
845.133 152.947 li
845.462 153.332 li
845.791 153.723 li
846.12 154.12 li
846.449 154.524 li
846.778 154.935 li
847.107 155.352 li
847.437 155.775 li
847.766 156.205 li
848.095 156.641 li
848.424 157.084 li
848.753 157.533 li
849.082 157.988 li
849.411 158.45 li
849.74 158.919 li
850.069 159.394 li
850.398 159.875 li
850.728 160.362 li
851.057 160.855 li
851.386 161.355 li
851.715 161.862 li
852.044 162.375 li
852.373 162.894 li
852.702 163.418 li
853.031 163.95 li
853.36 164.488 li
853.689 165.032 li
854.019 165.582 li
854.348 166.138 li
854.677 166.701 li
855.006 167.27 li
855.335 167.844 li
855.664 168.425 li
855.993 169.013 li
856.322 169.606 li
856.651 170.205 li
856.98 170.811 li
857.31 171.422 li
857.639 172.04 li
857.968 172.664 li
858.297 173.293 li
858.626 173.929 li
858.955 174.571 li
859.284 175.219 li
859.613 175.873 li
859.942 176.533 li
860.271 177.198 li
860.601 177.87 li
860.93 178.547 li
861.259 179.231 li
861.588 179.92 li
861.917 180.615 li
862.246 181.316 li
862.575 182.023 li
862.904 182.736 li
863.233 183.455 li
863.563 184.179 li
863.892 184.909 li
864.221 185.645 li
864.55 186.386 li
864.879 187.133 li
865.208 187.887 li
865.537 188.645 li
865.866 189.409 li
866.195 190.179 li
866.524 190.955 li
866.854 191.736 li
867.183 192.522 li
867.512 193.315 li
867.841 194.113 li
868.17 194.916 li
868.499 195.725 li
868.828 196.54 li
869.157 197.359 li
869.486 198.185 li
869.815 199.015 li
870.145 199.852 li
870.474 200.693 li
870.803 201.54 li
871.132 202.392 li
871.461 203.25 li
871.79 204.113 li
872.119 204.981 li
872.448 205.854 li
872.777 206.733 li
873.106 207.617 li
873.436 208.506 li
873.765 209.4 li
874.094 210.3 li
874.423 211.205 li
874.752 212.114 li
875.081 213.029 li
875.41 213.949 li
875.739 214.874 li
876.068 215.804 li
876.397 216.739 li
876.727 217.679 li
877.056 218.624 li
877.385 219.574 li
877.714 220.529 li
878.043 221.488 li
878.372 222.453 li
878.701 223.422 li
879.03 224.397 li
879.359 225.376 li
879.688 226.36 li
880.018 227.349 li
880.347 228.342 li
880.676 229.34 li
881.005 230.343 li
881.334 231.35 li
881.663 232.362 li
881.992 233.379 li
882.321 234.4 li
882.65 235.426 li
882.979 236.457 li
883.309 237.492 li
883.638 238.531 li
883.967 239.575 li
884.296 240.623 li
884.625 241.676 li
884.954 242.733 li
885.283 243.795 li
885.612 244.86 li
885.941 245.931 li
886.271 247.005 li
886.6 248.084 li
886.929 249.167 li
887.258 250.254 li
887.587 251.346 li
887.916 252.441 li
888.245 253.541 li
888.574 254.645 li
888.903 255.752 li
889.232 256.865 li
889.562 257.98 li
889.891 259.101 li
890.22 260.225 li
890.549 261.353 li
890.878 262.484 li
891.207 263.62 li
891.536 264.76 li
891.865 265.903 li
892.194 267.05 li
892.523 268.202 li
892.853 269.356 li
893.182 270.515 li
893.511 271.677 li
893.84 272.843 li
894.169 274.013 li
894.498 275.186 li
894.827 276.363 li
895.156 277.543 li
895.485 278.727 li
895.814 279.915 li
896.144 281.105 li
896.473 282.3 li
896.802 283.498 li
897.131 284.699 li
897.46 285.903 li
897.789 287.111 li
898.118 288.323 li
898.447 289.537 li
898.776 290.755 li
899.105 291.976 li
899.435 293.2 li
899.764 294.428 li
900.093 295.658 li
900.422 296.892 li
900.751 298.128 li
901.08 299.368 li
901.409 300.611 li
901.738 301.856 li
902.067 303.105 li
902.396 304.357 li
902.726 305.611 li
903.055 306.869 li
903.384 308.129 li
903.713 309.392 li
904.042 310.658 li
904.371 311.926 li
904.7 313.198 li
905.029 314.472 li
905.358 315.748 li
905.688 317.027 li
906.017 318.31 li
906.346 319.594 li
906.675 320.881 li
907.004 322.17 li
907.333 323.462 li
907.498 324.109 li
907.662 324.757 li
907.827 325.405 li
907.991 326.053 li
908.156 326.703 li
908.32 327.353 li
908.485 328.003 li
908.649 328.654 li
908.814 329.306 li
908.979 329.958 li
909.144 330.611 li
909.308 331.264 li
909.473 331.918 li
909.637 332.573 li
909.801 333.228 li
909.966 333.883 li
910.131 334.54 li
910.295 335.196 li
910.459 335.854 li
910.624 336.511 li
910.789 337.169 li
910.953 337.828 li
911.117 338.487 li
911.282 339.147 li
911.447 339.808 li
911.611 340.469 li
911.775 341.13 li
911.94 341.792 li
912.105 342.455 li
912.27 343.118 li
912.434 343.781 li
912.599 344.445 li
912.764 345.109 li
912.928 345.774 li
913.092 346.439 li
913.257 347.105 li
913.422 347.771 li
913.586 348.438 li
913.75 349.105 li
913.915 349.773 li
914.08 350.441 li
914.244 351.11 li
914.408 351.779 li
914.573 352.448 li
914.738 353.119 li
914.902 353.789 li
915.066 354.459 li
915.231 355.131 li
915.396 355.803 li
915.561 356.475 li
915.725 357.147 li
915.89 357.82 li
916.055 358.493 li
916.219 359.167 li
916.383 359.841 li
916.548 360.516 li
916.713 361.19 li
916.877 361.866 li
917.041 362.541 li
917.206 363.217 li
917.371 363.894 li
917.535 364.57 li
917.699 365.248 li
917.864 365.925 li
918.029 366.603 li
918.193 367.281 li
918.357 367.959 li
918.522 368.639 li
918.688 369.318 li
918.852 369.997 li
919.016 370.677 li
919.181 371.357 li
919.346 372.038 li
919.51 372.719 li
919.674 373.4 li
919.839 374.082 li
920.004 374.763 li
920.168 375.446 li
920.332 376.128 li
920.497 376.811 li
920.662 377.494 li
920.826 378.177 li
920.99 378.861 li
921.155 379.544 li
921.32 380.229 li
921.484 380.913 li
921.648 381.598 li
921.813 382.283 li
921.979 382.968 li
922.143 383.653 li
922.307 384.339 li
922.472 385.025 li
922.637 385.711 li
922.801 386.398 li
922.965 387.084 li
923.13 387.771 li
923.294 388.458 li
923.459 389.146 li
923.623 389.833 li
923.788 390.521 li
923.952 391.209 li
924.117 391.898 li
924.281 392.586 li
924.446 393.275 li
924.61 393.964 li
924.775 394.653 li
924.939 395.342 li
925.104 396.031 li
925.269 396.721 li
925.434 397.411 li
925.598 398.101 li
925.763 398.791 li
925.927 399.481 li
926.092 400.171 li
926.256 400.862 li
926.421 401.553 li
926.585 402.244 li
926.75 402.935 li
926.915 403.625 li
927.079 404.317 li
927.244 405.008 li
927.408 405.7 li
927.573 406.392 li
927.737 407.083 li
927.902 407.775 li
928.066 408.467 li
928.231 409.159 li
928.396 409.852 li
928.561 410.544 li
928.725 411.236 li
928.89 411.929 li
929.054 412.621 li
929.219 413.313 li
929.383 414.006 li
929.548 414.699 li
929.712 415.392 li
929.877 416.085 li
930.041 416.778 li
930.206 417.471 li
930.37 418.164 li
930.535 418.857 li
930.699 419.55 li
930.863 420.243 li
931.028 420.937 li
931.193 421.63 li
931.357 422.323 li
931.521 423.017 li
931.687 423.71 li
931.852 424.403 li
932.016 425.097 li
932.18 425.79 li
932.345 426.483 li
932.51 427.177 li
932.674 427.87 li
932.838 428.563 li
933.003 429.257 li
933.168 429.95 li
933.332 430.644 li
933.496 431.337 li
933.661 432.029 li
933.826 432.723 li
933.99 433.416 li
934.154 434.109 li
934.319 434.802 li
934.484 435.495 li
934.648 436.188 li
934.813 436.881 li
934.978 437.574 li
935.143 438.267 li
935.307 438.959 li
935.471 439.652 li
935.636 440.345 li
935.801 441.037 li
935.965 441.729 li
936.129 442.422 li
936.294 443.113 li
936.459 443.806 li
936.623 444.497 li
936.787 445.189 li
936.952 445.881 li
937.117 446.572 li
937.281 447.265 li
937.445 447.955 li
937.61 448.646 li
937.775 449.338 li
937.939 450.028 li
938.104 450.72 li
938.269 451.41 li
938.434 452.101 li
938.598 452.791 li
938.762 453.481 li
938.927 454.171 li
939.092 454.861 li
939.256 455.551 li
939.42 456.24 li
939.585 456.93 li
939.75 457.619 li
939.914 458.308 li
940.078 458.996 li
940.243 459.686 li
940.408 460.373 li
940.572 461.062 li
940.736 461.75 li
940.901 462.438 li
941.066 463.125 li
941.23 463.813 li
941.395 464.499 li
941.56 465.186 li
941.725 465.873 li
941.889 466.559 li
942.053 467.245 li
942.218 467.931 li
942.383 468.616 li
942.547 469.302 li
942.711 469.987 li
942.876 470.672 li
943.041 471.356 li
943.205 472.041 li
943.369 472.725 li
943.534 473.408 li
943.699 474.092 li
943.863 474.775 li
944.027 475.458 li
944.192 476.141 li
944.356 476.823 li
944.521 477.505 li
944.686 478.188 li
944.851 478.868 li
945.015 479.55 li
945.18 480.23 li
945.344 480.911 li
945.509 481.591 li
945.673 482.271 li
945.838 482.95 li
946.002 483.629 li
946.167 484.308 li
946.331 484.986 li
946.496 485.664 li
946.66 486.342 li
946.825 487.02 li
946.989 487.696 li
947.154 488.373 li
947.318 489.049 li
947.483 489.725 li
947.647 490.4 li
947.813 491.076 li
947.978 491.75 li
948.142 492.425 li
948.307 493.099 li
948.471 493.772 li
948.636 494.445 li
948.8 495.118 li
948.965 495.79 li
949.129 496.462 li
949.294 497.134 li
949.458 497.805 li
949.623 498.476 li
949.787 499.146 li
949.952 499.815 li
950.116 500.484 li
950.281 501.153 li
950.445 501.822 li
950.61 502.49 li
950.774 503.157 li
950.939 503.824 li
951.104 504.491 li
951.269 505.157 li
951.433 505.823 li
951.598 506.488 li
951.762 507.152 li
951.926 507.816 li
952.091 508.48 li
952.256 509.144 li
952.42 509.807 li
952.584 510.469 li
952.749 511.131 li
952.914 511.792 li
953.078 512.452 li
953.242 513.112 li
953.407 513.772 li
953.572 514.432 li
953.736 515.09 li
953.9 515.748 li
954.065 516.405 li
954.23 517.063 li
954.395 517.719 li
954.559 518.375 li
954.724 519.03 li
954.889 519.686 li
955.053 520.34 li
955.217 520.993 li
955.382 521.646 li
955.547 522.299 li
955.711 522.951 li
955.875 523.603 li
956.04 524.253 li
956.205 524.903 li
956.369 525.553 li
956.533 526.202 li
956.698 526.851 li
956.863 527.499 li
957.027 528.146 li
957.356 529.438 li
957.686 530.729 li
958.015 532.017 li
958.344 533.302 li
958.673 534.584 li
959.002 535.864 li
959.331 537.142 li
959.66 538.417 li
959.989 539.688 li
960.318 540.958 li
960.647 542.225 li
960.977 543.488 li
961.306 544.75 li
961.635 546.008 li
961.964 547.264 li
962.293 548.516 li
962.622 549.766 li
962.951 551.012 li
963.28 552.256 li
963.609 553.496 li
963.938 554.734 li
964.268 555.969 li
964.597 557.2 li
964.926 558.429 li
965.255 559.653 li
965.584 560.875 li
965.913 562.094 li
966.242 563.31 li
966.571 564.521 li
966.9 565.73 li
967.229 566.937 li
967.559 568.139 li
967.888 569.338 li
968.217 570.533 li
968.546 571.725 li
968.875 572.913 li
969.204 574.099 li
969.533 575.28 li
969.862 576.458 li
970.191 577.632 li
970.521 578.803 li
970.85 579.97 li
971.179 581.133 li
971.508 582.293 li
971.837 583.449 li
972.166 584.602 li
972.495 585.75 li
972.824 586.895 li
973.153 588.035 li
973.482 589.172 li
973.812 590.305 li
974.141 591.434 li
974.47 592.56 li
974.799 593.681 li
975.128 594.798 li
975.457 595.911 li
975.786 597.02 li
976.115 598.125 li
976.444 599.227 li
976.773 600.323 li
977.103 601.416 li
977.432 602.504 li
977.761 603.588 li
978.09 604.668 li
978.419 605.744 li
978.748 606.815 li
979.077 607.883 li
979.406 608.945 li
979.735 610.004 li
980.064 611.059 li
980.394 612.107 li
980.723 613.153 li
981.052 614.194 li
981.381 615.23 li
981.71 616.262 li
982.039 617.289 li
982.368 618.313 li
982.697 619.33 li
983.026 620.344 li
983.355 621.353 li
983.685 622.356 li
984.014 623.356 li
984.343 624.351 li
984.672 625.341 li
985.001 626.326 li
985.33 627.307 li
985.659 628.283 li
985.988 629.254 li
986.317 630.22 li
986.646 631.181 li
986.976 632.138 li
987.305 633.089 li
987.634 634.035 li
987.963 634.977 li
988.292 635.913 li
988.621 636.845 li
988.95 637.771 li
989.279 638.692 li
989.608 639.609 li
989.938 640.521 li
990.267 641.427 li
990.596 642.328 li
990.925 643.224 li
991.254 644.114 li
991.583 645 li
991.912 645.88 li
992.241 646.755 li
992.57 647.625 li
992.899 648.489 li
993.229 649.349 li
993.558 650.202 li
993.887 651.051 li
994.216 651.895 li
994.545 652.731 li
994.874 653.564 li
995.203 654.392 li
995.532 655.213 li
995.861 656.028 li
996.19 656.839 li
996.52 657.645 li
996.849 658.443 li
997.178 659.238 li
997.507 660.026 li
997.836 660.809 li
998.165 661.586 li
998.494 662.357 li
998.823 663.124 li
999.152 663.884 li
999.481 664.639 li
999.811 665.388 li
1000.14 666.131 li
1000.47 666.869 li
1000.8 667.601 li
1001.13 668.326 li
1001.46 669.047 li
1001.79 669.762 li
1002.11 670.47 li
1002.44 671.173 li
1002.77 671.87 li
1003.1 672.561 li
1003.43 673.246 li
1003.76 673.926 li
1004.09 674.599 li
1004.42 675.267 li
1004.75 675.928 li
1005.08 676.583 li
1005.41 677.233 li
1005.73 677.877 li
1006.06 678.515 li
1006.39 679.146 li
1006.72 679.771 li
1007.05 680.391 li
1007.38 681.005 li
1007.71 681.612 li
1008.04 682.213 li
1008.37 682.809 li
1008.7 683.397 li
1009.03 683.98 li
1009.35 684.557 li
1009.68 685.128 li
1010.01 685.692 li
1010.34 686.25 li
1010.67 686.803 li
1011 687.349 li
1011.33 687.888 li
1011.66 688.421 li
1011.99 688.948 li
1012.32 689.469 li
1012.65 689.983 li
1012.97 690.492 li
1013.3 690.994 li
1013.63 691.489 li
1013.96 691.979 li
1014.29 692.462 li
1014.62 692.938 li
1014.95 693.408 li
1015.28 693.872 li
1015.61 694.33 li
1015.94 694.781 li
1016.27 695.226 li
1016.59 695.664 li
1016.92 696.096 li
1017.25 696.521 li
1017.58 696.939 li
1017.91 697.353 li
1018.24 697.758 li
1018.57 698.158 li
1018.9 698.551 li
1019.23 698.938 li
1019.56 699.317 li
1019.89 699.69 li
1020.21 700.058 li
1020.54 700.418 li
1020.87 700.771 li
1021.2 701.119 li
1021.53 701.46 li
1021.86 701.794 li
1022.19 702.122 li
1022.52 702.443 li
1022.85 702.758 li
1023.18 703.065 li
1023.51 703.367 li
1023.83 703.661 li
1024.16 703.949 li
1024.49 704.23 li
1024.82 704.506 li
1025.15 704.773 li
1025.48 705.035 li
1025.81 705.29 li
1026.14 705.538 li
1026.47 705.779 li
1026.8 706.015 li
1027.13 706.242 li
1027.46 706.464 li
1027.78 706.679 li
1028.11 706.887 li
1028.44 707.089 li
1028.77 707.283 li
1029.1 707.471 li
1029.43 707.652 li
1029.76 707.827 li
1030.09 707.995 li
1030.42 708.156 li
1030.75 708.311 li
1031.08 708.458 li
1031.4 708.6 li
1031.73 708.733 li
1032.06 708.86 li
1032.39 708.981 li
1032.72 709.096 li
1033.05 709.202 li
1033.38 709.303 li
1033.71 709.396 li
1034.04 709.483 li
1034.37 709.563 li
1034.7 709.638 li
1035.02 709.704 li
1035.35 709.764 li
1035.68 709.817 li
1036.01 709.863 li
1036.34 709.903 li
1036.67 709.936 li
1037 709.962 li
1037.33 709.981 li
1037.66 709.994 li
1037.99 710 li
1038.31 709.999 li
1038.64 709.991 li
1038.97 709.977 li
1039.3 709.955 li
1039.63 709.927 li
1039.96 709.892 li
1040.29 709.851 li
1040.62 709.802 li
1040.95 709.747 li
1041.28 709.685 li
1041.61 709.616 li
1041.94 709.541 li
1042.26 709.458 li
1042.59 709.369 li
1042.92 709.273 li
1043.25 709.171 li
1043.58 709.063 li
1043.91 708.946 li
1044.24 708.823 li
1044.57 708.693 li
1044.9 708.558 li
1045.23 708.415 li
1045.56 708.265 li
1045.88 708.108 li
1046.21 707.945 li
1046.54 707.775 li
1046.87 707.599 li
1047.2 707.416 li
1047.53 707.226 li
1047.86 707.029 li
1048.19 706.825 li
1048.52 706.615 li
1048.85 706.398 li
1049.18 706.175 li
1049.5 705.945 li
1049.83 705.708 li
1050.16 705.465 li
1050.49 705.215 li
1050.82 704.958 li
1051.15 704.694 li
1051.48 704.424 li
1051.81 704.147 li
1052.14 703.864 li
1052.47 703.574 li
1052.8 703.277 li
1053.13 702.975 li
1053.45 702.664 li
1053.78 702.348 li
1054.11 702.024 li
1054.44 701.695 li
1054.77 701.359 li
1055.1 701.017 li
1055.43 700.667 li
1055.76 700.312 li
1056.09 699.949 li
1056.42 699.58 li
1056.75 699.204 li
1057.07 698.822 li
1057.4 698.434 li
1057.73 698.039 li
1058.06 697.638 li
1058.39 697.229 li
1058.72 696.815 li
1059.05 696.395 li
1059.38 695.967 li
1059.71 695.533 li
1060.04 695.093 li
1060.37 694.646 li
1060.69 694.193 li
1061.02 693.734 li
1061.35 693.269 li
1061.68 692.797 li
1062.01 692.318 li
1062.34 691.833 li
1062.67 691.342 li
1063 690.845 li
1063.33 690.341 li
1063.66 689.83 li
1063.99 689.314 li
1064.31 688.791 li
1064.64 688.263 li
1064.97 687.728 li
1065.3 687.186 li
1065.63 686.638 li
1065.96 686.084 li
1066.29 685.524 li
1066.62 684.958 li
1066.95 684.386 li
1067.28 683.807 li
1067.61 683.222 li
1067.94 682.631 li
1068.26 682.034 li
1068.59 681.431 li
1068.92 680.822 li
1069.25 680.206 li
1069.58 679.585 li
1069.91 678.958 li
1070.24 678.324 li
1070.57 677.685 li
1070.9 677.04 li
1071.23 676.389 li
1071.55 675.73 li
1071.88 675.067 li
1072.21 674.398 li
1072.54 673.723 li
1072.87 673.042 li
1073.2 672.354 li
1073.53 671.662 li
1073.86 670.963 li
1074.19 670.259 li
1074.52 669.548 li
1074.85 668.832 li
1075.17 668.11 li
1075.5 667.383 li
1075.83 666.648 li
1076.16 665.909 li
1076.49 665.165 li
1076.82 664.414 li
1077.15 663.657 li
1077.48 662.896 li
1077.81 662.128 li
1078.14 661.354 li
1078.47 660.576 li
1078.79 659.791 li
1079.12 659.001 li
1079.45 658.205 li
1079.78 657.404 li
1080.11 656.598 li
1080.44 655.785 li
1080.77 654.968 li
1081.1 654.145 li
1081.43 653.316 li
1081.76 652.482 li
1082.09 651.643 li
1082.42 650.798 li
1082.74 649.948 li
1083.07 649.093 li
1083.4 648.231 li
1083.73 647.365 li
1084.06 646.494 li
1084.39 645.617 li
1084.72 644.735 li
1085.05 643.849 li
1085.38 642.956 li
1085.71 642.059 li
1086.04 641.156 li
1086.36 640.249 li
1086.69 639.336 li
1087.02 638.418 li
1087.35 637.495 li
1087.68 636.567 li
1088.01 635.634 li
1088.34 634.696 li
1088.67 633.753 li
1089 632.805 li
1089.33 631.853 li
1089.66 630.895 li
1089.98 629.932 li
1090.31 628.964 li
1090.64 627.991 li
1090.97 627.015 li
1091.3 626.032 li
1091.63 625.046 li
1091.96 624.055 li
1092.29 623.058 li
1092.62 622.057 li
1092.95 621.052 li
1093.28 620.041 li
1093.6 619.026 li
1093.93 618.007 li
1094.26 616.982 li
1094.59 615.954 li
1094.92 614.921 li
1095.25 613.884 li
1095.58 612.841 li
1095.91 611.795 li
1096.24 610.744 li
1096.57 609.688 li
1096.9 608.629 li
1097.22 607.564 li
1097.55 606.496 li
1097.88 605.423 li
1098.21 604.346 li
1098.54 603.265 li
1098.87 602.179 li
1099.2 601.09 li
1099.53 599.995 li
1099.86 598.897 li
1100.19 597.795 li
1100.52 596.689 li
1100.84 595.579 li
1101.17 594.464 li
1101.5 593.346 li
1101.83 592.224 li
1102.16 591.097 li
1102.49 589.967 li
1102.82 588.833 li
1103.15 587.694 li
1103.48 586.553 li
1103.81 585.407 li
1104.14 584.258 li
1104.46 583.104 li
1104.79 581.947 li
1105.12 580.786 li
1105.45 579.621 li
1105.78 578.453 li
1106.11 577.281 li
1106.44 576.106 li
1106.77 574.927 li
1107.1 573.744 li
1107.43 572.559 li
1107.76 571.369 li
1108.08 570.176 li
1108.41 568.979 li
1108.74 567.779 li
1109.07 566.576 li
1109.4 565.37 li
1109.73 564.16 li
1110.06 562.947 li
1110.39 561.73 li
1110.72 560.511 li
1111.05 559.288 li
1111.38 558.062 li
1111.71 556.832 li
1112.03 555.6 li
1112.36 554.364 li
1112.69 553.126 li
1113.02 551.885 li
1113.35 550.64 li
1113.68 549.393 li
1114.01 548.142 li
1114.34 546.889 li
1114.67 545.633 li
1115 544.373 li
1115.33 543.111 li
1115.65 541.847 li
1115.98 540.579 li
1116.31 539.309 li
1116.64 538.036 li
1116.97 536.761 li
1117.3 535.482 li
1117.63 534.201 li
1117.96 532.918 li
1118.29 531.632 li
1118.62 530.344 li
1118.95 529.053 li
1119.27 527.759 li
1119.44 527.111 li
1119.6 526.463 li
1119.77 525.814 li
1119.93 525.165 li
1120.1 524.515 li
1120.26 523.864 li
1120.43 523.213 li
1120.59 522.562 li
1120.75 521.909 li
1120.92 521.256 li
1121.08 520.603 li
1121.25 519.949 li
1121.41 519.294 li
1121.58 518.639 li
1121.74 517.983 li
1121.91 517.327 li
1122.07 516.67 li
1122.24 516.013 li
1122.4 515.354 li
1122.56 514.696 li
1122.73 514.037 li
1122.89 513.378 li
1123.06 512.718 li
1123.22 512.058 li
1123.39 511.396 li
1123.55 510.735 li
1123.72 510.073 li
1123.88 509.41 li
1124.05 508.747 li
1124.21 508.084 li
1124.38 507.42 li
1124.54 506.756 li
1124.71 506.091 li
1124.87 505.425 li
1125.03 504.759 li
1125.2 504.093 li
1125.36 503.426 li
1125.53 502.759 li
1125.69 502.091 li
1125.86 501.423 li
1126.02 500.754 li
1126.19 500.085 li
1126.35 499.415 li
1126.51 498.745 li
1126.68 498.074 li
1126.84 497.403 li
1127.01 496.732 li
1127.17 496.061 li
1127.34 495.389 li
1127.5 494.716 li
1127.67 494.043 li
1127.83 493.37 li
1128 492.696 li
1128.16 492.021 li
1128.33 491.348 li
1128.49 490.672 li
1128.65 489.997 li
1128.82 489.321 li
1128.98 488.646 li
1129.15 487.969 li
1129.31 487.292 li
1129.48 486.614 li
1129.64 485.938 li
1129.81 485.259 li
1129.97 484.581 li
1130.13 483.902 li
1130.3 483.224 li
1130.46 482.544 li
1130.63 481.864 li
1130.79 481.185 li
1130.96 480.504 li
1131.12 479.823 li
1131.29 479.143 li
1131.45 478.461 li
1131.62 477.779 li
1131.78 477.098 li
1131.95 476.415 li
1132.11 475.733 li
1132.27 475.05 li
1132.44 474.367 li
1132.6 473.684 li
1132.77 473 li
1132.93 472.316 li
1133.1 471.632 li
1133.26 470.947 li
1133.43 470.263 li
1133.59 469.578 li
1133.75 468.893 li
1133.92 468.207 li
1134.08 467.521 li
1134.25 466.835 li
1134.41 466.148 li
1134.58 465.462 li
1134.74 464.775 li
1134.91 464.089 li
1135.07 463.401 li
1135.24 462.714 li
1135.4 462.026 li
1135.56 461.339 li
1135.73 460.65 li
1135.89 459.962 li
1136.06 459.273 li
1136.22 458.585 li
1136.39 457.896 li
1136.55 457.207 li
1136.72 456.518 li
1136.88 455.828 li
1137.05 455.139 li
1137.21 454.449 li
1137.38 453.759 li
1137.54 453.068 li
1137.7 452.378 li
1137.87 451.688 li
1138.03 450.997 li
1138.2 450.307 li
1138.36 449.616 li
1138.53 448.925 li
1138.69 448.233 li
1138.86 447.542 li
1139.02 446.851 li
1139.19 446.159 li
1139.35 445.468 li
1139.51 444.776 li
1139.68 444.084 li
1139.84 443.392 li
1140.01 442.7 li
1140.17 442.008 li
1140.34 441.315 li
1140.5 440.623 li
1140.67 439.931 li
1140.83 439.238 li
1141 438.545 li
1141.16 437.853 li
1141.32 437.16 li
1141.49 436.467 li
1141.65 435.774 li
1141.82 435.081 li
1141.98 434.388 li
1142.15 433.695 li
1142.31 433.002 li
1142.48 432.309 li
1142.64 431.615 li
1142.8 430.922 li
1142.97 430.229 li
1143.13 429.535 li
1143.3 428.842 li
1143.46 428.148 li
1143.63 427.456 li
1143.79 426.762 li
1143.96 426.069 li
1144.12 425.375 li
1144.29 424.682 li
1144.45 423.989 li
1144.62 423.295 li
1144.78 422.602 li
1144.94 421.909 li
1145.11 421.216 li
1145.27 420.522 li
1145.44 419.829 li
1145.6 419.136 li
1145.77 418.443 li
1145.93 417.75 li
1146.1 417.057 li
1146.26 416.364 li
1146.42 415.671 li
1146.59 414.978 li
1146.75 414.285 li
1146.92 413.592 li
1147.08 412.9 li
1147.25 412.207 li
1147.41 411.515 li
1147.58 410.822 li
1147.74 410.13 li
1147.91 409.438 li
1148.07 408.746 li
1148.24 408.054 li
1148.4 407.362 li
1148.56 406.67 li
1148.73 405.978 li
1148.89 405.287 li
1149.06 404.595 li
1149.22 403.904 li
1149.39 403.212 li
1149.55 402.521 li
1149.72 401.831 li
1149.88 401.14 li
1150.04 400.449 li
1150.21 399.759 li
1150.38 399.068 li
1150.54 398.378 li
1150.7 397.688 li
1150.87 396.999 li
1151.03 396.309 li
1151.2 395.619 li
1151.36 394.93 li
1151.53 394.241 li
1151.69 393.552 li
1151.86 392.863 li
1152.02 392.175 li
1152.19 391.486 li
1152.35 390.798 li
1152.51 390.11 li
1152.68 389.423 li
1152.84 388.735 li
1153.01 388.048 li
1153.17 387.361 li
1153.34 386.674 li
1153.5 385.988 li
1153.67 385.301 li
1153.83 384.615 li
1154 383.929 li
1154.16 383.244 li
1154.32 382.559 li
1154.49 381.874 li
1154.65 381.188 li
1154.82 380.504 li
1154.98 379.82 li
1155.15 379.136 li
1155.31 378.452 li
1155.48 377.769 li
1155.64 377.085 li
1155.8 376.402 li
1155.97 375.72 li
1156.13 375.038 li
1156.3 374.356 li
1156.46 373.674 li
1156.63 372.993 li
1156.79 372.312 li
1156.96 371.631 li
1157.12 370.951 li
1157.29 370.271 li
1157.45 369.591 li
1157.62 368.912 li
1157.78 368.232 li
1157.94 367.554 li
1158.11 366.875 li
1158.27 366.198 li
1158.44 365.52 li
1158.6 364.843 li
1158.77 364.166 li
1158.93 363.489 li
1159.1 362.813 li
1159.26 362.137 li
1159.42 361.462 li
1159.59 360.787 li
1159.75 360.112 li
1159.92 359.438 li
1160.08 358.764 li
1160.25 358.091 li
1160.41 357.417 li
1160.58 356.745 li
1160.74 356.073 li
1160.91 355.401 li
1161.07 354.729 li
1161.24 354.059 li
1161.4 353.388 li
1161.56 352.718 li
1161.73 352.048 li
1161.89 351.379 li
1162.06 350.71 li
1162.22 350.042 li
1162.39 349.374 li
1162.55 348.707 li
1162.72 348.04 li
1162.88 347.373 li
1163.04 346.708 li
1163.21 346.042 li
1163.37 345.376 li
1163.54 344.712 li
1163.7 344.048 li
1163.87 343.384 li
1164.03 342.721 li
1164.2 342.059 li
1164.36 341.396 li
1164.53 340.735 li
1164.69 340.074 li
1164.86 339.413 li
1165.02 338.753 li
1165.18 338.093 li
1165.35 337.435 li
1165.51 336.776 li
1165.68 336.118 li
1165.84 335.46 li
1166.01 334.804 li
1166.17 334.147 li
1166.34 333.491 li
1166.5 332.836 li
1166.67 332.182 li
1166.83 331.527 li
1166.99 330.874 li
1167.16 330.221 li
1167.32 329.568 li
1167.49 328.916 li
1167.65 328.265 li
1167.82 327.614 li
1167.98 326.964 li
1168.15 326.314 li
1168.31 325.666 li
1168.47 325.018 li
1168.64 324.37 li
1168.97 323.076 li
1169.3 321.785 li
1169.63 320.496 li
1169.96 319.21 li
1170.29 317.926 li
1170.61 316.645 li
1170.94 315.366 li
1171.27 314.091 li
1171.6 312.817 li
1171.93 311.547 li
1172.26 310.279 li
1172.59 309.014 li
1172.92 307.752 li
1173.25 306.493 li
1173.58 305.236 li
1173.91 303.982 li
1174.23 302.731 li
1174.56 301.484 li
1174.89 300.239 li
1175.22 298.997 li
1175.55 297.758 li
1175.88 296.522 li
1176.21 295.29 li
1176.54 294.061 li
1176.87 292.834 li
1177.2 291.611 li
1177.53 290.391 li
1177.85 289.174 li
1178.18 287.96 li
1178.51 286.75 li
1178.84 285.543 li
1179.17 284.34 li
1179.5 283.14 li
1179.83 281.942 li
1180.16 280.749 li
1180.49 279.56 li
1180.82 278.373 li
1181.15 277.19 li
1181.47 276.011 li
1181.8 274.835 li
1182.13 273.663 li
1182.46 272.494 li
1182.79 271.33 li
1183.12 270.168 li
1183.45 269.011 li
1183.78 267.857 li
1184.11 266.707 li
1184.44 265.561 li
1184.77 264.419 li
1185.09 263.28 li
1185.42 262.146 li
1185.75 261.015 li
1186.08 259.888 li
1186.41 258.766 li
1186.74 257.646 li
1187.07 256.532 li
1187.4 255.421 li
1187.73 254.314 li
1188.06 253.212 li
1188.39 252.113 li
1188.71 251.019 li
1189.04 249.929 li
1189.37 248.843 li
1189.7 247.761 li
1190.03 246.684 li
1190.36 245.61 li
1190.69 244.542 li
1191.02 243.477 li
1191.35 242.417 li
1191.68 241.361 li
1192.01 240.31 li
1192.33 239.263 li
1192.66 238.22 li
1192.99 237.182 li
1193.32 236.148 li
1193.65 235.119 li
1193.98 234.095 li
1194.31 233.075 li
1194.64 232.06 li
1194.97 231.049 li
1195.3 230.042 li
1195.63 229.042 li
1195.96 228.044 li
1196.28 227.053 li
1196.61 226.065 li
1196.94 225.083 li
1197.27 224.105 li
1197.6 223.132 li
1197.93 222.164 li
1198.26 221.201 li
1198.59 220.243 li
1198.92 219.29 li
1199.25 218.341 li
1199.58 217.397 li
1199.9 216.459 li
1200.23 215.525 li
1200.56 214.597 li
1200.89 213.673 li
1201.22 212.755 li
1201.55 211.842 li
1201.88 210.934 li
1202.21 210.03 li
1202.54 209.132 li
1202.87 208.24 li
1203.2 207.352 li
1203.52 206.47 li
1203.85 205.593 li
1204.18 204.721 li
1204.51 203.854 li
1204.84 202.993 li
1205.17 202.137 li
1205.5 201.286 li
1205.83 200.441 li
1206.16 199.601 li
1206.49 198.767 li
1206.81 197.938 li
1207.14 197.114 li
1207.47 196.295 li
1207.8 195.483 li
1208.13 194.676 li
1208.46 193.874 li
1208.79 193.078 li
1209.12 192.287 li
1209.45 191.502 li
1209.78 190.723 li
1210.11 189.949 li
1210.44 189.181 li
1210.76 188.418 li
1211.09 187.661 li
1211.42 186.91 li
1211.75 186.164 li
1212.08 185.424 li
1212.41 184.69 li
1212.74 183.962 li
1213.07 183.239 li
1213.4 182.522 li
1213.73 181.812 li
1214.06 181.106 li
1214.38 180.407 li
1214.71 179.714 li
1215.04 179.026 li
1215.37 178.344 li
1215.7 177.668 li
1216.03 176.999 li
1216.36 176.335 li
1216.69 175.677 li
1217.02 175.025 li
1217.35 174.379 li
1217.68 173.739 li
1218 173.105 li
1218.33 172.477 li
1218.66 171.855 li
1218.99 171.239 li
1219.32 170.629 li
1219.65 170.025 li
1219.98 169.428 li
1220.31 168.836 li
1220.64 168.251 li
1220.97 167.672 li
1221.3 167.099 li
1221.63 166.532 li
1221.95 165.971 li
1222.28 165.417 li
1222.61 164.868 li
1222.94 164.326 li
1223.27 163.791 li
1223.6 163.261 li
1223.93 162.738 li
1224.26 162.221 li
1224.59 161.71 li
1224.92 161.206 li
1225.25 160.707 li
1225.57 160.215 li
1225.9 159.73 li
1226.23 159.251 li
1226.56 158.778 li
1226.89 158.312 li
1227.22 157.852 li
1227.55 157.398 li
1227.88 156.951 li
1228.21 156.51 li
1228.54 156.076 li
1228.87 155.648 li
1229.19 155.227 li
1229.52 154.812 li
1229.85 154.403 li
1230.18 154 li
1230.51 153.605 li
1230.84 153.216 li
1231.17 152.833 li
1231.5 152.457 li
1231.83 152.087 li
1232.16 151.725 li
1232.49 151.368 li
1232.81 151.018 li
1233.14 150.675 li
1233.47 150.338 li
1233.8 150.008 li
1234.13 149.684 li
1234.46 149.367 li
1234.79 149.056 li
1235.12 148.752 li
1235.45 148.455 li
1235.78 148.165 li
1236.11 147.88 li
1236.44 147.603 li
1236.76 147.332 li
1237.09 147.068 li
1237.42 146.811 li
1237.75 146.56 li
1238.08 146.315 li
1238.41 146.078 li
1238.74 145.848 li
1239.07 145.623 li
1239.4 145.406 li
1239.73 145.195 li
1240.05 144.991 li
1240.38 144.793 li
1240.71 144.603 li
1241.04 144.419 li
1241.37 144.242 li
1241.7 144.071 li
1242.03 143.907 li
1242.36 143.75 li
1242.69 143.6 li
1243.02 143.456 li
1243.35 143.319 li
1243.67 143.189 li
1244 143.066 li
1244.33 142.949 li
1244.66 142.839 li
1244.99 142.736 li
1245.32 142.64 li
1245.65 142.55 li
1245.98 142.467 li
1246.31 142.391 li
1246.64 142.322 li
1246.97 142.259 li
1247.29 142.203 li
1247.62 142.154 li
1247.95 142.112 li
1248.28 142.076 li
1248.61 142.048 li
1248.94 142.025 li
1249.27 142.01 li
1249.6 142.002 li
1249.93 142 li
1250.26 142.005 li
1250.59 142.017 li
1250.92 142.036 li
1251.24 142.061 li
1251.57 142.093 li
1251.9 142.132 li
1252.23 142.178 li
1252.56 142.23 li
1252.89 142.29 li
1253.22 142.355 li
1253.55 142.429 li
1253.88 142.508 li
1254.21 142.594 li
1254.54 142.688 li
1254.86 142.787 li
1255.19 142.894 li
1255.52 143.007 li
1255.85 143.127 li
1256.18 143.254 li
1256.51 143.387 li
1256.84 143.527 li
1257.17 143.675 li
1257.5 143.828 li
1257.83 143.989 li
1258.16 144.156 li
1258.48 144.33 li
1258.81 144.511 li
1259.14 144.698 li
1259.47 144.892 li
1259.8 145.093 li
1260.13 145.3 li
1260.46 145.514 li
1260.79 145.735 li
1261.12 145.962 li
1261.45 146.197 li
1261.78 146.438 li
1262.1 146.685 li
1262.43 146.939 li
1262.76 147.2 li
1263.09 147.468 li
1263.42 147.742 li
1263.75 148.022 li
1264.08 148.31 li
1264.41 148.604 li
1264.74 148.904 li
1265.07 149.211 li
1265.4 149.525 li
1265.72 149.846 li
1266.05 150.173 li
1266.38 150.506 li
1266.71 150.847 li
1267.04 151.193 li
1267.37 151.546 li
1267.7 151.906 li
1268.03 152.272 li
1268.36 152.646 li
1268.69 153.025 li
1269.02 153.411 li
1269.34 153.803 li
1269.67 154.202 li
1270 154.607 li
1270.33 155.019 li
1270.66 155.438 li
1270.99 155.862 li
1271.32 156.293 li
1271.65 156.731 li
1271.98 157.175 li
1272.31 157.625 li
1272.64 158.082 li
1272.96 158.545 li
1273.29 159.015 li
1273.62 159.491 li
1273.95 159.973 li
1274.28 160.462 li
1274.61 160.957 li
1274.94 161.458 li
1275.27 161.966 li
1275.6 162.479 li
1275.93 163 li
1276.26 163.526 li
1276.58 164.059 li
1276.91 164.598 li
1277.24 165.143 li
1277.57 165.694 li
1277.9 166.252 li
1278.23 166.816 li
1278.56 167.386 li
1278.89 167.962 li
1279.22 168.544 li
1279.55 169.133 li
1279.88 169.728 li
1280.21 170.328 li
1280.53 170.935 li
1280.86 171.548 li
1281.19 172.167 li
1281.52 172.792 li
1281.85 173.423 li
1282.18 174.06 li
1282.51 174.703 li
1282.84 175.352 li
1283.17 176.007 li
1283.5 176.668 li
1283.83 177.335 li
1284.15 178.007 li
1284.48 178.686 li
1284.81 179.371 li
1285.14 180.062 li
1285.47 180.758 li
1285.8 181.46 li
1286.13 182.168 li
1286.46 182.882 li
1286.79 183.602 li
1287.12 184.327 li
1287.45 185.058 li
1287.77 185.795 li
1288.1 186.538 li
1288.43 187.286 li
1288.76 188.041 li
1289.09 188.8 li
1289.42 189.565 li
1289.75 190.337 li
1290.08 191.113 li
1290.41 191.896 li
1290.74 192.684 li
1291.06 193.477 li
1291.39 194.276 li
1291.72 195.081 li
1292.05 195.891 li
1292.38 196.706 li
1292.71 197.527 li
1293.04 198.354 li
1293.37 199.185 li
1293.7 200.022 li
1294.03 200.865 li
1294.36 201.713 li
1294.69 202.566 li
1295.01 203.425 li
1295.34 204.289 li
1295.67 205.158 li
1296 206.033 li
1296.33 206.913 li
1296.66 207.797 li
1296.99 208.688 li
1297.32 209.583 li
1297.65 210.483 li
1297.98 211.389 li
1298.31 212.3 li
1298.63 213.216 li
1298.96 214.137 li
1299.29 215.063 li
1299.62 215.994 li
1299.95 216.93 li
1300.28 217.871 li
1300.61 218.817 li
1300.94 219.768 li
1301.27 220.724 li
1301.6 221.685 li
1301.93 222.65 li
1302.25 223.621 li
1302.58 224.596 li
1302.91 225.576 li
1303.24 226.561 li
1303.57 227.55 li
1303.9 228.545 li
1304.23 229.544 li
1304.56 230.548 li
1304.89 231.556 li
1305.22 232.569 li
1305.55 233.587 li
1305.88 234.609 li
1306.2 235.636 li
1306.53 236.667 li
1306.86 237.703 li
1307.19 238.743 li
1307.52 239.788 li
1307.85 240.837 li
1308.18 241.891 li
1308.51 242.949 li
1308.84 244.012 li
1309.17 245.078 li
1309.5 246.149 li
1309.82 247.225 li
1310.15 248.304 li
1310.48 249.388 li
1310.81 250.476 li
1311.14 251.568 li
1311.47 252.665 li
1311.8 253.766 li
1312.13 254.87 li
1312.46 255.979 li
1312.79 257.092 li
1313.12 258.208 li
1313.44 259.329 li
1313.77 260.454 li
1314.1 261.583 li
1314.43 262.715 li
1314.76 263.852 li
1315.09 264.992 li
1315.42 266.137 li
1315.75 267.285 li
1316.08 268.437 li
1316.41 269.592 li
1316.74 270.751 li
1317.06 271.915 li
1317.39 273.081 li
1317.72 274.251 li
1318.05 275.425 li
1318.38 276.603 li
1318.71 277.784 li
1319.04 278.969 li
1319.37 280.157 li
1319.7 281.349 li
1320.03 282.543 li
1320.36 283.742 li
1320.69 284.944 li
1321.01 286.149 li
1321.34 287.358 li
1321.67 288.57 li
1322 289.785 li
1322.33 291.003 li
1322.66 292.225 li
1322.99 293.45 li
1323.32 294.678 li
1323.65 295.909 li
1323.98 297.143 li
1324.3 298.38 li
1324.63 299.621 li
1324.96 300.864 li
1325.29 302.11 li
1325.62 303.36 li
1325.95 304.612 li
1326.28 305.867 li
1326.61 307.125 li
1326.94 308.386 li
1327.27 309.649 li
1327.6 310.916 li
1327.92 312.185 li
1328.25 313.457 li
1328.58 314.731 li
1328.91 316.009 li
1329.24 317.288 li
1329.57 318.571 li
1329.9 319.855 li
1330.23 321.143 li
1330.56 322.433 li
1330.89 323.726 li
1331.05 324.373 li
1331.22 325.021 li
1331.38 325.669 li
1331.54 326.318 li
1331.71 326.967 li
1331.87 327.618 li
1332.04 328.268 li
1332.2 328.919 li
1332.37 329.571 li
1332.53 330.224 li
1332.7 330.877 li
1332.86 331.53 li
1333.03 332.185 li
1333.19 332.839 li
1333.36 333.495 li
1333.52 334.15 li
1333.68 334.807 li
1333.85 335.464 li
1334.01 336.121 li
1334.18 336.779 li
1334.34 337.438 li
1334.51 338.097 li
1334.67 338.756 li
1334.84 339.417 li
1335 340.077 li
1335.17 340.738 li
1335.33 341.4 li
1335.49 342.062 li
1335.66 342.725 li
1335.82 343.388 li
1335.99 344.051 li
1336.15 344.715 li
1336.32 345.38 li
1336.48 346.045 li
1336.65 346.71 li
1336.81 347.376 li
1336.97 348.043 li
1337.14 348.71 li
1337.3 349.377 li
1337.47 350.045 li
1337.63 350.714 li
1337.8 351.382 li
1337.96 352.052 li
1338.13 352.721 li
1338.29 353.392 li
1338.46 354.062 li
1338.62 354.733 li
1338.79 355.404 li
1338.95 356.076 li
1339.11 356.749 li
1339.28 357.421 li
1339.44 358.094 li
1339.61 358.768 li
1339.77 359.441 li
1339.94 360.116 li
1340.1 360.79 li
1340.27 361.465 li
1340.43 362.141 li
1340.59 362.816 li
1340.76 363.493 li
1340.92 364.169 li
1341.09 364.846 li
1341.25 365.523 li
1341.42 366.201 li
1341.58 366.879 li
1341.75 367.557 li
1341.91 368.236 li
1342.08 368.915 li
1342.24 369.594 li
1342.41 370.274 li
1342.57 370.954 li
1342.73 371.635 li
1342.9 372.315 li
1343.06 372.996 li
1343.23 373.678 li
1343.39 374.359 li
1343.56 375.041 li
1343.72 375.724 li
1343.89 376.406 li
1344.05 377.089 li
1344.21 377.772 li
1344.38 378.456 li
1344.54 379.139 li
1344.71 379.823 li
1344.87 380.507 li
1345.04 381.192 li
1345.2 381.877 li
1345.37 382.562 li
1345.53 383.247 li
1345.7 383.933 li
1345.86 384.619 li
1346.03 385.305 li
1346.19 385.991 li
1346.35 386.678 li
1346.52 387.364 li
1346.68 388.051 li
1346.85 388.739 li
1347.01 389.426 li
1347.18 390.114 li
1347.34 390.802 li
1347.51 391.49 li
1347.67 392.178 li
1347.83 392.867 li
1348 393.555 li
false sop
0 0 0 rgb
@
grestore
gsave
228.163 166.415 mo
279.187 166.415 li
279.187 113.429 li
228.163 113.429 li
228.163 166.415 li
cp
clp
240.173 156.965 mo
237.357 161.685 234.614 162.673 231.517 162.882 cv
230.673 162.955 230.039 162.955 230.039 164.277 cv
230.039 164.693 230.391 165.042 230.953 165.042 cv
232.852 165.042 235.034 164.832 237.005 164.832 cv
239.329 164.832 241.791 165.042 244.044 165.042 cv
244.466 165.042 245.38 165.042 245.38 163.718 cv
245.38 162.952 244.747 162.882 244.254 162.882 cv
242.635 162.741 240.945 162.176 240.945 160.411 cv
240.945 159.563 241.367 158.785 241.931 157.797 cv
242.423 156.95 242.493 156.95 247.279 148.753 cv
264.945 148.753 li
265.087 150.236 266.072 159.845 266.072 160.553 cv
266.072 162.67 262.412 162.882 261.005 162.882 cv
260.02 162.882 259.316 162.882 259.316 164.277 cv
259.316 165.042 260.16 165.042 260.302 165.042 cv
263.188 165.042 266.214 164.832 269.098 164.832 cv
270.856 164.832 275.292 165.042 277.052 165.042 cv
277.473 165.042 278.318 165.042 278.318 163.647 cv
278.318 162.882 277.615 162.882 276.699 162.882 cv
272.337 162.882 272.337 162.389 272.126 160.345 cv
267.832 116.303 li
267.693 114.893 267.693 114.607 266.496 114.607 cv
265.369 114.607 265.089 115.104 264.667 115.808 cv
240.173 156.965 li
cp
248.619 146.593 mo
262.483 123.373 li
264.736 146.593 li
false sop
0 0 0 rgb
f
grestore
gsave
311.812 730.694 mo
414.647 730.694 li
414.647 676.252 li
311.812 676.252 li
311.812 730.694 li
cp
clp
353.78 712.748 mo
354.792 712.748 356.169 712.748 356.169 711.338 cv
356.169 709.926 354.792 709.926 353.78 709.926 cv
314.397 709.926 li
313.385 709.926 312.014 709.926 312.014 711.338 cv
312.014 712.748 313.387 712.748 314.397 712.748 cv
false sop
0 0 0 rgb
f
375.167 720.984 mo
372.274 725.835 369.454 726.851 366.272 727.065 cv
365.405 727.139 364.753 727.139 364.753 728.497 cv
364.753 728.926 365.116 729.282 365.693 729.282 cv
367.644 729.282 369.887 729.068 371.912 729.068 cv
374.3 729.068 376.828 729.282 379.144 729.282 cv
379.577 729.282 380.517 729.282 380.517 727.924 cv
380.517 727.137 379.867 727.065 379.361 727.065 cv
377.697 726.92 375.96 726.339 375.96 724.525 cv
375.96 723.655 376.393 722.855 376.972 721.839 cv
377.478 720.969 377.551 720.969 382.468 712.547 cv
400.62 712.547 li
400.765 714.071 401.777 723.944 401.777 724.671 cv
401.777 726.847 398.016 727.065 396.571 727.065 cv
395.559 727.065 394.836 727.065 394.836 728.497 cv
394.836 729.282 395.703 729.282 395.848 729.282 cv
398.813 729.282 401.923 729.068 404.886 729.068 cv
406.692 729.068 411.25 729.282 413.059 729.282 cv
413.492 729.282 414.36 729.282 414.36 727.852 cv
414.36 727.065 413.637 727.065 412.698 727.065 cv
408.216 727.065 408.216 726.558 407.998 724.458 cv
403.585 679.206 li
403.443 677.757 403.443 677.463 402.212 677.463 cv
401.057 677.463 400.767 677.973 400.334 678.697 cv
375.167 720.984 li
cp
383.844 710.328 mo
398.091 686.47 li
400.405 710.328 li
f
grestore
gsave
310.443 489.165 mo
346.039 489.165 li
346.039 434.934 li
310.443 434.934 li
clp
344.154 462.62 mo
344.154 456.606 343.779 450.593 341.15 445.028 cv
337.695 437.814 331.538 436.61 328.384 436.61 cv
323.878 436.61 318.396 438.565 315.317 445.557 cv
312.915 450.744 312.539 456.606 312.539 462.62 cv
312.539 468.257 312.838 475.023 315.917 480.734 cv
319.146 486.824 324.63 488.327 328.309 488.327 cv
332.364 488.327 338.072 486.748 341.375 479.607 cv
343.779 474.422 344.154 468.56 344.154 462.62 cv
cp
328.308 486.652 mo
325.396 486.652 320.985 484.772 319.642 477.565 cv
318.819 473.059 318.819 466.149 318.819 461.718 cv
318.819 456.913 318.819 451.954 319.418 447.901 cv
320.837 438.966 326.439 438.283 328.308 438.283 cv
330.773 438.283 335.703 439.639 337.125 447.075 cv
337.871 451.281 337.871 456.986 337.871 461.718 cv
337.871 467.352 337.871 472.457 337.048 477.263 cv
335.928 484.396 331.67 486.65 328.307 486.65 cv
false sop
0 0 0 rgb
f
grestore
gsave
729.016 483.495 mo
774.369 483.495 li
774.369 438.142 li
729.016 438.142 li
729.016 483.495 li
cp
clp
755.346 443.405 mo
755.803 441.58 756.063 441.188 756.844 440.992 cv
757.429 440.863 759.576 440.863 760.94 440.863 cv
767.513 440.863 770.439 441.125 770.439 446.222 cv
770.439 447.201 770.181 449.751 769.919 451.45 cv
769.855 451.711 769.724 452.497 769.724 452.692 cv
769.724 453.084 769.919 453.541 770.504 453.541 cv
771.219 453.541 771.349 453.021 771.479 452.045 cv
773.235 440.723 li
773.301 440.464 773.366 439.813 773.366 439.617 cv
773.366 438.899 772.715 438.899 771.609 438.899 cv
735.5 438.899 li
733.938 438.899 733.875 438.966 733.418 440.2 cv
729.516 451.652 li
729.448 451.779 729.125 452.692 729.125 452.821 cv
729.125 453.211 729.448 453.537 729.905 453.537 cv
730.555 453.537 730.621 453.211 731.011 452.166 cv
734.523 442.035 736.216 440.859 745.844 440.859 cv
748.383 440.859 li
750.204 440.859 750.204 441.12 750.204 441.641 cv
750.204 442.032 750.008 442.815 749.943 443.01 cv
741.226 477.82 li
740.641 480.233 740.446 480.951 733.483 480.951 cv
731.142 480.951 730.752 480.951 730.752 482.174 cv
730.752 482.946 731.468 482.946 731.857 482.946 cv
733.613 482.946 735.436 482.814 737.191 482.814 cv
739.013 482.814 740.899 482.749 742.721 482.749 cv
744.542 482.749 746.365 482.814 748.121 482.814 cv
750.008 482.814 751.958 482.946 753.781 482.946 cv
754.432 482.946 755.211 482.946 755.211 481.658 cv
755.211 480.951 754.691 480.951 753 480.951 cv
751.372 480.951 750.526 480.951 748.837 480.82 cv
746.948 480.625 746.427 480.429 746.427 479.385 cv
746.427 479.321 746.427 478.995 746.689 478.018 cv
false sop
0 0 0 rgb
f
grestore
gsave
1153.22 486.215 mo
1235.91 486.215 li
1235.91 438.142 li
1153.22 438.142 li
1153.22 486.215 li
cp
clp
1182.25 473.637 mo
1180.53 473.637 li
1180.19 475.686 1179.7 478.685 1179.01 479.708 cv
1178.53 480.255 1173.98 480.255 1172.46 480.255 cv
1160.06 480.255 li
1167.37 473.16 li
1178.12 463.656 1182.26 459.937 1182.26 453.048 cv
1182.26 445.195 1176.05 439.684 1167.65 439.684 cv
1159.86 439.684 1154.76 446.028 1154.76 452.166 cv
1154.76 456.03 1158.24 456.03 1158.45 456.03 cv
1159.63 456.03 1162.07 455.194 1162.07 452.342 cv
1162.07 450.532 1160.81 448.724 1158.35 448.724 cv
1157.79 448.724 1157.65 448.724 1157.44 448.724 cv
1159.02 444.313 1162.72 441.8 1166.71 441.8 cv
1172.96 441.8 1175.91 447.397 1175.91 453.06 cv
1175.91 458.58 1172.48 464.034 1168.7 468.315 cv
1155.52 483.089 li
1154.76 483.849 1154.76 483.984 1154.76 485.643 cv
1180.32 485.643 li
false sop
0 0 0 rgb
f
1215.17 443.721 mo
1215.65 441.786 1215.92 441.371 1216.75 441.163 cv
1217.37 441.026 1219.65 441.026 1221.1 441.026 cv
1228.06 441.026 1231.16 441.304 1231.16 446.707 cv
1231.16 447.745 1230.89 450.447 1230.61 452.248 cv
1230.54 452.524 1230.41 453.358 1230.41 453.564 cv
1230.41 453.979 1230.61 454.464 1231.23 454.464 cv
1231.99 454.464 1232.13 453.914 1232.27 452.879 cv
1234.13 440.878 li
1234.2 440.604 1234.27 439.912 1234.27 439.706 cv
1234.27 438.945 1233.58 438.945 1232.41 438.945 cv
1194.13 438.945 li
1192.47 438.945 1192.41 439.015 1191.92 440.323 cv
1187.79 452.462 li
1187.71 452.598 1187.37 453.564 1187.37 453.701 cv
1187.37 454.115 1187.71 454.46 1188.2 454.46 cv
1188.89 454.46 1188.96 454.115 1189.37 453.007 cv
1193.09 442.27 1194.89 441.022 1205.09 441.022 cv
1207.78 441.022 li
1209.71 441.022 1209.71 441.299 1209.71 441.851 cv
1209.71 442.266 1209.51 443.096 1209.44 443.302 cv
1200.2 480.2 li
1199.58 482.758 1199.37 483.519 1191.99 483.519 cv
1189.51 483.519 1189.1 483.519 1189.1 484.814 cv
1189.1 485.633 1189.85 485.633 1190.27 485.633 cv
1192.13 485.633 1194.06 485.494 1195.92 485.494 cv
1197.85 485.494 1199.85 485.425 1201.78 485.425 cv
1203.71 485.425 1205.65 485.494 1207.51 485.494 cv
1209.51 485.494 1211.58 485.633 1213.51 485.633 cv
1214.2 485.633 1215.02 485.633 1215.02 484.268 cv
1215.02 483.519 1214.47 483.519 1212.68 483.519 cv
1210.95 483.519 1210.06 483.519 1208.26 483.38 cv
1206.27 483.173 1205.71 482.965 1205.71 481.858 cv
1205.71 481.791 1205.71 481.445 1205.99 480.409 cv
f
grestore
gsave
1230.24 415.464 mo
1329.28 415.464 li
1329.28 348.834 li
1230.24 348.834 li
clp
1242.91 372.784 mo
1248.92 372.784 li
1250.19 372.784 1250.83 372.784 1250.83 371.506 cv
1250.83 370.804 1250.19 370.804 1249.02 370.804 cv
1243.34 370.804 li
1245.67 361.629 1245.99 360.337 1245.99 359.948 cv
1245.99 358.85 1245.21 358.202 1244.12 358.202 cv
1243.92 358.202 1242.11 358.268 1241.53 360.529 cv
1239.01 370.802 li
1232.94 370.802 li
1231.65 370.802 1231.01 370.802 1231.01 372.017 cv
1231.01 372.783 1231.52 372.783 1232.81 372.783 cv
1238.5 372.783 li
1233.92 391.2 1233.66 392.301 1233.66 393.467 cv
1233.66 396.97 1236.1 399.433 1239.58 399.433 cv
1246.13 399.433 1249.8 389.996 1249.8 389.479 cv
1249.8 388.832 1249.29 388.832 1249.03 388.832 cv
1248.46 388.832 1248.39 389.029 1248.08 389.736 cv
1245.33 396.445 1241.95 397.991 1239.78 397.991 cv
1238.44 397.991 1237.81 397.148 1237.81 395.012 cv
1237.81 393.457 1237.93 393.004 1238.19 391.901 cv
false sop
0 0 0 rgb
f
1290.83 414.924 mo
1290.83 412.402 li
1284.44 412.402 li
1284.44 352.798 li
1290.83 352.798 li
1290.83 350.276 li
1281.92 350.276 li
1281.92 414.924 li
f
1305.82 386.16 mo
1307.24 386.417 1312.53 387.451 1312.53 392.108 cv
1312.53 395.405 1310.27 397.994 1305.24 397.994 cv
1299.82 397.994 1297.49 394.317 1296.27 388.834 cv
1296.08 387.994 1296.01 387.737 1295.36 387.737 cv
1294.52 387.737 1294.52 388.192 1294.52 389.352 cv
1294.52 397.882 li
1294.52 398.981 1294.52 399.433 1295.23 399.433 cv
1295.56 399.433 1295.62 399.368 1296.84 398.139 cv
1296.97 398.008 1296.97 397.88 1298.13 396.648 cv
1300.97 399.369 1303.87 399.433 1305.22 399.433 cv
1312.63 399.433 1315.59 395.103 1315.59 390.446 cv
1315.59 387.021 1313.66 385.081 1312.88 384.305 cv
1310.75 382.235 1308.24 381.719 1305.53 381.204 cv
1301.91 380.491 1297.59 379.652 1297.59 375.901 cv
1297.59 373.64 1299.27 370.986 1304.81 370.986 cv
1311.91 370.986 1312.23 376.813 1312.36 378.821 cv
1312.42 379.404 1313 379.404 1313.13 379.404 cv
1313.97 379.404 1313.97 379.081 1313.97 377.844 cv
1313.97 371.283 li
1313.97 370.18 1313.97 369.725 1313.26 369.725 cv
1312.94 369.725 1312.81 369.725 1311.98 370.498 cv
1311.79 370.755 1311.14 371.337 1310.89 371.532 cv
1308.44 369.724 1305.8 369.724 1304.83 369.724 cv
1296.98 369.724 1294.53 374.062 1294.53 377.682 cv
1294.53 379.946 1295.56 381.755 1297.31 383.18 cv
1299.37 384.863 1301.18 385.25 1305.82 386.155 cv
f
1328.02 350.276 mo
1319.18 350.276 li
1319.18 352.798 li
1325.5 352.798 li
1325.5 412.402 li
1319.18 412.402 li
1319.18 414.924 li
1328.02 414.924 li
f
grestore
gsave
315.369 70.0967 mo
453.544 70.0967 li
453.544 2.82715 li
315.369 2.82715 li
clp
346.331 28.355 mo
346.592 27.4404 346.592 27.3086 346.592 26.8506 cv
346.592 25.6758 345.678 25.083 344.704 25.083 cv
344.053 25.083 343.013 25.4746 342.427 26.4531 cv
342.299 26.7783 341.777 28.8003 341.517 29.9741 cv
341.062 31.668 340.606 33.4277 340.217 35.187 cv
337.292 46.917 li
337.032 47.8955 334.238 52.457 329.946 52.457 cv
326.63 52.457 325.916 49.5825 325.916 47.1646 cv
325.916 44.1572 327.002 40.105 329.179 34.3525 cv
330.202 31.6714 330.459 30.9521 330.459 29.6455 cv
330.459 26.7036 328.375 24.2803 325.121 24.2803 cv
318.939 24.2803 316.535 33.811 316.535 34.4038 cv
316.535 35.0591 317.179 35.0591 317.307 35.0591 cv
317.951 35.0591 318.017 34.9297 318.338 33.8789 cv
320.077 27.7051 322.655 25.7344 324.846 25.7344 cv
325.362 25.7344 326.458 25.7344 326.458 27.833 cv
326.458 29.4663 325.828 31.1675 325.385 32.4087 cv
322.866 39.3379 321.733 43.063 321.733 46.1348 cv
321.733 51.9531 325.828 53.9131 329.662 53.9131 cv
332.195 53.9131 334.405 52.8018 336.227 50.9707 cv
335.381 54.3784 334.598 57.5864 331.989 61.0596 cv
330.295 63.2861 327.817 65.1855 324.816 65.1855 cv
323.904 65.1855 320.971 64.9922 319.861 62.458 cv
320.904 62.458 321.752 62.458 322.665 61.6665 cv
323.317 61.0718 323.97 60.2124 323.97 58.957 cv
323.97 56.9077 322.21 56.6416 321.557 56.6416 cv
320.057 56.6416 317.906 57.6943 317.906 60.9189 cv
317.906 64.2075 320.776 66.6411 324.819 66.6411 cv
331.535 66.6411 338.251 60.6973 340.078 53.313 cv
false sop
0 0 0 rgb
f
387.268 69.5513 mo
387.268 67.0049 li
380.822 67.0049 li
380.822 6.8291 li
387.268 6.8291 li
387.268 4.28271 li
378.276 4.28271 li
378.276 69.5513 li
f
395.91 30.6846 mo
395.91 48.2402 li
395.91 51.186 395.205 51.186 390.907 51.186 cv
390.907 53.1865 li
393.188 53.1211 396.514 52.9917 398.275 52.9917 cv
399.969 52.9917 403.362 53.1211 405.578 53.1865 cv
405.578 51.186 li
401.177 51.186 400.455 51.186 400.455 48.2402 cv
400.455 36.2026 li
400.455 29.397 405.086 25.7344 409.262 25.7344 cv
413.372 25.7344 414.087 29.2676 414.087 32.9961 cv
414.087 48.2402 li
414.087 51.186 413.375 51.186 409.032 51.186 cv
409.032 53.1865 li
411.313 53.1211 414.639 52.9917 416.4 52.9917 cv
418.094 52.9917 421.487 53.1211 423.704 53.1865 cv
423.704 51.186 li
419.349 51.186 418.634 51.186 418.634 48.2402 cv
418.634 36.2026 li
418.634 29.397 423.265 25.7344 427.441 25.7344 cv
431.551 25.7344 432.271 29.2676 432.271 32.9961 cv
432.271 48.2402 li
432.271 51.186 431.549 51.186 427.16 51.186 cv
427.16 53.1865 li
429.442 53.1211 432.769 52.9917 434.528 52.9917 cv
436.222 52.9917 439.614 53.1211 441.831 53.1865 cv
441.831 51.186 li
438.489 51.186 436.881 51.186 436.815 49.2236 cv
436.815 36.7212 li
436.815 31.0928 436.815 29.0615 434.783 26.7036 cv
433.869 25.5918 431.713 24.2783 427.924 24.2783 cv
422.437 24.2783 419.561 28.2446 418.45 30.7554 cv
417.535 25.0083 412.702 24.2783 409.762 24.2783 cv
404.993 24.2783 401.922 27.1191 400.093 31.2119 cv
400.093 24.2822 li
390.907 24.9976 li
390.907 27.0088 li
395.397 27.0088 395.91 27.4707 395.91 30.6807 cv
f
453.544 4.28271 mo
444.615 4.28271 li
444.615 6.8291 li
450.999 6.8291 li
450.999 67.0049 li
444.615 67.0049 li
444.615 69.5513 li
453.544 69.5513 li
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.3%%For: (Kazutoshi Ohta) ()%%Title: (wave2.eps)%%CreationDate: 12/21/09 7:05 PM%AI9_DataStream%Gb"-6#BM]EQ5JaKJH#V2":5WRnc3&a"p=WTJN4nd":5,P_L:mUX1%`Yl`t)+[T'P3P(P=-P-qo*mCHPCQ.@R5pW%[Y'`Ng4l(/d:%$t]]rnEO^fY4#[.38N'BoZ>p%g@*@08"Ft,e')o`Sb+],O6))*2_K+l^OO"@hAA4PaE;9ncUMPlg@*T2K0cs#me-lWDt_4Da*V'*%6:o.CgM"(.^[c!jQ.h#6T0<gY$a"TId-Z<`L>G=_5o@d.B1B"HrS-PBg?9ot6C^P"s%HV/*'dHL.Xn;RK2/O3W]*\HbsqZi'8d#s%+?u(Y(QIAb"q1TB@>sBgN.-"n%ZE>cs8A:6q>KJ@s8MWirV`(tJ_ttQ2rB,afAD)R_sbA<X%+f^Ucjt^T=oDZfH@MeA0EFK"\s_H%h05\Bb_jp0';S%e-:Aoh`46#Q0Lf+'LK<G:8ah,';K)1V:=B+"7I0\UQ=K8*pjCS/oIi;.+e;='+@/kFgoWNh$A^fLBNK/iFDgI?%P?')5qT["k(:2a:%9qX`dMlh`,!^FQnmeFZmbjnmk`i\\A;CgU+a`6h#o[;"QM7ZncZqO-ZnF1@=i:C'+/9;N)o0MEG%Fd0;coBM%I]M/e,WQIjiSm_&'-t/(`I=jO?8O(i"\J?D\o2+3dCAWEK_dnR1sCG/Cikn5!'OnSa"9&?o_8IlOmgf+h+q8X+;]O)!M]\DBQorQ%9`%RWi:0[*:5JgsrmleWXU_f(q*n!9c_p.B'G^N$;=C1Lg@YTsokq1r/b^bQW9-7B^,KfETJuAU0mjX!*]R2N^[+,_\?R^'O$!9<%Op]T/Wu#mEntLjEk^,,adGW8RmWR@33%]`JV99+('7UPI)C_5^q"G+[IaCGWn0:RL*)?e&r,bXP1k>E%KEca+)8:[SC38_Ch$D%Q%$YnSopW^tX`e@Qt+m[]aN=N2F3U+n!=s9*gHhd-,Rl>25G0D^h>&0tF2"^e?ScD;ekJ9s]nc']<]0U'[m<5P`YOp[T27miM.a;te%Ygb:\plUtg1@qn8ZV^SiZeB9*#+pW1?0Q)&5?D&f#%h.#:ZnB4qnS8g&/lo\Ptm'[l'-@+$>Je5eH(<BHSK7E)qm\Fj7^iQoNo11%H>:'FYA^ch;?kA*he2kS8HIrlY@(:hV_LYN;;^lHPo5DsP(%@?#VK<>*dC.P9&suK$X),bF=M\lJK'>-W@r^j5ZQ:hpg#bR%97c[%K1KqO6mBpbd**"GBF,Tk_]RW@^rMHrh-Y<G%r]mKpA'42rKk:nrT?EErl^paM>e@a`kGG:)r@eHG0pAl]V/A;]I+ai1O\fN9a(O[%*j?-bKYVVA1<OTfBCSWH@1s82,0@ThZq%NkiQ%#Kit/r;"6`fm_0bO^Iq637JDQfC8CM]Wm'HgMnSWWb0d&OP94e:T+4"LJ6;B%J%0M`Wugo".r,G",*OSRf3SnGWQF'A1*B!bF8K:-;a9!,qVC69j)5q:/I+=om<W,0Car\F]d%@M`)N@SL>4g/+%=Rl0YA*S!**W4Hf%TheYPs(M4tQb9Tp7]#J]oIBN[&BN2tb]mV8:dEmQB4^Qu6*(D3oX[CgXU7UB$BdDfli9'Ve9e;G"UPO3ent.1A.'ZuJN#_1G.m((%!>nDd(n+W]WHih5:A`m6lZ33C%h)PZ#AFZ`<;OLI\'hI,CZmS&nc3>+-43'_Ftr?YNtV4Y*u%33[Yg;"nCaHl.&@GJi$[@L=6N^&%kXD8[?Q$_eV/EE`7fFBhEogHi\hLohrue5CW@ol*WpL#aW\ea;>l"[(Y3"raF2.]jGG$nsp11p<*=Ws?M9^V*9e;ud?*2gbX'P0Q%PQb&97P2T?iK$-U+p.)$_=J2&ra8C.UAClS<8&S)0#@iOofB=!g/9=6_gh'Y;f.ZL($bo]J4+AP^C`:ra,n%/P)+5:3HhtS]-6M'%fC%3R)Kdu[;en""q%oPalSs5mle4[VieHs#Y2o&=d;,MnYl"7N@eIK2;CqWrlcER8pS@`AUVl/cJlXB?+Wri$P2gJO046@2&Imhd%"YLh.rou^WD>ZJ-K0d+Lqs,kmj!(Dt"Er7ACUBOKDAZ$Iq7Dp-/2+<VKJ[OL^M;;SDf00`<;[b48p-KeVGljl6(aG]Y=#l[j^r+g%chqZ.a\5pF+5P0+a5?PH,&C5E=`N/+IdKa8r^W[OM57cINr$-ffgGe1COFK%^[!%j2MRJX(dO">,I-/d<pNAb_[SWj.MEdUN##o3%)=K*3H#E8fI1iW<r6VAO]7"V*d]R\,Ak?NZUt0GV]X9BGKtm?T)bo8!_*k6Bn3hIWCpuG7n$)=tF-t(Hk$Zj1I].p<2iq@\0kg3/%BR%-R2#9?DU03G-or=DK[K^#"(?)CTr[=F8@<"c#7MpV9D@GC/&/L+"H,jP/*1QulJ.Du#n2=uO*30Fd`_T(A*`R)r?4o\5[#Kle%=W"nG':c5ZY[?W'H5.R3g5dq@<o#ja@W588D"\eW\)$dY5?m1O/oG$[dg^D6<S[YPf$su?)A_=3-&47;R5\Jk%4ft0]/BL`>;_ZH%=K`K7,pt%PV+RXGW\b[Odr%re]"n8OrV<)bq`k"V^\Qu0rT=.Uk8;=Um'LNCB.E@Q2,qqYPDj,;rMF's+G<q-?Z4Gn37hpqDsU\P%BIGbO=oS$pM21Ri=lU],5:'4H`!CYlESg>=f#EE8^S['FoF`)nUtC%')MR9<Fu"t/F1!(I'hG[a0TOgkD=Gs<<C-J/"<BSk2dhMq%#*)G#Gp^^q)]XXh.W/.0a.ZVT%L8;EUbthZS:[ELrB\%Y!g-JK)>]i;nIPZes726Mr?)"&DuT*QZCi-7KFibFddic!,`@N>r(_<e%k9B,>gmSAo_Jo6HX&HJtWrA\spK&C#ah)nSSCb&mL_H?!7ioQ(AJ^frEUJNU-/BZSBcSS\^2[-kk`uEA!j"\rd\DDfeJQpPS(^WJ%htfI<oKNOt\np=P!S/mh9jMCZAL`*E_n`Tl8D$PZ.&U4=:4p:3q.WU+T/W4M3BG\AJEj^`<:QoWJe2qe%*+$3<coB0\pp*;P>#%D%fh^cFo'"<!@XdTY<#P!4kD:+fCpnU-T/BDc)K4AjfAX:#0%_XlrU+=9MTL.`Br4qWRcc1\iX/noT<I1QDp,PRS9X&SobA0]!?MGj%o;cd/"5Vp]T$%[XHCcM1a4rZ/KB97?UVr=.WDN`Ye0l1b)kD7hI*e^hb1T#J_N'q!R)6Od1@8e&=2i.rG.rd_F.?!QFFKmpdAL8h%VHkmNWi=FSI^`JudM'^EE_ftKdP5#Xgn?(8g0[-;Nn;ot`(FT]1u78TSN>7b51@jZBrIN5SHEh@LTT0oC>A>XbQf7A]oDJ/.reG&%?7ipO5-(5HX6m"UaQP5]%AM@gm*PZ!V`lm'7\a:)WCEs^*98"?YY-H844*)qTXe8lTKh]_e/P1DSBF.mrpr@lUFne2*NsL*.p%7a%s8)W=J,9,1s8DgJs5a&1rsI*-r:EM:J,9'"J,8>Xop>^J2h1Z7^AmgiIfK5YrQRS+^OGd`U$0hpB'o>brX_a&i+H6b2h1?V^]3pR%?:2IlrSbNgf73E7roa=0d)mI.FO5T\[[J58n1VNUoZ,<23VE!i^An,GIK0,8ium:'07X$!0E:&/ci9pB";!Eb=9%_rrk#rB8#?L*%s7@,bJ,2[mJ,2A<1]?RaT]Ub!K>7<^Vn`%/J,\@(gOJ_M6[.fhrWFb3KDu$Q;s*]Cht[dIrV=5,DuNg!s6i2NXm\LQj6o52^$e2a%(GJG4Mcf;SHA3i!>7"eqMqG'68mRn:RU0&o)q1jZ)[s\7Q1Z'BM&eE;arH)?WdHP$U=/@NL?HVb/kf-"a0I>c0jSg*$nIlpV-dRt%855Ei0W&0[iG<M&=^NgE_5DubWi`UrP;qOM-bQ#<3;DTPFbm3d%U,l6*k6^X3'7?qOcu$B`5$<bJ`?nr4o+D6>pN;?I2sLK'@DIa%Wn4>H?I/<0<?=YlBN8dR`3-$[cfk&3+TP#JK3_]"@8mCG9<fa9[_lo;UX9[/W<nbu-m<5TrC+^k6;$ApYS//uH\>)D[1(%<nOBRi%7NANo*HQhO;q'njB8ieC)Lb`6:cAVU-Yh8erFh2C:.%.'kb+HNVFL2X9[U30ZeB'a':<!tR7$KA4#A>2$cli:.i8E^.7'EKBTJTA%`gEg+%_DY.UpE/h4C]MTC-$uU4'HR8<^uIbNs6P.aYA0:WS_]2@$##IFi7Uuj*FNbGCgPOU$%$7-ePqog?J;,d2"d!dC,qHVUZZd%>#1AokF2@SdYe2b37b4sFIo=`XC9plFc#EBXkK8DRO.FPM5=0kAfD@k-&eL5f1iBG,A"oAPlYH&ql2Uh\r-4"JTV[d:_k?c)7^s4%)t1P^"jX9:rp2p9Ynb)=r:r"nUAa27M$<[`_-@,Tmbdu^+$7pp[PoONLLhKeb[FAH"PZHnZ:j587rTU[A$Zl&A*ISgY^Sahm5Lf#%K3.@9TX3(JCCP$DG!g+^C:t]/7SYH+g.iD&X]+NoS59Q8L/WK+?M!b53l"\m%[;opWbC*]W<4c!cb?I3c7iF?)j\FJc2^PoTtQ*5%)h><mU!\$#b5a@Ll=.d`SOO9g`t(r:*h^e!P/Fd>FkUYkptE=KTET6DU4YBu%bHD,/8LsZdqK67(6?2\YC"ZrTcU.bi>qfH6\TE]%k28dl$3Q'_P7%!1*2,<9d[>=Vofcbme>^!A"f-=<do!G.XEWDi/\OEXA!q3V9uJKL"Y7:gK&=0<hbuqP9eG@EkhED*0jq>q/%t2Q%8?(bp56ro#3dCYPS\[U[Q_7rlrnKU<;L$h4C9k`hhh>#522;CL;--j1*VVs+j4t]eC4.#URBfY2DJ7O#[B66L<+H-dOV14j-A]sG%Eqt5t>Igi=\$4XN1"FPneN\&_auBJ>Q%tCi&7aPqP^nRp[V=5LR\A>_m<5"))^:?NN=EpS?p5J4WF-TL!C>3o]3h(6c))FM%HT58%dtSMTkgoE?!.B_U1iTdtlC]>"n_j]_nTa&ud?o7Io1+Q<"hKTIiLBLkK!\]eGGH@IBrR,3qBC9*&/TBsPTj3Xm%(68LUOC12RY(o%iBr(m,a(alMk=q0B#f*tn:^r`fiBC[=HbB3o?qA/F]mK_(A<ofLQ1=nIoMU>H1!Z[B*D_/@0X::>VjU*V7)tiS#PdoDibkWEA<M=%[8lejeOkV79QU68PhHlk(YRBbDClZaDDW`P.b/I25<2g7-fqu"0_bR6&agk%oOkWi80;(Fha4s'lDTdXeuggtm>YnB5PN;?<\57p%P7t.je_0mg\t"adflsI"Q[DJDIhWr&a[,PTPRI@YKg;pBlL>Nu'jdJ-7_.-kCH9j=[;V53RC?Vu9tk*Hk]g7Ve_&;OC3smZR^N;c%*b:n3:L3b(rfoRD+8@URq"n7k,-oprA%8Mf7im0>4V4XTCZ8J>q^+FDD5[@1H78A:r";V52_GKk`b9Gfl>ZE5X&c9Ki3u`8s&s`D%4gRh`,55;W0?Meo@6N*5mqkJhTncLVFKth!it&#q%c;Ml?eW);9VjhYNR,tsnQ&?_I+W/TEbt6fVu*k(2Y<,B[2*Pg_nd(\:#9R)%f/uu-[^*.FX=nq5'8V;\RC7M>8S<!Hnu&bugT/s%E'bP[\fBKuX1ND\q\7buWo#27lKTU.G.6Le$11?SX10GLd^=2J5s4OH5(Z[#%+jI'6M.%K-O)qSKp3OOk]'EiZ&f*Tl<_*sdT;et5#ip>G\$2u^gV1rTdH]D(re38Mh/W`c\i3;rG;gW+EdQ%OV4HqCmB-6^[jSJE%g45m1PDlI4!gPNrg&N27"(23mk?+],&=D\)jIQ[XF,e#-+PfWX[<+G'*m219NkY(Lb/RUSWa;8C:Am,<l'#rG2"u=DqFZ0!-CZ'+%7^t$7;e4`Vot1,X)nO/t2sHMmmeuuBgNo2q>Ha[uAg.&_aT;Nf?Y&uFhAu>,^\IXf8tV>+Ns`F*rJ9H&75Uih=T)Y]H5>5HWdN2#%m7Qn@C9'I%8XBsCUWKL'0WW*D\e$fKTA%cuE6_$ukjdj)lM`.)ZFuT7$4eSWOMLS5Fs.+?Yo+$_\qqg+=rB&q?W_Fo.-9g/%7UIn%0GcmD%SOe5o-$aTAinMsH78u'O.p?#]6qX&f:KG85`Fog7d#Ut+gBf2B&BEUO*ml?/W;+n(uVi\'':BF7g_rk;gkgde5h4Tk$*9W%Dq-Jde++N'D-hkDrUuMMm?M-E'!<R_Q6c"J36HRFl1/gW";5<*Oiru,5HI=IC?k(!Drk&.RQSW07H&KSEe^KGi+[P=O;%)mcu/A"%ipi)m"gb5B(@jI_c:F(].jAr,m/C"PFIJ-$oJSMo_tn#Ch7;gJbAT=Td)8dPCS7")GJA-Oon\!f5(A"8JB&__1K(1D7\sZMpU[U_%_.^H!<!qckDY@'B%NQNPQMEkI\T<B)rZtV\hQG=orn>.iD`rMT^2M'LgQ?=sdDh%DH5W&n&"2h/8"eH`C_tcT::B&NDcZKi!F;E5%egs`?jT@SOf4.Nb.KrES%-8fEYAl9o*e+K5*=Q7?@b4Z"$p/4]V_;?dZV"pUrK>mkcUOVNb8!R!dX$Y])a1)P7V-"58h,H5"2JQL%?V@QNe^F'PmRqSAlaA7c8!R*:n=uRbNe3*djb&!-_FH`u+3b4A<)Uq;i+?'d)9c>^f\u5C2Y9m.Y?`h.3F@B!D^S6C@B76bANqtQ%Sq+7Bg[K;2XZRH1hh.!$=une!L+8O:n8Y'I/Ma/TeeM,@#G7F4IB*buO/LW']`l(h]O&J(TDS+c]`?rY7JXTDj-Sb$caNn$he.tX%10=DMG34U_5(,b_i8-=1k*Rpu>d$;JrP2W38jml0iS!rLIH%IZmuUR4Un)l.CqK6=%n\57%-GP>p2VF,D/=T>KhRqq&E[F?j'bf@%X1dkj;fiQbd9Zl;SE[Xh8t$4[B39,'YY.7WDH0!:]RL>3jYOgl,)ZNJ>?E?R_N[qgn?\7X_7)qMkC*)^@MV#WQd>I'(Di;\#F;<A%@;[ei>lKU@*,T'B9X!e`5Iboqm/R2`Z`ph(aLNik6a'`IFbUFt(PWZfc:MNQK>ZXW@WCjS]N0inm,ntR@o-VZrn<pOqCnkV</,=X%JFDGq%WRiO"YCWmk@V;QFjqk92B$/2P[6@5_^3_OO>TbZaG#u@gLS.0)1?!5eRVpMQB=%dr4.m<p$-*EgNn0@j_GrFlVnS^`3D9a%[5S>uH6,9Vma/A,5tD3KCIWo&<-=cR"<YW=_I0K$X/W.Z5U-(`3kriY*IVMk'?WGtb<aE8\WbO^;niZOjX4j1,t)RQj>Wt7]H)8H%FNpYeQ/FeBnQ3DO/R4<IUbEV4g"gJAg<;E4o0CDYm8Q7h-,ta<[+IbD6oS&X&-gT)I=jr"d!`<9i'r7;,+pGra6*tI**EEG*V""Z%j3H5_oD"YcgtA->*l"7c8#Aa]%YO6>oJ*fDipCE/?Wi"Ss+d=UD@SJ@$lEI\oZObLhjS+GFJWH9rUqcukXDi&La/YJU\bS4UPuP\%*<`F2Zdeqck03ib,j#48!*6PDPMVTMAA9W87<8_&EeR[5\i!=2TC2'h=7&mGI<'V?%lBnoRKm;7PYlhr9%'TV!(F-3gJ[Y"A3Wcu%ZuM6ZIeXkt>\DgT'\;2HGZa=7<"k,8QLN/OCrp5KJ[AAZfCfF52LWtJL#D4X(L&uY45j)(^4]t[QT#k6X:J`se&:'jXCg?2Hq>1E%oCI5"+/:OKkY^L&3!=ukl)UI38.lB4Vp#CTiu8eJ`6KXoT5=e!l-S?u8=@><rZS;L,(iR<HJDaWj?'+QcCalj;p#HN`U;c,X`Tpj%4&)8d_;!:Sb!8J+rq+mQM_"F"e:R"1?GUW*SWQ-+ePi?pMmeOrP=D2:%+<Rumq)7[na$$P8[=HCpYRTWjRMmal!TG&gNl0O36Sr]%Z3RtL:O8H-N%iC.D"r%Dq*nlum[qpaXeQ.NTQ7+bHpq7R.*mZIrKY;!_IbJQJ@N/pq_2:DJ9Et,'V9rk2k2=hg9*V^;V,QTp#K?@%U'8[mnP8:Q-_65,+Be[A8FE^sq-m&Q^AKVFBoRHKNOe%TTO^eiY:DZ\M1<W(`^(PVmaVaL\_#jHA%MQ+D%0ZHmPT"q-<C*rCMM7N%Q_\EjbQjS@j^+N1ArkYf?1LQFme^#jhOY5+8%3<*0&t7)[sG4VR0]k3(K^]&B91/GpK.:rT969p2bG)>Wh?M=`+7n>]g9bugHU[/%g<jthSaOnm7;$F],emX)+7mfSrd,K0e!KpR49[R$oqp+W86op=nW5^qS^Yea@s9N"%7;E74n3q_IRRb5RQsck]aLV'VD[IP52XFG%SQ)5t2VCEJo,>j)6Hhf##UI\\r*@@B/YI43YGSc&0%Y.LT<8!LG]a[R\X[N.2Sg1;'oN"MUR_-fl[?IG65@X</9c&?g-fH2S5]OR%]R=3Gpiq(4m@s*_\pg,q"ajn8n[1('0Sb3e?u4[JQ:04%!>LYufm6r9GdHU5!$uqTaG2[M=1rpt[H]nfSl/X*_kGX;7XK<=RQbFf%.\(.iE\oO(Jq=FRF)YLA<gqAZ+!e^Gr;QP]Ci,[_K0^;K(NR"^RoWH4ofR]2VAS$5m+ss/<Dol&D9CaN>:69t>E,Q=#Dken^GWK(%i/Z^"+;[I)I3B@IMk@o3%1aW(G:I#JW+^;R]&`XGg)bUh9elMsHaRL\%41l*pYCJTr,iKBSGLZ:LC2&:8;mV%YBqOFCp=1Ai6NW>%g*qF:Ds,h#EGPb.Mtj[EbIq5pFL/*72%^*u3(\=;&%]atX@bp7kgCj7=tamn)Iq5Dao#"N/(;sOhT@+Q"0$_p0g_:u9$<:gDn4K<%9.YSE(p9@tR<\1=P_n7H\kRD+:,YhbU7"[8kJMQ60VlAa*L6!Z8A#[g,X0ZPE`u5.@h]C]a627Dg#.[D$>$UAX+bBdZ!#/FRcjQ`%47#6o&c5+'=%R>EVln/IQ,7]^W#H2eiRO2mo""k8UuK)eZS&O>DBdC12p#5('qN(LSLG#`)-cY+[u9Y6cd8h"geW@SD;AsM`.O`,%%ku4Q#.3p7T"95"O*#7-8r'0HoXl5:-,7-Ck_sTX-qc(E:0%[,.kt.:fWR,5b'\g71SB5m*IDQa]r7lI#^UUZT8[gf:P1qc>V5$G%K5:HZTZ,Zhbid*NBVH;0a_*,s^cq0A+'WO]jIG-5;lq%_]pAQRlnP]93Y"7h4MDO."lE1W^\Te2]ls9M$eeC,enbOF2L\TG^@(O<%MiiS;305kV789l#g<Fu&iP^ed>]JBQ!#$S#d25pOl>E7P]2]+Ve?@91HpAQhPA=u!TrTjS&IGGTqC!!Obs3s8p:%3@.Or01:Y6'd%DYDpWC4!G!Wolh$%"`EjR'$I%&AF?O084dWN#\C^TO9-o+dL,6T*eiV;CAR\8tC?(lp/mZB[?f`)eo--\,\$uH^aB"?N\lm!9T@%%G"i+TH=E>bit)`i[(PgJ`Mmr<_%kpE_+SAG/6qV=)/cWs#"8.$jD25Q0pgV_IArLL>r:aj8k?qU'Nc/^l\/FWTq0*56QL>8k<*A1%Eb^TD'$<\*KY^f:F+i!$4;iG#mV=W/LEMWOK1r/umL^]4du).eC:fq<1><ao.p?XaU'9e)V1DM"<=F%,l18e,Qj]O6eQ#9,A#+Dd%#5pl7=jP]#UdsobI/QAqI_K_Y2SSn29>j]aHMq)U#IjY;10R!k$fDjHn;2PBDRhWo@d?&s3nXc>!hUZ3olcCI%?K)5k<a:GZPlgt%oR3:aDARnN)r06$KphE%U.>.Vb'qM]?Dop<*S_r_>)XgBg'O8QDp^rJ(2L$![hXNrX\sC]a!?b/;EH2^2"TsVEA5>5_akqi(qIep%Q_/o47WSG@k'S4,m#,kq?_<2r\Q<P`V<'*GYP+DGPs>K?h-";2CqVI-of?j[a.cY?C,^2gh%OJUlK09^?Yn^'m-T]t+k98o1!!Xm%:;7E]H3kY>%ld$[pC$AE0:6+\;94IB/ho]@mgeu'4aU9_"HG6WE#'WX1f$%XM>]jC%Je][aV\7>H,q;D\V'b3&.HWFJaU7CD-s]D%H_HU_`]opW>kAOj`2$r:A6hS!)MmTL#IId7OV'eBFd%3<7VCmCYZ@*!.O^_@_bV:IUN8k<CnQ"SVsC%I<9,Wkk$kT?(GA#6X6&tr%XspN_9Ep;"QrKKLaY>9^'K[P3XOh6!Z7jdVaM-JKIhgD0WF#.?0JWeAab$)HC>$a"DR1(Y;&A0YocUI6RYE\2L6ZjC&m[f,X%;H)%kfV@9\br`T/*'06gj492"(ek@CXPcrkDkSF5u=<1O[pj)(8arcDYJuE$<gO?(1ONEojk4nMk7Ru)p6@),Xe`mmLk6'$]n0R6Pj,V%36l>VQh'+UN";NA5'7>O,&98&H>!?!G/#pGF4Hc"H05'RGJAD"gj9&?.jd*Z`!5heii(-DM#'YN<U-4Dn"FC(5*#H=]5QJ-?jO?U%Z7T@RemjAB$@Xn[6im_Y%XkO>IKm0"O-Ql^?IM;b'`97;BkgkQ$oD!e^MA#.(jQOP.&7Wae]B1%%qRQYi[EN-8fujmj5\Z;MBH7F%XZXQupA&`\%j,[(T#4W$dp08'b5![2c,d#Dd'Rt&^fMt$i.bXp0P%;:SlAC-^BUt8l!!I"pXm&_p%W[1eTqQ]e)f@m1O3*53ZcW)%&8aW6]B6W-!Cka+Lqd2K"j_2],@/#iMrkL:X.m>kp2DTjX+orMo7"sO.F?D+F^01<m*+:o+V+K"Vm`0@,B-E=B+Y+9F`:&"'sLRS%L%4)7.srJQQ.gPsbfH?-17NW,52s7C([Y0qD<rR25-4qe[C0M\`]udt]iaQZ%rk!cl\R,`3c$[MEocqSbPNKOfNY7[=\CTTq_6V"%5c3AYYh>?2*]uUtT=(jBZPMee(m!n(DR*[9I=bIGHW_q0kgIfJ^V?fi,3&*?,i02t'fb^Fa@i>MTi[9+]oL*7C]&L:^c5Oss13U'%I*KHR\([YhS+F2_m2FhLA'WsL^CT2rhJkX`7GgUq=[?ejLZICX+dPWl6G)68*88$)`gBllGSA$fON2:0Y^Mhu[=U4%)_'G!pWCA^%QmK_4rRLM1$@3Du=t(9A3LATM6/OTdMlp:eZhVCUmuf=:gUQeL)si\?</Y@:Oi,*HaJ=m7-sqjm6G%qKS)$d,oO,dmB>T1+S#oTt%>[Y#[^%*!5[u\3fcd292?^N?Kp]C>F0`J_=rY!TJ:=$-9!d!5c"h/i/N5JF6S!RDm^N,oC^:bNS5sao`)B4K>"Ci7]M+Z*Rll]Wu%Pds'=G)`K)ZQ5RUaVZ&sLI!`!bd?S<(C&[Q=D]s&jKH$n?f>Y&%F<nnE%?K7]ensI[g%'Ta0!f(-72t#aCt7;(>/rOk,f?+m.@QN%fsg>_`'3o:o8U@>G$=8t`Br2-SUS`b="epfP#\E4eL)e%maU8UG.YM9-?lVo3u*?+Trm%jZ"9g`KdX^F;fl>$7k'q<8ul`uIW3?)%e(Z7InG;Oh]$mBlH_!<I/sB$nIT*^LEM"c9,+-!s/\dBBJZu2#,C6Qj&#7qnFrE2[lLDcuJQr,fbm'kGTf]NZ,t:>ml,JIW;c3I?%mb)aZgja_;PY%c`]?3N6WJVr;el^*jTCuU:m5j'1ir`Kr<h4R7rVj7oENo;j34G@B+F]UcmXD9dQE3+VD7,S>2P!I@X'_V`R<7`a%:WuhK]k7[BgS^@.XqX&5Ic4N!bc4U=ctse,FmAL\DV'qF)F\EE$b$SBGd_p24k"?$N;k,GFTJ&U4YtQ''VB[!.8#u^8AI&`na#5p%S9C?Npa?t?^"[*j#72G5h40ksrl:?VAG-.)Vi%il8tW9rAZh5f`fK^e<P)"uR$76cKls:`)g=g".,Lt;2-8r"R$VYO/JWsa_5>\.%JLM[G"APFR01r^KiC0_j03`UG`=,tZSX(5P@W-F\*\^Yk)q^)1>YBp5X+9ZnSn4hOOfNWZ:9W,tX]8;tfSe0pMn'5a4BZn)m@a";%X)/%l4+435*8>Z5O_eqU&hR]Qf7uNOkp\2dGBsm*l"pJt>'BbZhZQWDP$XAj=)OWgA(I2gqgA?kiUd46%8AP$$'u"$`4'O/C%BFu%P=BBO$Fl7BqiTMfc1UC*rp5hD\W,F\^/<@LL6CA$*]jg,Eb[Vs5A;.16`6maknLMWGcpj\4\"[X\/-oW69hgM9UUW^*$u2Uio,j<%k:[4qC"1XHJ+VapH2JV@J:%a\(.Mn5\.ad*dn]YiUPPnuQ1A@OM?eV!Z;f7rapgEr/j$.CV[VgS*.ZZ'HGr+]hrM4)U!lB$)8Z9#%5,>3fdn`oAO%UJ*g6R?@a4CeF[cLnIFk[D&VsAcc;C9.a%r9V!G[\#bQr7]!?@DZb6GSr5bKgZpop;,He?Jei^38!)l!n-RC0u9B%qKTJ$"l@#(8gNbq^3Ih6lq>Obh%SPkr\2P:N\P]=.3:/(0D4Q71SZ[+c0WNcoQonHbuAGnfX:>_E-Q^//SAF:-f0Vp9*&O`++Y+&%Vk4%-NC.FOWF9!<b'eJXN3UKFi@7a1IsNL=H>-`T8I0nM`n54AI+SA^PHX&5D/"%(f6qhXQu>-P("Mm<^6tnNNd!_;dct4lj-e]#%D/![Q/*4bfZRF]l0,U>L&V6a&HpX3fM!(5][r-00N]SSk$h_6j3SWF?k<@O7-?aX)>AY?djRtnVj`n_Q5([^ldo:.nOY,?N'^D>#%<c[7UBOGu#_TQ5E[<AQ9+G#e?>3"N6c4/dE^VXjSS443:kN_b?2q-S_IY0VCeCdE*mr-7`3d)M3CbW,bRh9X`!#_upA%f)7(A'nU%[I'2-0Up*@SV"0mT*HI?3^mgh\:#3<C[)TBiuW-rBlWh6d^IVaK5.bRf)*FpI]hG>TY=@`@SPHgr)Da!S^uEE=*<`_OOqN@b)\V1%f!tJj%.)fZe[ZS['nVM?SZWYV;;4j&kFgj-hDA=+*F<PC]mY(f[(%GcFfJX*kW;nkPo:EGO]:[.4a00[\"bI+hD`[o/J@*DY$l$H%q\E%fXj*E(Mg@Wu,<j;\W6)\g-IXU4&OUCd/RZl5Jgr?"=a,L+B/d*1p.hQ92c760EZ9AL!@!7Wa0g*.q6993)qiGMnV&c[&g7>?%q3[cSX^WuKkmkGT0u17<])R'(ZRKVlh-ZbjcZO>-7[n,tZ7a?YNqVCU:=ji-V2H%%@P%5?6db?EJ*ck1os/%FX+@?lAJf%EMcL]g%(eu#j-MH$3q=.rp_p5,c*37PB);OE-b1akLL-RoYGB`Y-jWf0.oh6H,@5&ae`K4-Rn0K$nO*c;f7N%QT]b7.0"nG14OA7th2n?1h%DDaY-D<n-2RNKM9@>=PcZ%@`'gK8I#I`S/5C@$Ou7"uSZ7!8@jLb.0D#BOUl2m-aYQ@37:A+4JTeJ,+aFE0;QH^DuA%Z2keCJ7eN%^C=ak7;'KM'AfAY.O?a*H0-t']sktma$0`1-IJ$,f\JBAT"J4uBX8eaKu`"agkP\1"DU:^MOqh%FIa=]<a;%_:]/":4O9c3OR:(s%%<hglgcac0a&2!?,ds8SP",$oVA<=&Bkg7^e4:GPcsH;0fGW6/&R6\GA;B3:`aQMp?!,O&nRu32I1'N15NF#+-\R^H\QUKMh"LA^%Y-F[OcI_UHgif*Q=*E\+Z2,5%N0BRQ":3D"r:hY::7[,mX;f@<,n?IbZYdkF2tL<dV&1uY?,6^%3HL`\a]36>]U!e#-;6T;.7j.N%/BFQko"8F8:=W5t/?#0nW%Nlh5oTtO"motJ`AE=9Z15=\]jKlR2Bt<GCaU*Il\9R0XY@ZXie$CgP,P3j=H_Z#/'ORJ+^1sRA2c=5%"`)*<A2@!-i^\B0V3Xq)caphEpnuM5ee<nU:Y8GMZA`gM&m:]M`G7]6`eqI49PNOT@a`XI3>cickEP_YmZ^5TBP#WVL$TMC?b_1!%^U%?'_tmY9Yt`e\n]%FC4J%rZMp47Rj%c>s(pc>`Z-1'&[nMbNMd]:Vb6jqs-QUh$5#^@;jCbcYa(*ZZr&EES:#/rmkR:X13B#[a%9p9'J"5B7pS,5Yq^BdmNpXWquPf[gG`Ca`[L9ui`';$:,lY`7(SS`)\%b%@=?b-Xj=;loJQfm!XIW;Vd[P".c+I]-;4VZJT6Y8EA%$/9JQS4qm@NV><fYd-#8>,\BJ'"X[R1CT[<gkIU1H\#ED=St@`)su[Y3LloJbFf'E@GVN,FKY!JjDj[s@PoFrn[T\T):IjQJ7<>H%jhOoaU6]'mJB))+I5ZT4IX_4O<Vb9jI\'](r\d1iS)YBT-#]G2R)&gV&mW`[R+I>$)o]7-([JHuaas/@0#EJe\&]3E7$_9U9gR?H%/06XQ\=UOi_nh_V'j\qb-$l?N?MF*Udc[<d_/1DB:9aqN/K%Z3*0"N#ehTR4BXZj$!s(#@ZCcojI]')]-=(lJ;\K3b_AaQ2;h3p"%d&`OG%rVFgN:<(#hPH`X6A[APer<_;QueLP/e`+30,""&q?7H%RLIur&-K1of-#7<i\_L94;J*T8;#<SN_Ptj]d':$X[BhCn%tIC%Xhik*BQ\LRl!kN?4:]ak-VJ[cGKI1N0gup2V-+NV9J*e7^\!PF3cH-$hn/Ne*ksM-:T*fZ$,&8X+j]cd-d[mNo]?hf-nUWq5,5i]%'/>Y%>!.7,<G,gb*_e&oBmM2'ZS!S(*H"mqcYo=NQlY'EF595`!JPK+;2WH31'sg`;0Vl^VQlp)"St86iiUkcc>[3[HulQG9aY,_%4-aI6j)`V.d?/N2)WRDK[^.@e.]n4[3Gq:S,L>#f%!n!,@^f9%)DgdmcD3k9I1#)C/T1.a9J.X.U<]:h2X3a*OVp)o3*k?J;k$g&%d!:\u(6o[V=/]*C:WiQHs4eaEY.Bf0%:HM52!mE?ebfXoY'9DP,oSdA@J!mhQY=`JakeoFN&QgQ82M_Sodsu/h-;R"U;<iI-/+m%%O6t.6d;38.Un&f&1i-_0H`s4cUI6nS]po]*!WN?'=@]fY$g-M9)n$5(D%ql4St8qgJtYbgroRsX%9SgC\a<N[dPG$<\=@0AW/na?%,\F;9qs@:FOS)9\Zd@>=VpU3c+m5(2k&>^,ZuIsCW6%fO9Q+R4BlDa`U+=c;(-Vdc>+'?./U-'L[q"38T,M%Eh+]#O/JbBFSF+-1%:23.Hc"Gp0&1P4(>MS8^JfqUDNifE5Em0M$ZoCk?p,%I`#)eI@(M9:TP:iA(MnuF<'%4)9@bAt2p:\!Oe:e9G0l4m<hqO]UF4&94%D<S&/FV<h_&T)3T$R9.eW9`PWiT!Jom%=/%?"h`QqSQ5aCk3N6eEu"L992]fQ1p:NM_&sRFg`]r=LpP]N/bN]?q<5B/i<7+2C5B]%,\rAVF(=WQH`rGNd<"1[T0)G3_H_U/U(3m_WQ48I6aC+J0dTV.0=-jC*DEK0lG-"D3Q@8"'iR$5g8ZI"PAAJCIWaQ["It%RBXHrG%Br>gA.>tm/n[crOH\7<_8#><88?)bnnRS,[!@&n'UTs@ZgM)Z#Ql((>^chgO(9ENCV@ACkaX'C>R*2.b.I/I"JI>><XZ[%Z[[d8A%s!m4"$<J%CfJ$7HpRcW#9c8$os)N/DS29@kroN4f3G6^$1[n&YTl\MPK=NNZLG%YT5tCUki]2,+)0@-.E!\OHPF^tpkUa"CkK9K>%cCcE8JkO1YZg:Z7TMqtN7<@[_1[)n?fHoV*R?(UOh_p_O`H$"_S29ANp=Rk73n&Xjq[Bg%T#o]XH3W4i'Bh>PF?:b'81tB$lg33+%)?d^$^=9s)UpJ,UO^>qeArH<DbhCq8dS9)u5mJ3l-d?8C;qION@r]r`\Ebabm%Q:!Lgo0"F(fC43NO\$dk"T;R<,OoB8g(un;D(X%:HdL2+-L^-j-7WM_iTh_L@d6Bd[Ws5PCGRU)c$siPsFI).*.eMm?11],JJm+k*/eZ0Y(C(_65:dZSgQuVf&@X]?RtXYG:1V+q`l*%KWMV!XLt?Ca_nF,"dtU@J/EW'A0s5<Rkj/0bh/<Q#hJ/!N_Q?(p;u\W+'m!iJm5,h/Ysn6Dl$j,A3*YHW@j8#b=)c5]>,:,bIEmU%MY-2O,^+_pA)L1NN8B'&q^,f^mN!gFeW#!=dkk+Ek''?jRq?igP/fNCN3V\2^;SP!(F7geMpsTD=[tEMKm"('O2S'#3B1>+GO,".%2WY@[gJ\5DEs-P>kM:8_Wa;3]'4]LUL+uV:c>Q"9Bj?:OCWFY`=W0)1Q,PFh$Eu.;0o)lmR3r:RD#oT`!l)Y/06?PTk2pA3-'QNC%/N_`.9lmXkeJ8$ldtDkXS<^IcCLC_"k2Y\890T4lGNS%'c.RsD\97N=h)ft,mtfV?((ebcW+f?DY=A'WN@R.<<Gp(s6:r<e%NP&X%N@'WB>@<?CFP`XMNX7)YNpLV+H!Fn%):b4Ijan/OH0'm+G1>SZ3S9J*h+kA1pB0T[=O2X@Bg]uI1PL$HY*'s?eh0867dAW<7-2\I%I"$G/EThV/d73q;I35OBSn8B!fUP;1)LEHY2O8olgsEQh_ccc"DFn6ELl=*baa@W^c8JTh`aMCF1V;1H%X<"+On%)%`>Jk;;aeVZ%,kJW0ppJ%1bSZI&>Y[],j6,$W.uT-64qF2/17fB3F4d8\3?p9mr]X#8h,no:VML3$FGK`M1fn>*S_p>e\;Z4P-D?h`;Wl6LEuU6]%aE^:oLb95p4ZV\%H&(\OkrG'Lnm:m/BJPl.Q,koOgpe;5)/Qi`k;g/r8N^2O,f;SKf/m.qW2!'=0^VQ;S#OY[JDEQ,,gUk@N\4!u%+4D*Q:>(6Jo'5!PR^G;PMKs>Ccg+;8>X/[jM!:>E;hLa!*SD/R]0*)0Qo&,f/mKecA'V]'p;hj]E7>[[B>cA`+)]s0O3Nt$B7C87%RJCe0T29Zq&*Mr*l4W[HLjkc5Lg,$dSF%7]Q^SFtE>hFqJL0Hr=hf0&g%fTu4U[UfCS#o5;\l;!8Dc2oiG<lrRr+^tl&E[RkDLqZ%9]Y=19Vf"3l/k\#V2I-l/pRDr]5W'ZAoS;E6497rU_VXJ_<uMlBfkot?lA;cda"RIp7rFehe[cHIenn69Wk^O#I*_,]Xnj'\%P?k%"PAr,*0ghi\,TR7Tm!GEI]r,#$@>nk)d_43<lSI+fs9S%X/!d8XDu2Q_JG#h4D[3Z1iGHnh_!mH^!_(iOU-fs*"0(r[PL&Vj3G$0%NS/6^3dD$tDen.4GU5&@Ga5.nd^BXn.3nNECC(BbY*_!](<B$X='R&6]$!WU=+j"I(H!GFZI3]@Fd9"l]&dIu?8!`Pom/&)WRjec%8A03H)JIs;5.g`pak&cs%P5hEaG?G!fs#]11hL6'3\)n.S&")#!!bDe=t1N>@W"s5/<gKSs"<MHVS\JEkoVOfEhQIBg&9'=;W/t[%61io&KsQag/2\0f0g=aF5FZnSn>%J:G^m"dimYPYKX\8-We2V2:lR;ciT'/772Hb9@.p&J7HBBZ0\PZSn>'o?EZuGC\,3)A5c28d%(UFV].aOXZl6<dl1aG!oiNYlg<=`Sl#]G^/,\LZta9@uaVD$@XHhN/sT(9TdRX`2TaamggEcQ1pq(:GN?H/$??7LEf$g5gApjj6%%-J#O->rN3qq.<.tlOR+4ma=7gM]pbJ=Q,DLlb'RkQ$'!8[qJ0*0;]/ico0K<du+Q#2ATW"I;bJ=G3<sQgq.W^h<VNXgJ79Bm@%=Y%Fk^.PEZ\ZN68qtEZ5[+-X`\Bm6k->gen/[20(.:6_[[6jA"R2M'GAVKRnfg1[I[2^aYq')ehP'[+P:mA%)6'#G)A6#^=hDa(No#M%Zsh^'IrMsaZg(N#*SZp,N0FdPg.80uPAeT1"LE=F:H.s<7\:_"R9lAOdd#F_roRa+MrL3mGDb\(PbX#@aUfK-ff1\]9#JNerg"fG%7rHQeXMl7.I;[bSs4sRGS8K%<^H:9-V-hM\>:.[$fal5="OE7mVtXMaF-E,W]k3'Ql0f@X27d=HPM@-T\=EF@P0W6!n6WIr>F3Om%>bBKYD`3BKmA"WA>U!fB5Pofb,"nB^e@PoiVk@p%3EbX8@8K_na3DOU>>q\7YWV>gb1sDGV'A'Y9?j><,S&iuS'K.e0Lk#eO\KJR%95"9RR!H%&XC?c>r3ARGh0@2bLAt_NO)DG34oT#*doi>tEHqN9SCr"*^EI-bCc^<,MG)3kZeD<3mCb+qS'ELMc=1Es_/)0536T6e%i>0_9Z\l.@&X"GPdodPI\k):QZK\H2kq(,?/so@GV2V@[>\5mbh0GCLB%'nbTC0^h-"YP.Xe4upW4B8!XI>T,Vspe@FH3fkd^&+L%`RoRkF>at?E]2_T(n2\<cH=$[k?'=-9kT`)V<(`2/Xt%c!UWkLd^&,=G"XC4^b:pHB9c,&iOpk29kT_T2L4KGU=jWh\TCmKA[-&4%.qG#Wj,7R!=ln(7m(>!=9kWQmTbash8o[\e_@@^_32f<G()sl9#;a**ao3'ZNmHo8c(.C<cg6tK`A6n_Z`u-KHsb\dlbXs>2J*8d%"EjWO`m]%I_BfN$\[_*NE_r&hRP"qPh_$idC92\Oj3o#.W+d#t><J=AH&@8p_Ga$NE%<\d>0Q1Bm0q5\&LLLP4(`=C">fk=eed/e%R'S\rc/$<bY$@FVZX%Y8/7Fd$mM;=]&=AX&jXQC1q>lGPkEAI]h4iNV@2A%UMs_@pk0@g3ENs<I$oX(#7<`WjQ#*Y7e*"HU4U:<j%'fn*?%H_r^'j.>3hWXDlc[t&dP[,QL\i?F+6qm"PF*V/.5o91XR@Zt4E;%X!IJ/]bH2bch_b[G5Etko$=0cN.ddJLbG"PfhOlN^a%=UpR&P2Ts8c[q=XhQTG?5T.*eO\\r%[Nl(SG=1'NpL&=*,i:VcUt'1Xe'Fk]L4Z:gG8fc=e)b9lk6-deZ[I(HVTd)R3PBY1A'!<F%k-WZ_g!1QV1D;.JYat8]Au46_FiY8?EO#rkF*$!XrW[OE@Vp()5NJ]S`4#e7@uFZ(X?4g8Ft(Z-]#tkSolVnLC0gIlUk98a0n("H%+VQNnE3=,F1XoK3\#-c9AdYKGf^+oWII<RTn_kg)F7<U`A8t)qT6ThpgmO4]RhMS4Vc0.m['PFp"H[dB]<,7R"jcepm]+NR<Y\D/%0X`-U3HfX+/5B5R-=57EJ[7c&kJ-!$&65sEj).UM1u3,[fY,gQDn)9GNG"T!_jurn^Ml9[q*[$pPW*eMOm/aU`S&W/L-*Sk,T$8"%Ze]T`ikF%?DRac`<ccK63d:*\T;`-"@-0FpYO3'>YFWoXO5GYbUMju"`*2KNa!E"^Z7?McG5FDj\K^Fb'[<q/7g*O=)>Td7EWTa^%0/g3YLM[LnBFW)EEfn@pfB'QdDn"_>`0cr%TDOgg#d=Kl>,HZ(mVQ;^@k\!i,V^SIXFh:0:1LTP#]nt5X)FW"k.!cg$QR/AETM9!%<LDK/&lUP./^(>NQ+V-YJ[WTZNTnG[e%.FGQ)F`ob2n=sXpdZMF)r9<)hr)\k//).qIe?0Q!i%c?-J\rHL(:98,[emSMJ&GSD>AJ%4#UT-ICVmAF`lMMk%8;`DOK+2\TN8Tj*4YTiMO8AYBqPhd:(VAP&af989Sp=R`Keub]+XBm!-1O1pH1>1&We#agZQ&`KCouNuo&4%/puX@HJ,c1:.tBL<6=MhH5;q$c%iAKSt5;)*b/r,ad>('Yf__GGo#H^[MYd[W$*7#Yd)dHknTcJ*k"=VmJOliRQGiUS5(CMe*rsq%F8qUo7QRg=<*ESnn6=59:6G:91qY2kgqTRZ[-tA(m,)QKRZm5A^SK8p3-J_*9lnC2Mk?j<pBV[9dm@:+961^eOY@,o2cJ=t4hJnp%DOp@WRZ)*]9]:!k>Si$`\EN?*G#bs9[,Q2P*Kr=&Wk\;15A2+@g32b.=HtN+cl7.sl+st$A/D<sZ=\auJ:(9K`#I64eN6oN=OeX:%bYWBBAB3l-`W#)s6iT=cSF_E]WA6*j,oeU-<Li'e-g)9!cKX!Bl1ue$@b;2H78KhQ@^<aFX(S`&VB6\]:J"0h3RTh2J?U-Fe5Pd6%2nFh+^X"LpBGD$!np'D0%+[kAc=Zq&2q-4.h99oNiVEi6ZpZqGRj[CF8ddWiaYO;fD2%/CT.+N7.;j$aCebpIF;hp(can1A9$?5r%:\Jef)>V89SCYfYp"<H2\@N,nbecu11#$>]\J&&R@JduVf.kqUEo%^)0_U`<<]8BCAAr:uZgI>EkBmrF.46k*@hsK2,NbnlrT6,s%CRq(\Z>=Z,'XIcUIL.U!`HAoI<3HHEZTk;J-9c%aR[nh->et:&lr49i=h1ec.F3r:Eadp4Dm_>IgeFB.)t,,tp9L`Nj/_[o+ZkaC%?16/$!J5W;l<>(sp'@oTD6r!VKB4AA&K3Gp.i5^]c0j*ioAj#uFO_lZP%FVc&MnJ<m?H=(CYUlpdlF7M;ZT`!X\I.!GF])nRJ0lJ%o@]_0MaST[`1Yt&lu:.l%#mun7;!gVeu>oYo*sQ7?u0"!cOAi[mOo/^e*b\Q$"FEK))77+CpXZ](n3Mnd&hF]mn0'.$d``#TP'rL%5drb(MUaXu(8/YC=lo]&:T2R-"m@iL:`$O2,7DjLlKiNkXj=i;XO,`]lA[MV:DTT@T6>7m1<7O[(8.GkBA+)k57>hT%cE#$XGge4%<f:5*2tN#FF'ZpIR?@@#\<P;lWj(8Oq)g9_`o<?UWH.@7HRYSqPPA@qPg:Z`\)^3XVVR<GS4iZi\\E1a9DONl8N8+cXMed6e'Ui\%%CWjuDcuO`Ek^)MI4!Roh@6m.]mc/De)0FLk@r\-Hi<(eV_n:aIMPn^]@Ch^G=1W`olH-#3P?AHQ@&QMngbA\U;OU:B"HU?0pJB0%jG!$pEt/JD,$/jClfU$eCJ!-.=PrCVe1^FNlfUAfbLjcRp\J$(h(aiF!+NOkcZqjU`KkMITC"Bo^X[_OHi9HPfAU#^7dS@ribWZ-%`+WB#J$5KNU/Sb$7ITnJ;m*3?opatN<0m:T3P2l`4NnH+os6_;7;qj'b'eYqkIeF>f?`Q,Hjefs(NR1=ch+*c\aT34:7S`;8=f]c%5?h'Mh!-h<mUFIgrN$[Ee6DmkmibgV9C0?sl1-0r"n2,jgSY>qGMa1Kf?a9.ogD:7SG2k?hs.+h5Kq>s&!q/m\i`Wsf?XWh0B$5%%k?Ims]oR*G[s1U'a1$$E6Y#[f^U^X1)O'pl3H#KkT=/llYFi-IYJsrd^":TKL*e5mGtCZ=f?`-?-[.g,iEeb3rFW*/"S:F7B9af(%B#;OTj)]Q<A*SJiMnVkT]oR(\p\HoIddGuK0R9jol`9e---QGbqH5+KN)+3P1PQ[Uf?Z]g'=[h_S!>lXJ)+Ytcm[]/p\Hn>3V[dH%A_cV7I&l-up[QM!Kkn8\DshuN%'<45eoT]g2e*W+V6lc*f5H4NGeDSQA,gSe3HC_XDY9LiQ8@.eqDmHu8)n*;hs9HQd)e&?1rm:Y%[Ve1;e^)KeiEYJ,3Ss$[4`9NP?GG1lb'EFJRui2U>Q#=#4fI6'k=cK1l&LJdolE#"%<'a!i*JY2KNP!=T)W+]X7S-e;k8!clSgu$%\;Ye5B!Ge,^XmCE-(iFpi11dmiD9'YIa/8)0![HBh<X7**-@Lp#'gN[=ZnkWReBn?P]8'HI$ib@`@,d^L3E$V6G$/+hAaoZ$V!-G%EAEP_^%g=d[RZNU4$u[FZ\!e%:2B9TVqj'k-Vb4]mb<1Qi`dMdY;=coJ6hf39$`K5^V@ZtFtXqU"$V3)(47&mVVp4q?C^i$jMc+P%X.@IfG'Ee^d,i[0#*])<j-`4XT4/.gO8DU*4?<_JY9[cKRF;%>NB,i87%&t8%?\2GhTIU>n'sI?[F'80Y"J$sF4E?WA$5R+3Tfkm%j+qt#7W4[WK1LcCff]!b0AB:=IfEV_UH_:69)V&"rLcAI%dsY'^!*Ot+6?/cOcnJPm%3W;)nt@UN1Z:9Q&WfJlIB0cGHK>T("PD(%q:ip475DST5-.1>jhg9%mb)bN$>G?I)uGVMHpfTh^Vc4f$CLN&nb$+I0ot4AdQ0Q>k.V#Rlgmc%X`hPtC("[/.j4@G8Ki<tg>7i8%XcPu5!>pFqY;7iPJMX@;Nb99aWX8/OZa\*lb1?fo\Cs+5&)u2`P"DZ"LR(:hYm@muEeWX$k4A$qQi>p:]7nU3PK?S1AB[6L4$DD>%,AKt%n^^T)^F(go#EM(g/9T/#X..!;k'$^pPdtPkRb6kl?.Z'@dMSk@A.?tZh9mEoFFF*%b(]eh6=BiO!;t!cLVe-%rWkLV<^]#Y%%HRf(d4_O4O5^c=M@Tdl`"_/[mVcdr!dHM.)e2!T=jI!nc/o0m*6+UZj_$Ii`Lg#pYuiE(FgI.(H1:UFp[;\!X\+O`@_4rl)sAMF%%g8&16#q$O^uh8PgM0#(4>$WA<SCF\$INhofTqSnVj(@a@`Ck5mYf10c8;Kg\X3_`EMr99=GVnDaPAS\.p=LCW4\0+:DeK&>DQWZ%Hk,,u-&6>UK"MpIPU9/3+fl<2&%Md,%jJ$4(t"QnJ<ck)$L%P>Shi?m6'[.b3Wa24Zi".?';[2r>`/fCZcC"%&'.p@03NHkl1FZp%8p]GPEB_+eGRD/shk\+\VB'$')c#1NV+![A)`)i;W^MUXcXSS2ZtdosfA\)4DGe"#8S6G<lWZ$q2u0D=/uLe_KM/i!rT4cihdGiK%Q.d_`qES@u?6cWiZF[h)FR%E)QrkiREm[[5SOX8\@8+uRdVkD9WsJM*8AEfQh_KER5-jZ0&CU9'=eF*t\$6!eB4,RVG"t*)1L]G4%j^Ic3aNWd.DH2Y7G&@CmV.%I0!*O`8ZS$P2nQ!<m\DSs+l)-juM%'R.J^;5#Si_r_/<$Ke)t+50b1I5fS6Cm;OIm\$rS&qj%(M!?%h]ormEcROlM$+-if$,m@h;20l)'T+lbd75@<<*+:inG&NGjU-08XIe^g]t!HK/sdG*3m*h;MTWfV$YlE31$D=:6($t40dT"G*aAb%c%smpN!LN1Ul*2g.hsjI&g4l5!_)!)[J:!j?)0M+_SJdi)&=!cD:LnY3WGN2Y-n1k#kl[A&2-731Sjfp$]uYpA\29,+6e^s!qQj'%7)C?HS5(maC_ie_Ieo8-q`?el0tNj#4,]IHgC`]N'(^ba,]<F_$DL,Yrlc:p4'cQp[Q`),-DkR1/_h&nn[5M,9*'Hqn.OqeC\KS[%/0uR'>sb/5m-4tl,RV6Pa''i2&<tr(08.[XZ&CE@baH2,!=St&V73otc^@nofnT_i<9$`fOC0W[E'g=d'L0#s2XgNjPo(`B5`"^4%9+$9%^&,7S#S_pOf/dRu'"BmW>`ABMJf&3E9g0):Z[@tQrX7K0-M4++OQj(7O*Ju-C3&&^N8),7lfp)-+g7o>:#lKpVRKWoNXon7%]]^tM`jO7OL&i21"JASe373eVgbiIoDUPMi&@](UTq%QL-Y.HlKZf'74!U[^O^ph6QV:B.#,76""!54f#nV*GM\#t/2^-Wee9/#8%`C(B]5^9/?O9Y?Tdnp`J(7W<T11o'ea)?34#>fn00snrfOUTo^efV3!B5ULj'*ZkghPeI]elR$)c!H^@CU)l.P!I-O[0'IoWjnZ=%GD1;<dWG`9+fGn8SK6>R$f>tX7)1N3OUZ8t>P928J,P)9Xk]/]L-B-qhoG,JC53dQ1k#'[[R`[4[].6>Rb'r#UU?t6Bgmf8d1,af%)c5CkU$+pB->!SPS/d&9&U2)k<G-4;6'I2ZW;9mFVQ"r4Y:qolT%.6j"igc`+%m"m>#@ij9IWri$6o=u-b5oc`:O5HCf;il%D;bU%2lRi>="dkaWbV3F@=:F?W+uQ6@]H[0CFOuV62QcGd`+53g'@M%kP4WWDj_J%;/M%![qCR1;-T6JMO4hpGA3_C(>6NX5E!o!C3p2A%[POc5g=[cd(>nto]h45uHsMVm2#p*i6pQJYlO^r;pJP5Jb8(rX_t-P`g>#Aoem;"[UBBD-Kt3:&`eOHSh1Q1Qgb3IsVa[GqZdOlb%*n\Ton8td0I(Y@rdhede<rT7Nb2BAR1&^AXWS8e,-*OVIRs8gHek"m`64h6"cEbOVf<MSfGn"Ul+&Qf[Z`41U9gV?Ur5R3(e0?A(%MlPZ.hA6o2a#+.$Nu`EYMEbfkOp*#@$&\7J/-*>q#N',<18G5*mlFgL<c+W&**&M31kJ$8KT48nN6=ZX6\N]@DMfj)?G^OrOh+D%%<BLU<q]*D!eiW0V!J:ue1M('$h&Rm205C*Wan$gej_=dcch]dB1@en-Z6?W4N?#GY?gVK5514RI%VTM//"H_K_DdI0K#B.3A7$mi%7*5@_pR2G_?oqE,(5(N%ouJ=-HfG`d`6Lm?7fT:AC:61[Y\2,m9-:D)AZ+B:oG`d1j4D1R[l4)!FGAYJ2jV2!*ZW,;>bflP2n\2T%MW0Pqfd!MLX11L/SW?011\[=dIdF80mo4>2bjFgd@*#h%qP#LlEI@</gUlO)`&;L\rW[`1$e:tS?fWn\K5VhnUc(-Z"-CB[eQ.s)%:15cNgPoP8$iA]!?MsSYZ[6&H.pViNqh$U%]VTcaNV+-th/j5p6NBui`?2p@M,c&RV5*mVoPi%*:+rZgRkM^'2V?$-koSs:+O8\R%@GPE)`cg'K@GPG[`CB_UXF!3\:"MQ:lQ3nre$RH<\juM#Y,T!AIbj%(UO<p/4c6$'XF4^44l`XJZ5r/Va&r$$XDt'G4!QOghX<;i%#6nekUk$>+)iFInDMrFp!/3JHe#pPj2]j2#<r4^]@NR,J=DR#?SH^"#5]i*kI=*=H$PV]bm&7`r+\5j@YaeYe1DqC$r/NE)IWuiq%KkIP"oD<(--\[C:;50o>i_pO%-L\ukG-\s(<#:"3Hldl9nkjp*SCfOEH-s-B;c-n)InpsQDMgsuh"X&41'MYPm.irT)0uL%^up@s%<BP^CLo!Y?Whm53WQss:85jeHdphl?1]t5M9&aA*ZF1nl12^9XJ4OA:,%#PMSnoKSLW0@^Cq2#4!\bgD:#kb'!;#2/2_h>(Id&(G%GMM.FUhJrb;i;;p:<&-.:ItYg(0_Te"`k@T_>Um#$eg7Pc4oNC;/K-ShVa!X)&Y$0!"_\b62D!>YfbQE)Z'[6YnFng'K&4X)_d=R%h5i66hUSBAB/0nd1u=rM&IBH@MAiMA`CBt^JiCUZMg!W)aR.eC%)N^=[SQSTRk!$4iAK(?2o\^Ar"e7\YV(;jI!d5f"3Ap2BT`J,%_(oTp-_`HaiF%e`!fD#14JD:\9jKEj`]2gE@U`LCO89&q-cb6Oa@<#"$$*5ir5>6J8MlHYY)E6,9MO`;f%i1,YFF@P$gkKr#0dXL%CuE^"Z%*n[%T1/p*G-BfouQJ7)RBmBP+&ghFN_2(Kr>V)Z_+k.C0bt@29GR;L,,QF7U)&17npd1ED%RSk`;9=@4[t*K]/lheSh?#%Si'aG[&[@U(Hj\3D!hq:5V]H>9B3@IQB%*"k^<Z"Dsn-U2(mRB+g.`S*M`O+"sSrj8Ucs.V2<gIjA8kP#J.$3rDo\%G6P+,nI0Sb%6Fr/Cb$&sY/]^D'g,F(s\Yg2_`,lrsCKo&j>+d9RU5Ff77&'tYY\jhKf5iYceeRCp/fp*[cO_eG6\lRFTK:q":iO^CTD[QB%t:+I%!+TM77ko*\$cIkR"BoYQLfD6D,&u+<EFA,HE)TM-@WYfhh^8Lj03PlE9)!'rn+kW+`<V:8Eep+<e--@3)]Z>`0k+J=?=%$uV7T8N%<nUeT2EMkEL$cPB5%-'?^L%?SW)8-9$V3kr(h4r*S/1?Ql,N-`:2MY/kjc^>'(KES[F$Dc%dM1UJ72J;XCb=NH<6j>]W.(FD+2fg%T^'V!H9ugL's"!R):SN+l4(X39*[cXG0_WRD"WY>9cS\<"Ikc+hpfP)b(<Jc<=Id&:Z\juF-,s"A`]"-F%ACjNf4/X5SWU4<9<D5%"jO&IFrA,aV+*/Mrs!-06;Y0@)>I+?.2>]d1lg>qVJl70YAR^iMS&rO]=6":IXOgOBJH3'm<!Uhh;=TRk8U.=E_%/?UZ,\a)cE0X%aFW&'-_h(E(_8DNYoKnl")d,"l</YD)lGckeA"TTriTlApum6>TC\Vb5*4gpqZ1`b(lioE6%$s7R]T>anmeH`@D2:T"97jh:3]no%mc?hKIY\7]<BYp%^\l:D5QA(Y^VG@!`leS"V2iUr*)$$]\Q3S"l?4ZU+2(5Kh&Mb6%s$O&fC6j;4L4&X^t>#eGR/$e0p_G?j*gVT%hDG.[o./-'r&K?.RiY$:&:f7`+,B@I*C.C1$Jo:]r?L@)itLSsQ5AOeJWma=n<N%/X;"HT"[3tB=;ZMoJ34L1fJlANQ1U>D4t=Q@%DgU8/an#kAT#:Rs%hF)nN;"0<W6K+c/j.9I4?,U&L`rn<Qak,Q=,-WiP8YanS*/MSnXOk;hE]G7F01o[Q]Oe`:Ce6XU-bACGiP;.%9h5m-c]M*Hi3J"Vo1U>XZ8+MEdaf>@*'>"r#fi2_4I[Sj.7+\q<+6]1PU=C7YmQf?#r0RW%&]>*5IGN'MTUcD>V0$,C?;Z*Hicp)%EqQ>60#^tAs4U8N>ibSVCHo4I:=/a=rD^tZKV\'Dql,kP$%;j-:T^-up&/YjeT+bAIK/"sX]uS4rG+XJE]tX:`C*$jb-djF\WkJ8%YPltn"\.Cap/<JS\Z!:tJm,>V<6Kj-p&/Yj[;o$npTONpbLo9ghnSk`/!h-%s4U8N*;OO.^\1SXNuQ.nDPB>B5^];_p:.WHC\8Je%r_#l`]N8^-0mHf?r'm=>Tr#7#`G[5j8cXOE!W\q0YR2)ZWDHXR'I\E/qHScf!7m/W\:hY<?7$SWir[QdQNY2-f&2H90@Lsc.ZU?l%"G@k0j#AV;b&[k)YUC)q+G0m_.)n9%#FH?&a=J3%1_H("7O0[MQ\jXZnuO+@"N2QrNdrB@'G2TU,><]>'!`WW&=\anK3XXRGSrep%'SHIKC/KiNiY9>Q>_7J=&t;,t(QC3Z4pY`B@%dmeisA99(`#DR1sX8G!@<C%7mXd1aT)sHd5[10^kr\i#Y8E8JV&,t+C'^LGR;*8%/qCB,<re(K,03`:n;&e%M$ZI;&5p!)+J8jmdm+Hl&_ooS:;iuqi\F2i9b<D<<<0916@9o\=eKd88UrcA,n7)C^i1"+`"N1QM1??B%5gVGJMP)r1'nTi;&j[=Uc,h.5nHhZ/+An@K"S&_Q*.c&gU.c_4*C(`7=<W\I>Q]R0cmSrkj=qH^Gf"u]&A%c^P6F2a/h@,&a2.Vj%!N2I3;NSt`q*5h@#o")?@'Yq(XX;+=K%OVofXr2Z_=Is?&m8<P"S"Sd\H%KpZ4%j9$>W%EED]a@*^gPAdZ]8N"r76D%^T1Y\9=#d%!oaO(ZDcWB:'&;S4@_\(!pMuT7EPlu"iZV",T2E$@$ChH'j6)Q(dV1f66+Aq!s)"F:I/tIJO9\%LF#9K(hNM&%NX1k9#q\LPSbbj%+=WV.A17+C+N?iI+LS!n$do0HJN:X^'LEZE5V+E7Q%7=lm#i?B8n9tJ;..rT#j=enitNaEYQBsjeB-,B"&b@dOat5V+NT.8)$YG@%M/a6O+<&Wc!)is],=iLoMa73'"?ad;[UTt9ST9=4Lr^b_J]6eS7#_8AX=jT[:c;ro"d$Vi-q^E\Z2t:5/lt:nNs%,UOc5)M@&&\!%Ta:_j!^oir%l4;!9UZPB7-5='Jr$?O/HGk[TEQT;[0`7o*C.7W:Cn'fE_7pOM%b4;CdGuo=?]\NM4c'Q#mJ8bC]VJKBG2d"A02:%%Ln#&K/Kr8UaI#:<RK2cN+C7Hn";"5N#lk!E_9`@Q+AYK7[)jNg"B\Zl#Tj%t$AWU-+?G=Q!sh^2N*UreS>]CZ&.$oL!Za@A!YM71%:c(]Q$3J/^fEDthA@9cfN2'nc&0hdt$0n$n;1]')15nUecn^V%aHihj!%!0#]YM$24JL.eS+6sm@n.c5UK2+LKF&3@`.R\kG_(GZ%&s*q9RA_MIJ]iW65lf,`C/Ft-R1BM)bQnP(!L=FMJ1koG)Jrdlk9tq-i,t@D$;GgN730^K]STQ`Jd38epk@Z4#RiV]Qp_i=CBu%;%_8ANXGVUXF&?(Wm!AP"V/EhmWZA$C&r<j;```X--+HccOJqBqE_R60J%:^aNMl%mId?0#X,GDb=)O&85!!m6Hm8mO#M)5_]Mj&+U%8GI98TYj2@1's?SE(WE9:hO)@fo[Z3#.W_rOK$$H5Yr(d5pA'$#`]&Q708=h.(V\K.2!I5L$DMN[3-\mON=366ID/Cg'L#a:k&HH%b_nm2^]K-tKYaG!AdCQXRY.7;&2:C\d01Er<A>$bn-lQ'J65nb.f_n>M/s@6S-=OXTESIp5]IJAN'mh45_+i%R/mFGQ)DM$d6f`S%K=iO.8=W%A`1T7:i"1El=l`eDiDBPN#`*U?3WhpML8KKkN/EDl,Vqj-+?/e_LdWq0'+?U:!$m(_#*>oA5(JGHJ5-9P.&dCKE9MEE%ro:@QO<u/b,![=D9ZS/<`%h?;</(m!bH`7W6niX@Sh(A%"9AY6#Smlm&7u*-/-B16@$r9NU4#<1OBFh]J8@RA!fD-I6mA'CN2Y6h%79BO%$k/9f.L6]T1(52i$]s9j"UQ`g,cCnV5\'m6!'(P,,8q66'!\*[%m\^nk<N<-TSUNG6^8SkJ^/tSK)kr\9-+3g!n%/^a9tUh%..tr#&OEgG'RMNCYSR<A8s,r`#Efif%fpB4O_4t'Q3N)(8mA+7"j2_=a#INd+U"283'dZVc-+&_!YDX/6r:p?>c&(::l2Rj>XG5<%89Mf9+t-VT6$Nr+]SL>QTf#=U!^L--_8npCno:Bj5sm=WNWHL:3&q<OQ4eq4.[2>pOdHO?VuYob`&[usK%'gDaUsXZU7D[M.uG`(%WVm-8)Qk$XGsFTlJ.cjh4Qm_dG_-c3ALn+)O;K*;M4jtn:^JgPF?@U5!ec@l&\\7%P9E1/"*,>s%cDVh69p.>3,tZ:Yo6H,69B]Q%=DZD)#b<r2D%VlUMEF[#,fV%FqT#S!$Qrn=Ml==.,QInF,D3cFJL^IT;+srY_oRrN#e9p<b[9]J`Zu05"fq^N1GEk-=2h0Rd9-Zq%T\%J16p(N!_6N4Fa&N3O/IJ:_&7dPe0Sl5YqK<tp"n8<9#jb8&3XT;1IN\L7_A?(hF2T+"OGJ2r$smd/$,d_$&Wf\BHA89W5]M+d%D?lUH'G*"n7#oo0'EY)U&I=p_5iQ/P!X'?tg+>Q:5l<;=cn8]fE"k^[LEL%C'+ci#N!^7/4Ii&e&\/VJ9q;&,5]@,AP=$]_D*0G'%2A8@YM:=qZ33#l,&n/q9L]Kn+D?OrEoG#5:A25!#,<??#`(L\..4$8)k5`aN_]jnL,c,dlQ=0EeSg##A%-h-F*P_o%>Wf<i83f;F%LaA:LTY!TgB4++V[G[B>5[]!h[3Tj>7*oo2e8Q*9(I2"'%AUI(Q9mi+jU$aqM$1c>!Y1JcM8W:'O1p;R8l+Ru!;(2]!#R1q!(;cq%N!Y'[-<!_\73O-H5unmr,\2a^PQAS:8N7SaMZQC>%E/Uo>QCJJ9uhp_M3@rO\/H=j&OTn.9e#QG$V2'n),QU(ie7HS`;q%d!m?8h%#i>cT%+1Y%L%)$F5^+^=Lbsm.!=6js%h\OMAf[`="X%dhVZP#*kTL!/Bu1Gn9DB%Y-HhUPT[QH]*Vq;qMh;/68AmUkO<B[b0K;.^%JjAH(?6Ol5TrWr((oAKb:e?n:k!A$b"@Nq@J3a*Qpmb%M(BJJpd,tJ/AM=3#O8qsI5`.W/+L!D.!/VO/;Hf7"*s<.JKqjP0E^9[X%6P)d:nfZR/-s[#+hJqQI?r.?a%7&FD+:pg]ZU'liPipDl'/2`r'"8SuZ:$$lqLf>8JT?et+;bg_q[l7V*K3MX`1A4a--QE),;o#u%#d=N^!Nht:Cau3I"Nc6,Sf2;ug1E;`N'.`a(VNfY-p`ZI,_CUj('uia5b(MI&qDqR`t#NY(bIiRT`kkQ#n12sFF\nUQO&E-M8#0N%c/EKu*/5c(ee?+T66*rT)$3<p"<hT582M3d+;r5A:bF+<&gIF>NkTsoJj_Gm&Hk:Vnt:qp/YJ@Po?)]ae-$YGM2Zt_ehocrQH1OY%&W-YB*<_9'`7*n*&L:58Lf+sR`%`P\)+-f"fV+_,ZkZ(K!8W8-,fZ-$:fW/kYd\0N,/FlmK*iS):6?k'0c3h#Lt2Q^8<?MS$5<J<%S0\.Jp`Z:i^q>7e@P+B;&Z%IG'8`'LGQF37@YfOoQD+D6,T&aRTnCH_Uk4Q1-CbNc\f`LG&r/dbGSVh6`C6:+MC<5das_lC+Tb1r%3DQPL,"<>7=GBfu4=hh05bP?onskO8M?')2js1*UJWq<#0JjJ?>TiW(cCo*sa;m6<i#IT`Ogpi8c::QikT^6C"bIl4Z19#W9a.m)%&p0!dMK+0fPVNOJb]Ans3&[I\!.Q\#;/qZt'M"+tI)*aY$\[h#P(dWh5qKF5O:W'b+#'?q!X]4o30'6$_&3<3ZT'$,0l]7nGa*mY%"LJCI'EiM1OSPP--iTS4s"SY6f<XEj%ZOk:QjE,cos1+*j<)]mDbtTQml%bWNh7LaJcI[N5)$Wn6A'K;]_0PWnn,'g89e(/jt4/(%T.bP<]6X=lFo1md5](bR^=Vhc;;_1sM0YAe5,_DI*TVIgV;R!?B;#^hO*/bZ>.-NF<,=pU]*$>kpl):>CnHHO(kVf]5iZt=rT)B)%TZ/36fJTM>83M!>52S0Eo'8683CeCn&gHsacf[BW53qCHebhMW:+a7UlF/NsMng*KN>(mEU4;sWgH3dV!EtB<UTk40PYSFN2$NjU%ErFS,HIQ$iQm1F.q&S^dBg18Vr*(0p(20?k3uSl.QK(8h0.i%l1'e@>+IDh8di#^*d$5o$ZNKcG=@LI/=c^\["t=:Cs8<`#CO86H%P%l/3Di-$^nd8)]IWI=Q_,fW!l^sMMa7jPAf^>auJb\F:I4l%H<?cb'2mZ$MT"+7Z2DZS@oZ%.CO7s&>Y4#L2<4oZ)!(u'H63a9l%GLUOoKPa=1=++\qhn]^nF'"s-`Hogb^,pAuhL&Odk1SPC%1$)r"_rn]Ckejc6OEX;nQX>S"9"D64cJbMoGud(Z=s5'PbPpGHVcYl%-EWc&K%$FORa=[ZID1pbW%u@'U(m*n.CC,<(B$>A04k*b?:!J#cA0EmP^ZL/>I,BED^4fW\u@[9^38ffe5tfuWC`L!IaGQsGG/3]%a;DYIbQiRT\sZJo3gcMa<@s:ce%!JO52]1umR-EeacNm,0M+=BC-50n/amNPd[Ue=CPl:;oW@<6Dd?V.6G@U04.C#^,5QfhF-<)6%c#_/PF?c;?#LtGoVTlSYr1N\%!dt=FS]sSA;EqS?1I^)Q#uPR8dYI9LO8AD@>o`$UW[:\JQ=k92&i#5HRiEgaS57N;%?Bm]$dR3!%;B#O8.\KtVBhP`%I[gAdQMI1tp[i[%bFS[")>ZGr=ZR+gQ."p?j`UQa0+cSZSggfLIB32B6/Mc">^5V$IHL^^VT"f2ZAmICC6,5*%00B1%Ho`ADnKW\"XtJ_*95#kPLJrVRHtta_q-D&-%HucaT$:9)f+3/#;1.ib[o3&bdeiq@?`.Q!9$Y9CG<r7C8PP/'?2%pp5o)VE%:5ZVaIHXnVq5'AVHGA\BrRXa,qk0?FmX$q=RKlQ<[AU>P%`9oE4rl8K2J7GQq)ro:\_c4qoDR>Q\o!o?H7:iU[CUL=jsLE0b>1@d%>Jn5AD15Y1qVIbp;@CMMI7s?Z-5OF<;&2U%mm+ujGE-+:KFab,3=:fQ=-rhA:E;Sc:<&T$*Wl%"hs(8b:%Jt<":o-4DRj"_H2bNs%nNm+tI7\fG)q*3Y"oG^Q`.8P'o$5Ujn8s,eO-bn'c%03!,PaWHGrf;GWU''0J(f_7%8^rpAek?-D&3rJH[4b?irZXIP57K%,6",D%$#16>&,I?=mmp#HZ[6q2UiAR?eEUgV(@rR0U1nK/qh)U/r&Yk+kGckaCcoJ&=mXlI5)"ECpien9(L2ZE=K+BYM`))&LZd-lXU\sB%[=9W?jhtQa#*nY?q7)%4'V/BY_!X)gqD,hSSE=a$"mb5Mh_+1uB%ABs>HbM<mH_U&`V_f*3b0[:J_:(hYT_H/q*+e[kML=_Q6O7a%62WgS8_(<-"a0,-I1k^I/*pKfDm:gr#hXH0Njt^'"`2X)qSHq62AhM(hI?/lK71p(B3(S9@,Ls9,Q9;pCJSBr[2<B'<rlO,$l!aV%3md;b(_tu@Y&S)o^W!p6'(!6PMc6D5SC\[\F%\UFlME`3XZs%*p4FrC.=KE&IDI1-FHY<XpNs-_&$b$VIOc'n^HSSIXb1caI4(`U%I2"Rf`.2.>eI,Rq2#=Ghe-as[d\Q\tlG#^=\/m@`mU1sLr]=`',V?.P%r7Du^DQgLEHTK`F_HTe=1oL$#/4B_G>J3tZ$Kj9K)ZiI%2:QI3^o1uMh<iIZV3^pGoM/ifWB9p[l@5^$j6BAAT)odLW*o?n48Zq0L&X6Bh@n@j4o=5W['LnZqptd"G/&1q3-s4OFS<GhW\Bo-%0`UjWjdQf(e9X2`F]%EL^ABruI405]qLe/q?[Y#6eohso?uJ"YSX*u7KcefX=E]"mcTIR8dVbCp[DK"RGM9ZAq0CH8!5$,D!./Y0%N/hp>%6#O@66"1fr>b$*kW.Z"oO,IN?$4TMlNmsZAeG%Qj^rKio*>/Ym-i7uK$@=-Ck#O^_cAf/?saE>IJLcm)DK"i[jlgYpao+F%#q:cu2;9]Aj3(?TG:jt\Z_^iZq,abLIinM&bjQgeXt<EV^\`K+IcjR1Gp2X=bdH1I/1q5ZqmTCFd`$MeTOb9Hl)k<P@$?"6VhR4K%$b9n2.%QN4C="o@$lC.YQnSnVF`-Z;<@uS,qV31dUlYiTYgW$OFg=`GDcQ$D2R@Z=p0FKa@=JY8b`))JJ4>,Ko#S,UJG%U:1L%I!%ZNJn;.fgLR%4@p=WTWZ'SO'<Y;%n?BDSOUF)EXL3f'c'ZC=(SpO-B]5@t(ruCt,&R0A-"Wo%fn?.N$FP0*X?3JVbV2b3t(6GF`J,%R.]\J-)_S=3o=cN)eG5hG@BBhn2h)*Jk<Dd^?t]>)O?dbIr:nWn'=o2W[lVG,$?.sH0XR=,$C[AR+189Fhug2rOH<*Z:8d%aVk\R%<#4G=s8FRKebAjI73*NC2`Itu)r.+#hKdF2m('m`gIOZrmReDmQKP]V5oYbAmTU^W9>IG#qOZ5,G#<0!%"rQ0qlotl@R/^N?V]'d%5ja2Pn'?1nV@E4/SJ'&ROZB7IYV1f]B0e7f*,'?Kn39E=>c)qg]$Y1&[e^t$kQObhrtZ.O*'Bq$eReg"Ako*N<@\sc0n,q7P3GP)%?uXIRr$'YbqR2$)0Dp#,j#L>Fn#h*_oD@\eBiC$#[_=?SLJ@#`Kuq#C"5ZFP1h[k>?]C5sc3=/#pBciAHs>cT0CKSYV!$%Looop?%pm':C/2B'I7Ha0m@sf02Qcaan-0kPZ`90517X=4B45/AsIV7=>R55Gge(4N$GPa_hh892Dcgbjk5E&UMcbeggT0Fl&I\7KT_\^J0%KVPb)aKl5$=5mF-<^Dr)U@mi=%t3*>0E$ouH[IHq6eVH#@NLr[I:.3%H%bm,q``ZAR!hK[M@0F(M19N<nUeFH2lN<rs88&T_]Ag4%7'Qsp52DZs$i(fKCKYY0(r[H%R_+[+rh[$g?_u^X45MUt1d]l"9Kej.?PI0t4lO6$q&?C(Q2;**K/Kr#[9Iof#B[oQX;`=W(@G&]%JTd)QA[u5o:ulG:%gaB2K`=]OY_(ATOsn=ge=lMF4,qUW:$M%D\\$KoW='uSqtX"I@cs,tpNrXL\FlBsGteo4L`W?/NRCFfY$h/'%QLI@UpEZ+:W/9DXfZ5JEqDl'BhplVrYLNeGLSU&3YIqqUF;kh;>lH@sD+\:COZis$@oW7JBR:DT^Xr4'M5GSSnurWCQOfm3[Xrd6%H-KJUA<)GQF-F0+1>ZpqHbmp:_*"T&&*8h@K#s:*'B[>Z4`@e+.4#!($=``k:;mN5#0-C@kE5Zrp):jrYhCF$7/q:_%r/j8F.9Hq%Msle-<++;SG/%+Q7POQc2ftV$m_Z\,@uF@+j^rir^=`'p."99!7K;f_pc`/.,04tEhb!07V66;"!BXPZigbNj;S=N`L=6=7+<TLj%8)E=0m,r9]pCp/!S]&"_6^.eU%KMmll+Pgp,2Zadp`:YTi_C+"XOEI;PF!2(/cN]]gLJ)*+VhV]pUBCUUr?\c"1tjK#?t0dDK:BP%5N%4]n#a.bfK=;Ii%JD8XD/PZ$O62sa!luc0[K<eTiI-R]FYj=gP/j_oS6;W]q6B*"j"<"e*J#F,AejR-<<8tYf/AAe#M3j@.kJP%'dJt,%tbqoZmjSkpLn&BpMrB*'t&3j+m"9G_h7nR7Wm0emM96HUmg*nLf:Va@hf3J;V)A?K>dP^d2q9Qf_<`NYnLg3qgPa(%Ge!2%P9rHg[^@3s??<6c-L=4+OW$=6I_Uef;eX9o[RTh@>=M%fgJuXhceI@g[c(rr[oPC^MeN]pp8^\ceCh<5Q$:'g`Am2HY)BdQ-$QVI%&5J#9l'?Tn`s]:p9X1UYHRYo3F75]lonWqhI9Z1;X93ol[<XrH%=miYLLA=t'__KVn+f&1-Z0U>*nVlQ24O^\!h]")'YMCi6nfia%Yg)Xn(36]'PHp4jhjB2#jcg3c.'Qb6Qj9'ik9U$biX\/l[`)!\UpEk)gEiT&=#BJ2jSiAm+0rR1fXZ/fq2bkaXEMoJPa;6bJdec-%AWbuSTn)U[<s&M"c]E]NAB#=2j*2>E8h2?cRJr4:m%i_sqPb^F1nWS\^%-*X&j*,o0=k6\3Yck3nSNLMQ[hp*d+ald(HTA.;ce7@%M.:q4*UH_b1PnJE/3_:Q2dR4Ls'(p=&It[Cl;g]GTnn/@Q\,&*Jt6H4J]($.UMeTm7&:ma</Ma\O2Nu'Z;jqI/L:ll,[Wd[49;P8%\kR+1=tJ<OU,J?n3&'JJGG4Iu"m-:(]c\+(PDLbcD;*?i!KrHM2>d+"a\@YN%($kt!';\24%SKi_!J.Se]a)bcC%[GH-F*.D;j`c%dUi]iE",9XK.uek;f_be/Z(A?6:XiLHa]#O0Go5Honq;fdaga6XI+`-^8pC=)=A[52?l%SMII+)Lkt,FDcM%YgU-LcaV1ueV/+25%ijLOCf5;mG"'_#tOoS>F2=7L+Sc0ko)IOqfV;"Oh#jg&EW<D#PC(4+(FVsJ]>&Dl**--JGY/I7jRj=nOcfF[:Nb$IMgpQsQ$-3d#%>K]\?U$'H.Lt,VP$Vg37Z(,)OrB*&b@eGJiNk+7.dKCoeC=fW13n#ba<BcM"M&%(p)u60q/=Kh&DMY.H$T=F/&?DNWeX+tT"Q$e]%oZhX'$/GJCfY$NZSe_C\jN+%n(1%nf9Q5gTV"cd\$7aUTd"]*h/ZbrsSLlbefjWsMP1[($'aoQmbU))cUfOaE,sV-D$Mt!#>*P*(%Rl#r;5]UKZg!K-2YrPH!mJ>J!jVs"9\&+^ZVl9SMZLm:ME%;^J%=iA!D=L<n?,l_ZOR-OZL>^&Z>Ns%0m6p\5p!D+FTmdGO>`U4m%O9iYI5<67n&,;DB-t-S9jgeu\_Ng*DMg\fqX9qF)j#-t_Zag3c\e/?4^4Xt]gV$O#q-a.Y!mH/e(Q.&0Ft1E72cS63YYN(MbbPoR%P#S[K2?GEW'uf*p,m;^9$e-7c^iMPpDXAjG\](S*UPi*</Il!dqjiF48-J81>(nOT4MY^XaHlC+_uo@#fb)GJ9>Y/hB;!5&#LI9=%J"j5iY\L\[CLuc*K!DLLTZ*9'=S2[0N#H(mFCu,#J".LoZ,0n/BS"F>`f0Z)8L`Ms#CF?-+n]NL^<2ZAYmm:QWY/\m4"iNq8Mcg3%C4_q705G90/p;3E14/BU*h!<?Pf7FB47,l=;ouD_(2KfEWB502pRTIBD&obaK9(+#_(.-#Qt+PiK!hJ+^!me5MG6U'U;>(sfrQc7%;t5D%`^VC=Be\.O#7U/q5rPDM$T?%V*75o?Y2pPFCC=292+f:j=5<gdF(nd2$50mm@Of`Z*oU.4[etuICm)_bUnA,SR/q;3Zg&eO%o[.IbWoH^*a+2#B-?X^/aW-,kQ#dn&_o84B$=+@)Ho'TJABb@Kb_!(8E#L-lKhARL:EH?V$:/JUWqQKODi\HMdKGr2rcX)RVa9]u%\TrNQ56`kGZ>iE$#foH_I6u,TmZ`KXSePYM#"1+BrJL#NS"YpJVJi=M.CIR>-`p2C(W_?%Bmk5t@%4\<;tpJ,lZPsVR',%JKe_SI%q-6UnmQ?\@<GtD?O<=Pl[-g.YGD8IYXtq=pd@H"Ncrt]?QujGm2J]Jg^<Nn*c&f+2=aU=W57P%6_3=_-<FEIkrMjRLg)XQp>hjKR%nnV%LiHtSfLN)$>,Y9r`F)XppftgS4Z$s88hK7r#$a]k+dTH;ifY\JjA?ZEIWQ2<VJb`@82)TU3,:%^oK`J?40b>#5RX:mFbKD>?%be+e6IFITAqYAW.)J,M+NJuCs715nnj`47?B<f"<5?jne[@^F4G$<i?T5X%>mF2ld]Z7KtUA'&\U()BC>P32eG*q>D7EYr%4nZG@%)$0Oags4U?o<J%tI`L;-04M,#96P<H0l$-o!oA9e1pE<T#IB.=.4N#UL)[p=_Zb*BhU%ld3j=sm"bQU>o$LU<6$<-4MG=h5=C,iQ%o`3Yg,IZHAR$d"qrMaRDL,bRL>@;C3eA7Y\D0Ekh=AX&dJ/S1JH)KfMX8q5FbhMi+@M>(t>1,;^i._e]c;I'\*Vt<Vk%t:8ZsAJ3%8W9#CVImfQ?gS1SkD*0ccO2V59T=ZbVZoW^RJ%=^WMp_c:"&G\b#u$K\s&VofS8EXUS^>e?kIN64kO9u_=C]N+#&%]hm-l-!lVpY%F;Rbp-TblE^f"1-EaY@_Ji.4R["LW+*!6tC=VK7pR%uSj)REaSdRgt9/-cn?f`4BMk;>1$"e1U\H$tTj$Kg,.0;bQt0Z`tPilk7i%nuZ*!>o]HJjHXQUi=k]9bj;_#Rba(KH,rWL"`-FMpOR2eEf/QU26A9qE3_WT!n1]_)g%*cMGAarZ]6XrO,'PPYW!g=DZ$XpR^,$$%PP6lZ(fbeD,M]3+kH-'1K=];r]P?O+$M/q/;k5KoH^\92#ZT/W]VuTa3j#!(GpdUk0WSXn-7QE,cq-9:l&#,`]J>BZbUN^%3%m45%pM"\i<E_s`82Z?U<8"1;&^m>H\<]Ibs-mjf4k5`";,`+j7Q\'2U:+.^1t/lrq;Nr3&aeCh4n:BufL?&[p,Z;gQ)$9";tp@!^e"q0%/6gS[FW8S*,6kH`76fM;H8#Sll"+MbkCLJnVWD)^eR4q*Z8#G2lInDSH."=;kKJ)^>MA@Ce:Mi,^[:hib,Mu$Z);_O7BNFD"<As]%A^5Ma51@cK7=t_GUapBdk$'5,L-uH*i-B@6<crB?)IsU"BL0gpVI40kfLsht=gQ8'_UJn(U.,B`ip):Z;?.HKJYQW</3oVb.KidX%,NoocK*8N#&*5Z@29c/1)&W8Fgee;(E^8j`SHZ&/@6am8CPDR25oNT(!3AM'H[D\._&R]NE3ecTIKrL>)d\D2"CO#+K6Bie_;P#F%_Wjb_;.5+_b"gf_UKa_<F[Kh#IT5,LP-S#hjbTTrBqt$=8"K%2E_2VPI3$Os%Sfe7cfJHR!54uQAnoUJ_2Mo/Qo1>f=a&u]g'*[g%/2&JkZ=7"A)c`<JhNGo\MC*X(krjVYlN5>1\lLRTjB`JXhCQB:%<4b3C>j#]WLD3&^O&W,>m@-8#5Pl,2%u[&SI>IrDZnUkSK:E[%6%<Ep4a"@[l,nU2,Sl(PYTXC;NdMR05&A>mKQIt^#aiP2a_@Sank`&/Mo:p!"E111(V+F_:4k!W,UY3]-EnX$ZMg"$,im$u,j\Ot%H?r36Eq/SpHrjGQ.=7JgiU)s[+LU[@b;V1R/-W82UM'\LJqPW+l?4l$/lf-JNZ?[b(?G8(O[ok5"o52gZc(X-6-`<VK=/UK]^)8(%.4Q*D%H%;iYTTRql:=Pk/BD,!AY:t-aF3oB:#,otloc7U?qh7Zr6@"l_0e0&JYik\[Nn/U?jSh3bauDYdL83iakb9*<DL!VJ'q<&%%`#iB"%cIpD<U$8nI"UTl3Ef!+CW<F@d^fX$'LlHXdBOD8V.q33BVXI8W\$QC3TCH.#kHTCU4+I?4nO&W5%eM]9=*jn9J'EOPpfO%rp9@n12A;I3.*J0B\#0(+K)mTp>mPq\B<uVhc+m^1add8]`ts.2Z'fkp;j5'j6mn9+c)OqWRNMR'"4;#/;`&Z]n3LK&tPd3"4Cae%;T.grX+P]u`(2tE3Ic4PZ8%3@5A2iE-#:0a')F<q1o\cRF9_H@QTZVdW^RNg,]1sMXdj9uI?'ECCCA?_SO?6:Bc4<l:@c[AipAFO%n[qGhYOOi=L:WG!qc\A\n&Y9GDLN;\1og3H.P]?@OT\9WZM41*DniM4$F!Q[N`)Dq7M];HJDSNKB!@r)TXL+k)4<][#8YNL'XO.t%CJ4N&e(34'+fYaqa,,R*GR4%]+ruUJ6PJg@9B5q<Lab).V4"p-Nq;'5>K(<8U`_L_A=g*L<IV/BFRC.9#RLU=-J>[,+EsF&NO$@B%Qq2_m>\DdY%[0"tSY4!HQ'mhXI)+>(p\$8NAD$<CXY[dk-c'tdd3ck<Wied.1H@17*`[F=eR<!%k,utnLFI')Ce_V2MVp5H`-i^6%;qip:k&boTV\S'>j#hOC`CT8'cAX8S"U[cU)0)A]QTa[?I=\'u\a'bQbJGEtFeCB?oLpIRlk4#u_4PjXW>5XAn!YW4ImqrU:*[)@%pGa66e%%'eZ28pmk6('eiq\l,jOSbS>%$f@FGitfYG+$r7^lu=!55l/n5_aWD[p/7]J["F%VC=T\6,$[P>],_.LUY.9Nid\B<<Z:%*dm+t]^(,J#@_FbKdeM]\U.e8#pPp&aM%OGp&t9P6;>eN6=(k3,Ba[^K'7S:aR1<[cN2Ma@mtHH09^B`?W7l1l`8'i<hL+Xm.mts%]k@uD$j=^e&,&=\@Zk\BA:jILHCgCQ_[u`?W?IimQWQ=/-M"<>j,5GbP.0So*-/.)(Fb1.WDsHnfF,sVOi^e^iL2>om;I\J&6&+$%"u*)Ec`Gu-6^i5tM4T[S=jF'C"!p<0NKgk\V%bka"^pD(*`:YeCp!>jHU3XsK4CdD]tX!/3&A_Tk6`>)^t^h8X&UZ^7ZRerdFNV/%BkT[fs-fN4)\'b4*L!U"SVk9Z`U7*Vj#*6L13?a0G%UL1BPpgHH$g2>F+Q=b)>>oQY8m2J;KlPU%q-H^r?cNZ4UNj/Z/JXOLITA[%C?nAC5T2lbBs9N`h-aT#aB3I?1r5t[36tk"aMH0L1A6+PJL:SAVk[mQQ^o7^&a_Ms"(oI&=mQ(amUFW"M<o[T-IKiDm8iu*P'Dt1%f5?;V/-E)[X7(?hPhfT4'Yf*(FTikmVX'5>Z%dE)%-b6lTA,I<R71I#%L7>>l4K7h.lX3d$GkJ*pEuFKLA5ZY,FF<@a[+Xn,j:96%cWV8a/U0$X?fb/iq<g=#pNtC)5dgY%M>jQ^YlU+KlVN)`X^GLLBUSg;Y)V8RhR=a3m_0)+@RH3>5]hq"SDXMHQH&NC?Z6j>&<p3E%"!f3^_iB!&#Go?oCbIXl$A#RN)([+q?7"i1npm1IE'l>fZgXWm6ABKrhMIg,`P5AmfN[6PdZnN;iX>H#ac;fW-IfiNnC5O:k:CFT%BM-'ib#@57bbI]5%F=3Fo[eZNm<ZVBh3f@l-Rog\IGs.FC.1HT=$T<MN.,(8Ykb;`!NGX\Kg"`mAb7)<?+_4INV;L2cneKL@qO"I%fG>Z"oJs(&Y]21[nJi;'mXj=@mBJH8#Y&;j8W[R+kb\9TElb8]2a_4T?mOuUVN&riYaBMS9IcTR-1*kJ6l8HpPP[Am"5dGTPO%s%%'M_"?jbrg-grd&9.@'4ubD3mL)nhO.!*.=B/B^&d'`e]m>Pdfh%Tt:Pdd$XOS@1iok)N[l/UOMP8B1S1*bAAJD+EY6QlQ;5BMtl7%RqVJp;c@.eF=s:m;pug2qr,IeSF^6UBISj\eTKTang.nk-^^At7<V!$#+M.s,B9=$>F5jj-%!Z-\W'Rj_EP(U-@AX]?saom,hU@W%ND.\6.7Z)F3f454!D>$D(;Z]tcEF50Ub5O5kL[H;E(@Y+2Ek#p\d2L"05h'l_F'/'4]\2j3h-L&P>VVfqc87hAYjJ]^_W+?$8C:G%'_]M$+a3K?n(X/-@SU'iJaUL6OZ1TQli\dHeY:QMcIpBtm<*//@#LEW<2RBj4b`:S98dQ!kB!dF8lkUIG,-P8'-ebBW&+8Mo^4ha%8Ch_)95TGF#C8D2e?jOn3jK\=*6@4/3g,dX9X'cs$>&G;M31W"C+Qr79MMJVQ.Z\kJ*S[@Yj6[Z0h?k+=G]Y%.;GrifY#PV3=`4m%=n\?q8@Bm$A[StGk0YAa[N]dMf(<402ld&n9U:FMB\*dl[PBB0BshQ8Ttr?\Ao6&XKJLCm27C,WA>WjqB%p<EG-^;c;0K"jR,eaW%n,,%#JKE71kmBN[Eb88s\U73+\N=8ApF<,H8g-c-nh4CGX)EbagH(srO<>7I]<ds#I(`LhgQ@U.p+e"h>[H<uk"hf%<Rn_L[kQ>d%eD=F&ddbeDp/+(H\c>;)Q,WW%3:#_)b4`7,Ns8Na78:RuXqF6Yg`;GP`Od'UV)j886e?OE8jMm+]=FR*>t6'g.ie4SE(6f#+_qqc%24-t9lA)DmMpdd98A+7h<3E!\@Mgh-S[VqE`I=B(c0;4X&4<ZT.(&1sp3O%%6qCi0MeC\-+\'V8jEaqr"D`t'-lNs`!3e+)N+bl0%]Sl[r72[C"/)J[aj[q"%=\B]EQ_S.qO#qs7W.-4A3IdE#4LHnB\-D7,fj6WZZi7l`)$kpSYOg:ud%"j@Zc&H78U+i/oKBDo?8"X:%7J6bGDLgSVm0CE`(dKOW<B,^]"5RA5S#ph,1"jk0mE.iB_N_AoS[9:RPjrZ<7@tep$)CHJZDKCTK5Ka_:d7[^VgEj=&Z40OefWP;%]f4o8ek3q>UO%RNC(31"lo.G%o!I`B0cu2Ima0bII-uOu3QI=#"ST?"RhF];!tE7^d#]i=GHciM%]*=W26`Y9^e+.jX[fC+;"M%j%K0>1<9P*&GnD4j\&A`34X+NG,1b"aA8dejX3Z%Y'l$^rg0WNH%eDt"Je>VuqGI$sL3X]Wrf(]TC#V0U&:>*_*h9fo'?2<B@WW_qI%U([C$_qZ9_lr/>kqoR"_>D@GX1;o>8K?<DIlSgIk(W0BM"H8uJ$%NnMcoHQQV6$h1=S._+$g<8OI4M$sC4foOUs;J.68)$,m!O9A%47kaJB;<m[SS^&>q9pdF3kA4n63d8rgQn^mOVkLid_#_K?=bmYHf'N/%s^7JSaSa7;-SSC5Eec:bBWD^EYhQ`[VZXNmP'7FXd4iN%dl?Q'=61G2gQMT-'WRlL$g*X1eT@h/GVq*NRJV?'G@<ItW8Cmef3h^IW;Kqk,+:;/18T^F1&FY!Ae5PufJ],>S'qhWKf<0pR$W3Q%qg4.>*RuZNb%E/pZQFl8]\G\_VZp.UTc#]5T0"Kt<:TK,NF#dF@#FCqTY<dNk_IoPcMH5S^m.3Ds8(3\LS.@h7`O8d(g+31;1$&j%!\dRkL1Zac+a"\Jf*q'A[d(0B30PoB^Ea)(AXJoPM>j%4N04ElosL8t?+O%RT?/I4iFSbYrE*40fIc,)TG0bas&35N`8QR^DP3,R%-V-]I%4lBD"u)0FAgYH^Luj3,c,>F)ocBidFs\d<UFt#"IO9`WPQem4B[Z$]s#sm^K@PL`qB$t[)G_$4eo[Fu@VWcCq398+<N[Z"%Kd1dCVMr59XDqstK#QB<ha]=;/C#Rl$>'`XY$YrXk2F3Gkd/9&Q?q6]HnOP.N3Yt(Kg(pm-EI?D6E1s"]h*_!g]psZ9mD)!DBnL^%%8I`YJ$MC>):7=FlHub-0ZrC.QRclN>&<^gnYO?f#"H!I-dGWNZ%+=!bDH'XM>E7`4gEUPkARHsS;a(uMZ#Pp:6Z+.4p%mG<[XXt%e6qf-JVF+Nkg-0N:<$)Ef05dD-f^3I;R!Gg\P@4rk$AHlB]J4IL+<q\PBOtF_92AFS[pc40g2M=1&\h,4W2#t(:$VM:Za;Q;;d9!%abg]RfNlKE9J+!#V:B8H0l>TFhC@/5>+a$5-\Abs52eIOrXr]u5G9eLZ!OZeT0UX-pUeW;IW_21],qrN0gJn/Q^#:Od/dhO9\]i1%"U`55[$PJj`WJ[&g*FUMHY\3G'sX[@\=c*/M6J:3b1NAg-g)-o4t,VrB5Y,H!apZ_@qsOK0:bq*dY\4H#mJ%7b1'h(6@!Z7aWGrR%$O$]tX1nIq)9UtNe0lkc-kJTuG@DLj4-\p[_$5f>MB)'FY=c-@Gg@dR,d$6S\7'?kajgpR$S*RE=b=U*"nFsJ9=@[i7"N3<o2d*Y%BSuAUE!+&n"U]He4*4K_MF*4b!q]m*7A6/J!?J>%^*mae--^jq'"+Ga>EHiQ1pSp8%hrXjV[X;@:k[C<AK)qB@IZh?%Xth&@ZEbk%3*cY*[rFpkj1%I-`?%Gse:\7<C[aifc[+\UKQa(U$4YM/H?9fW*)c!PArmTuM\Nal1V#a*&Ns%coCI@'Su##98t^GZOAj^WA\X#(%5U/6P.1Yem)2.CN;[Vf[q`o-n+_dsdNsmeQC8Gim0H]js5Ah74=3>jDTmEW=4G?CO#Y;E=4Q0%I$,IfTDS7;EkqkJ>#kUTTe*]"D%GtdD$0Fg\6dD-5mAtGo+^+VIu<C.58T?\BP'bbjTR%(o9Y69Di;(FX;G(L(<^b!j>HD3e9AGHD1Ui^9SQgrjpH<`.P;jPR`j'\lI%Jpj=W^Gd@MZKS+8&p+!-^e/#L9Q&R)4t]JD,QXn]%ipc\5HC8F\d(,KAd??$&?)I'BoVGOo$Gn-)T+?;e`K_e0H2*+JLiD!oeYm+%Kl3d_-o./d[];1k<_?%n.]@mb3uKHKp=hqXF%Fs;Po,.=5R*TV.ZX[PcbWpP2L\:A)*_rA7j<DR0fn=\%)>Km\Q`sA6`bq^C")CG%nkf,mLE0(Y9<^1L!-:X3<o%<?q0K&kSLQ_5$MrH%okOea]h>.>Ncb%:k^$2eb6E^d-,VNH`BOLS=U"/OL/HPnEH)c?fl=[$%h)Ei%-Xc4)K3=99)f\p[X%MV\UJO3gk9l,EjrAPJWaJbT'qga.BRb+-4*qlf<*?oMC/@U,!NRAGR-?jkm2onnp\C1'.ptHE*:OIQJ9WL!%fA1mKVAu\-o>%_5!Geei8pSX3op2uejjMP0MSoOk6OHpjX3=WKT"GaCOD6%5ffu>\@(m"VcQ0p"l\aVY=L&/cj^Z,MMeaWB+O*3W%UqJN,=I>\\@V[[:n&.O]Or_qk.-2EW3PnW>Z!F5//`%[\D[`Rh"aN5iJdPXID:<kXDG[uo&8:W5],.=lLfh+IO=IU;&Y!pM,:%W@%G)a@L>C*/.p/9,S[/AT?mK;.go"r(X%`-ZM&Bd6U5)-ckhMB8"K1RR*]?Ff@<[hr^A%)7%'9<Ukri#9L)8l.kR<9aGBWCn_c+9?*%ZC=%"o/[]kFe?n\aRS<tIUi3UiPS4MPFbLZ,S1f,^(BTq;Tp4%>e\%lK(bHGi`h"=@6.G><G_b1=]Ab[EX\`A1L0sP_Z^&+:L=#J%`I8rC-<qfsI]_bp>ta1#!@Ds<,q%kp[u?BX1.?d$QAH(`Y$fAVLE$+PX5A=$;jd7h?o8c3ogESJ7o`LF0JJjN-QUZ5fNMEuX%XQD%FdITI&c&sT'i(tt84Nkbs.A-%bkhI=hDX#DjRhKB[:'kFEs8=61-dPd(*?nESaSbiIKV1GBJ=99^tQ>Fp<8JPAZPqf7LOmiApp;*%Bm9X/p,ntrhLJ^5HR7<"RMgWU#67GKN@/aP"_gq$#4V"=]GD:U=%cRJj!c5#k.QsTZoFG(8Lu+VfMA%&W6Qc%WSJDIFol(70%r$f%F$mPiPI&VUoEkTaZ[T#F!LiZFNJRk,:&rI+5PDg[>E,Fg--Zjqb!0%`;q?7/h4\IpJ=Lp!>TS1SbJD*Q$_(^N>S:X6b4BD!SCe/0%7koJ@9Sp?sPht!nq3hK+LmOL![A28a)X*2Afs'I'rD#/B^'[dp+0;;Q%9^c?"d84m<!ID]*j!>g#40tbs/tn;O=s]R5_,i#`YP3]%SE1XEDmg#7M?_J,]Rr.;Ob2XH!o:1(Si;i)lpbO'@paILJ0(eZ$t/?8/;IHc5(G(8^T@*o6"5"V9>A>`+C":#ZbFql'rHjL=OjG0%/ZI.:^9-PO^rl)Ts1'YgBYQ2Ne+I@#,hUd'^?(R"1][n!=@rk1F>*^2k4<pEo2TWdKM%P5Iudf8iqI);fLLU.g%343+_3$=M4m,C%Pm(+OPo]L%DO2YGC![9b^K0o3\L!UeP/.j8B'4W;?n\e5V6=@!fFpu$Y[[^eFg8/U:o8S)Ng3IB.*!=K=#S@?>.Y9AME,7*ihh:+%=ACm:A3@Qt<PaR[#c?r-V3$g&0:6g`e54_c+?cl$[npihINk/c>@9<K-GbVBp<li\'P,UK&l5o6iZ:IH@o:3p$Zb`TXhTcLmRVaZ%L#V"feJ;<VV-7$QpJDU%<2r9Y!E-$=W7BWseX_[-26N'N".1RneAnR'!ljRFA[G_akGLcU<h"@gQ*`!VA[_f<NZsb"Oo?t$1["S4%nn#E=A:1'fGiBJg-JdZeO+dbi$6pUn<*@"a5c?Wm`$1RbD/,>EJ3m,.gHn>MofCVNiml6:d&]^s8Kals.KKro8%]bA`[/D7Y?kt;%XReF[SlB,k[ha.Vm!gLp7Bm!%2na$+eF1'_Y?ktofX$bF#K)!>Ugmg:XB^s5P`%h,YGMa,B'','S/be<&pX\fZTnioT"2,tNd<RZ%mM8+k"?P)6.>`Q=hclK5e]Tm4*jh/UiGPa35p]'Ec:(U$05<<\\bM$unLdB2lD5P>es&1h?VOHAX_d6HYeQOQ!Tb%XUARQCTff9M%kRB,'J+CKbb#d&u:eW(#%=<C?]@D+,jK!!GPaN;SM^5EfSO[(f6Z5>g*1nPO_5aF'Z<'8XlI@CjrI_(U9cL"/#"'mEXc;5j(Beei%P."1]14qUB7Jl;](Y%4`\1bPKHRm<k0=k"lJdgcqcMF"NKIqH%!\;=65\aiX!\7no0^Hcdb0K!>c2G3%;O_Yo!E6\#em$D0JQ^m+%79?7:Oq4H[`tW%7_;r6[9+Y7_=MZ,3dflh8;@&,Z="ecAH1Y.7`Kj[srBSM,02p4KH'[0@E,9C_^f,8\/cErc8l9VY2*<4j82Ofo%VQ<8%FRCF0Ph]\Nc\P_pccJGC'$"KA]N4*o0jZJ8(,4jNl.jkb&t%aUpST&:Uk$ZgHS!hNU+K+&j7g$s;fnWpc/t0$!)pXY3d?g3%O2a@t-N;2bY5tMn)\)0rek[4X_+1Bm>n_&$.b1_o$B-7.`CYcYT2r5co/X?[)&Di,oO-&Lq9;`=0_ML:@4hRT3LTAgVb2[=Z]s:f%T:cG=9m`n,2ZI;n^m)$WCbVX)##E^l@qm'K7uFT6"llTAjE!M_IPi+#EasaJ.C0C4cFV(mM&T-d\roT=.8"Fc:Ze6X0=4Na]i2J5%EA7'dTk\sh7k[R7lKMfM*>+L+e:sWFfM;rg6Yo5rodridK:.a(IS\uAkU&A#;\54@TV^.O!LO5FQo"K)#lKp9(R14FgB!]l_1np]%(RPRGXI0eb0'K/^=AK*XZR.I@H#&N>rcUM%fn)TB.B8!,<9b]iHHKq7N4HAWk+TT0BN&aFhA,>DFEZUUeV(*l<N8@6?>CU"7M2>6%:33[fm*:hYCo*:-#?-`fVGl0*890EB#pH<Zef_N'@#\T9M[BWT$J#ci8j!IIdDWSdiX+j4.4(#!4[L]-.Tf's3]hKlmuemJnm(ju%&I%LRIRL*m[R0lQQ,ZTR<NX)@7e)3hBeA\YH-Wk>g+_:(TP^VB!*>9LkGkkZ;88]Pi[")8V*TQ-/h].&+^^McU0J@J8qM`T2Wsn5%)VJM\f9"E2#83K^W6;nknj!1[a(KgSis/WFDdXe0aId)IfF/#Uq=h5u4eY,)^Vn1\Pn_=4gVW=j0qANm\n+]JUd33>jb!/%+NKl`%".N12q_?@tH:!2L^R`;l6@=Nq=o,IDOKVJ'n'e':CS=#!6=n3BG8.]fdQ)TrP\AFgpcUCD@&eNK97ZF-hNe4W\N<H<*B1["=Y(1R%pD[iU=ICY]LZ[utI/0oI)=F3KC3^N;1$iU#l[6oG(OTIP6h=(LUK0tb?lJEaebA9M8:S!)][+Xbnk@6L\XN.TUdS+D:;n956l"SK%[j68toE&s%NSb-O"oFUen<hP!JMtWsWd.+/-J3NjRnW'pf+Hofoc4fklH^s*+6N6@&d43Q.h(emo1NJ32S^dY`b2L@f0%K!%/-7.%PS\e?-i,GGcm]U?RbEEl?INZe;c.TGWT]ClKi3_n@V:gWES`f682s0El"TQ5*;EI(U-:DVDH:QJ/o9DRHML5]imGg"RQ$Rm,a^ar%6HZ_>;BpVB;m-!Wi\Ab_:lIIiFjjW\162FD&JYE6G>cGi7KH$/FE?DR7NGT_ho+`fUbg&o;5@STZ<63]SHqp\;qtb:g7,^P]6*QI%JgnTTW2b09`&d%n#]l9/d8J[UO`<nV`@#1Mk='Wt/;5E']Mg%rDmQ\2dE_PHE!9io6L=`8],V2X@L\l:N/XYg8L@j,GcW2OEtF5j%m6VL)*]d<Qm=&N&%X.R8'KT[-P$msJQ/^=/TfGJ][LI>aVFJYqU#>\u24^;qJ*45qd>0aICt\`"Wiic$F#`&b>0Kl)WV2(TQ?kWr%1Z&:H7SVaQcbi<2m*>Nk1:tBPQRB8GW@Y8dB^jg'-ngsVo3_e!s8*lc)qLL@WS4V0fdV,h',<4*rd&>GN37fDTk=V\G<=^4Q'Q_g%\1g1R8)2:!I[5-D$OsSo@.h<fWF8"*b^9n4j+T(!<2P21@g6\9U&^C0aelPiFtT\3G25PNL$8Um`9qK0#1L[1_VG$@qW%?S4+V0^%CUu<BV[HZ^bE,[=*0Lf/9`@$N'k"6s4L6OHiF#\aW.jl.<Pb2j)%tN_0$O$W[@0Y3Juu0Do5i'X"s1k&<etpJ:@ed)*VWbS?t:'1%'Ft.kbk,EolFV4J<]#OX.H<!r4dnV0ps0+b4Hb;#q-Xa\0.6A2Y@;D5KR+&MNHtg$Z5AUU8nJGhSK4i`d^7398dfEZrI.FSJ$AYE%IdA@1;Dt*=Z*OD'#l?^`'tttrM>A.i+_X^9SS<(r/_IHu42#tVVCMY6,+HF.1/5$"k3&<Q"^(!VpKQ8d)`$ne3M+\YccBL5aXD`m%P+nX];`halg]t7dGFkGu=oahG"8S!!"*>2KU(#8^;O\=q4eFgM"#`%m;`q7X_9`0"R6>`W7pG7cL^/7hbjb:RjfcD'-_Om(P&,cm%!?#W"eai7MZ2guYW*i@&dppPgAR6[*8'>X92JCfhB?Z8<=KPEDmp2O;F]>Z_[.:q\l::!#?#SqTe4[RmE<E:AN>ti"1\:/`U]U7D%L?>F_EF?mkV:U<aWAn!))536s/ob8;-.!L2[IVm4A-eG-0po<3[V/mJ^g.B\gUm!&F?#0@R/`Ko!`3Ce%TZ'%B&:"0G+E=i0SaLZ%D\ot&\Z2?)oW.t"TGJ\p46gf,+h?3^_/B/lXft8S9dd^C_R*s;"`W"ad'Z8-LIh9OI:sNgccB;qgJ$K74[SK.'K6ZI6WpdH29ISV%-`Vb!An`%IpB5/S&kS#8%8P)t,LRAihA0M5%3^X?d:*ofBdEeg_>kg.q>h8IUXe<7fb;]rd\`Ho=d<%.\EfI*GXZ`/U%LesR@mU$%qH'"tKcLP8Vmm7Fk#5Od\\(cr`-"m''n,AmXpe:N7QS"kAUk-=dYuI+(o/W1;!GO&>L\q(p1:q1[sfl*9e#pk;f>&'je&&&R%qi4%GP8aY9%(Qb.ouj-R3f)`/-pmq`.+1jkOmLGd"1.6cLGbB/>UIs\imDphdA<&lED9sI;+!>\=9HE8&=>3ol_<.TFAP1]g($^!/lF<%OD<(&&o0lWm/,aTmZa$;>B`(+h5iW1k&usbWn0%*UNOS;[A99L-i>eqA;#iXAT<5t!*Gj>`X_]rL0KA*)SHAs7?i>VD+fG.QT"+s%,78I!<eTGF5+uI^[I3[T*eulCBH^jgE,2NI#<%lCe*WO?=Q;Z*bcEg]RdR)FfmQ7JS4_iJ\lj*F)BE6^mJ8,Xn.)nXbXEBX2MQ\0%4#07@FS"^G*CherK4JSd?dmmWSF/HTMI!$DdkbNm@![9DFVhCH24\\#`KDqf86&(RlVX_bZY^$"U-o-]a>Xh/RQ."HoW8?m)6[?/%0]EiL,]b,r]gnIh729tKF6h'J*[;N+BBm_=L8l4%<tT$X_Y9ekjeQh(/6XDU@l+6f;k.7UeoQ.+2_^WQ`EdnIXHj"dY35F>8d8Z1%3B@mqmK?u*3s'7pN#O=k;)HKNb#;,d4gA$soK_,r0EP1\8?dk>_=<rj4dbhmNo$;4e`!DT7T\sc0H8tGr5ARGXD_\IG*L=*H)I#c%3pTYl$>>7okI]H@0Zm@*'T/15"dk29<=]G<WMqh+\R9K]0Y2ZY%5Cj/eo@,d<QMWd4<i1%[2?J;Y:?u43V'YE);J<,Z>[1!?mVfY%At>Fe[]5lm7;<N?/0Cp#9:a&rn"Fu9^qr@naJRNl/^o:[pm&6$R&2EBV<n`SVPRK\c6`s2j]eS#GsnOG^<k6GC/PhkhBR*'1];(R%`YX:/VCH@V'MQOSYa-_dlcYh6'Rf,bhh$i.V(RMj[&_n*B3@#>?oAo@2I6!?nJ1V#7T\JIhe`tN"7+?rR#Yn:Ol.d-">KYZ?ptpA%+q?W@lPl>d#c5aL^ZfkdjM6!UI?!OUH>I,^,JNIsBWZA,3;QUCcUNQO(oN_h`(R8dj]Srh#+XsrhU+>8T1q"4Zd+_8d\mqZWi:9u%)(O\+o_[fY#Ni(;,!ah^KBXp#m=W%Ol?+<G7q,Qq68.5]DC1hH:(^9tr((-EYNhAc.+_>.!JN[ZLYe^5"`r)fj&Ag^5#J8j<Y7':%1mV!I-:8\MBl3M&TX(KLPpQemF4=^;[0<neUSL_rG@7Gt.>*kQ5^G'.i\W/JM/MZjBd]l1<EUs.TlbLJ-*nSL]APYKf215O&/T?G%pK+R";baUs-_Jjf$%$?C\lmd02gV6#HtT*ql;49<o_r\GE$"#3<8ia;&X`-EB`H?SLIoWbeM)VO;q5j*pMJMmgP@QqWpSkIU!No;%IRM#X&FY/?RcfjX(s=&[=]Q2D)U"d">.%usL]8)f%C1"B;0o@&\O,+LLpdpT-o&B\$K^tBgaBfkc-C#DaeQ%u;Sf&S!pM5arq`H"%h!6JC\oE";JE\S:=L*"j_'Fj^^0HA8g4]=F+Qcq8$t.Xtd=shr#Rm1?O$RNljq_Vll78XpFYn!PeBLKPql,/IE`%$kbZ@JeSGaOu%6grn^$Rpi+(f\FD>Y=-5m89fEN>B+")U"dnITC;V1$kmh<e'H)9'?c<p3Md\9jsMUR0kW:-ddJ%EBXGF)Hs9>g4b!j9IND/IRT\C%8@:1JkKANqWr7sY!$OB9"giV6Q>)fK-2(.CA3Qm@EuITkCu#Gm/2Wp)jPjm&OS)a0a=B1!-X=r^TcLN7cPo-,[<*..s6eR8YmaP0%B;96cVQ7KnUa7i1r+2u_.S51*_e)X/N7pk?66cgp,@g]*2pO1g'Vp]s,Rjf2K+iW(-QrTNGu.,lFP3Joj,N!HF>,Q@gQ1e-U3%_O%$bJ<oau*iB]mcd\qY2$l`XVf*OOc2^44MV"'EG<R4qJIa.5uJNlJJ1^Q*3!P''4TMUVK1u=:P1\agGjJV#3DHUICNB\/M(RTsou`%6Q,n-F0hWu;612UP3@3ZY9QUF\Nt;)VJ+1u$8_Neaq6NbO;#?1G:4F4[URRVGuTM!jA4.BeVksY<#^1;pF/;NCmpc0jn5EO'CHQr%ehXgQc1<BdAUnk_!8CAP`OVdt@+DfT>!oK4>Cri4K0.5sJ-<LrX_$5ZRnX*n-J9q-f+Gb0!G`1MAD?:mNo1*R.B4b'oVe36I7_i=%'XA[up>oOgkV09-H&m88[$@8k9USh2Q*ni"-S(Q.ZWPbjkq(,X)Y?)]eHVFu>lKT):!^HiQnfgEjIF^74q'5&39crr-(8HuQIH7$%"B)BgO2G_*^kX'Eh)8EB";$CANG>hf^-%e>1)L)C(^d&\]k+uo9Nn!K=*Nm,>GBIuDn8;#^E<t-B!0c$Q+eK1PAt!^3OP]o9Ir!c%:HWW`_'S?!#-&2-al'%<dLX:7=\HTVOq41A0c<,AG?oe@G8^?KT-'rB$sl_J]SYQ:=`+:^4!)U5\CLLP<rP):TYo9>iXU&\<CXf^%+tj,#lONk59,B9>O)Kk?q)KiXDi`RO8X4nl/qZsNftj`dG/n*n83F,mX:Tt4EYV8+1?Mi)]RjiNF/q@Xo%e2/'rY_\J<Z;Fkr6MY%dgM1k-94W\Tb,[(Y$i\Yll7]X$EV<`5$@!5>Bf9iZtQ\3r!@#BZ7H+,?UjABd%%#ocrYVC:;Ip0l)$W93jWI,1i.]"i<\N$4eC"l%3#.4r*dX]V(!N9/Xajkq!p#r6#17!b%CWTV@indX?!oSi_<u&O5lf:kI+<QQp;UM&<[p8U%0FeZ[(_$$Trf.ea;n,8=GIg=BFA.=%OtqQ;)KE'#"qr#'!Qu)$?\NC%<il&@dBN\a3^iGoRL)ufNB$p.Z\:OsFbkKq<s>VBDD;^h).ZSOkLLf&*?f>,Q'\(tl\t$/.BaiB%pS>`()dXPZB8G;M,?0A$!cagPG@^IR^Vhm0!V>OJWNY.=>LnZ+0@jC!*71BHF?c)a?nMFeGC4MkO6SE?C[mTiNId`D"7,N-#I<Nj%=`rp`?r"/h/6TDH:fQPiK:U73m='e$0X!$5'/5?XRT5tA?I#$JVf,2'kqgnZdPHO/C=TFI>4YR(opF./3^RLfX2X2lljDDg:)u[q%Bn/RlFm7HP1CFSXP2NoO?U%5F)==F;?m5=10`tGa'pp$u?nJc;M83uIf"0;TASYhreFX(5%;bJ-:tNRi1'/8!l`uJ%CTPY%rT>a5%An+]QlDX*&BelGfCOE7X/o*4`lW$fK?t>8EY^6:&9kJLK%^duikU-S@[AaAZAOb/%j?$cH.<!p.+dpm4N7i>ie:=WKgje`1?nPSc%imr6ui\@36FW(`tHHbTWRh-(,a,GJtd1D*-D8)iRD\rghHH^'glT,$A`Jj6"Fo&9O1YPjLLKJ$]>9;2hY(u#]UqH]DfdK-YpEJli%SECR0b-$34FiTMu\R*=!L#LjInq^$d!)g's./SEH>@+liO8RNDY83+b1Z/EpAj041$BY3aZ/fjXn5TsV=`p=gA,I"Hl3$:G'!LSd%YE%tn@lsYU_K8<TFr03ara2U_L',tkRq^:303kifB,$So>&c0O>P1%EmAZW+[0fhq1hU1J'DiBHKJG6,iOP7u.nn49>k:#^\)SYV%QK2W5`C'54Nk4F9Kg]j%H3fI1>\-SL#o4)%`!7Z(c]WI_Eu$iR<X(FgoC,%&.0J#/_l#@b4.$ZA51J%XZ-JrbL]=@"h=9Cl--:i?%dO)3[l(?A,@?*a*bYb,DJJA.UeI:a[9_j0FiOWI"`@!s\l3Kj7WhMhX.mbgKXf%`N_NE^*;I=lajf";b#%(W_?&1gV!OMakJsGU2%QpqfCCmgl'OJX&-l>/n?Hms3=Nl_ZrJ][SlT&R2aHFrU*]Wl=m7RFlT?&,n`jm4aoUldYZ93D$jn%/'c]H@UjZP@$(aQRWHhN#^1%IatD>JS@G3I_N`c%QbT9dc=mF8YZKB>IpkCY)`e'$sS<dqpDQ-j`dSj1gA>13kgY_EX[r@8SQ"_;(tJ;^r_\&Q3eI1LYK*kD:Bm.%VmR&4D^q_P`Oju9HXI0mnNsIJo]'"c!4-KN8s0WJ1L,5BR(6a/kZh3$i^@(!+u%bp)HK@KK97hkD/K_emou/k"(YF[DQ?X79Ct28%UV^n\.J*"(b\1(Ict-hpB!pO70,A:rXB>S<[2jYO_AlW4O%_V@baopPk3l22=iJTX1QM[9F?fTe*OQ,+2mDGTR8IFfcJ\ruiN)s4%jt&hrX9#SP8p5X%kL97>HR@dE&QJp36(_u,7\5j=HaJXDIrCd@3,PBo<o%0+!J-f#KG+42-Ft:g(hO-*<-6FuMcDI-m+Il`C%Hl>%Vn7Ci>g"8`AG_RGHaIHU]-43(BXB<ECn.LA`42QLamQ?1c]'9C)kEVXi%bmYfrpY\1ZOZK?\=W1kVE*VU[t'*c+4Yula"05(=V?"%c"'uEX^`TqVXn'O0f*_NQ<orQHVL-r(2\_4DJ.ejecJVRId7[GdqW/8U-2^nLM2:=Z0iC>eaGZK&Rd1RiZ.%C.9i6RSJ`XpB=bn.%57FD=3Yd1MI\1]EHE3Eu,]12V41Cpq4p@>%jq]!nO9Xhir;A"GW[?Z#<V1F6&N*S#/U3Y>#?-W;_FTR>C'VJPWKaqVO>>j(V-4,$%J.)%;lEE)$CIGRJ'1Xo6G;<Q;lO%6NLQ^!;Fa-(GaHVTP/2G'.+Al0#H&8"NSo&dA,KoPW3eq:H'M-b*go4nNOqj(b2,q8HJ]NAJ%faZK:'(Z=6lNalYoEhC\#fX6Po.r)&W]!;V;Y's26(iIH+ot?h[\1,/rl,U_Cp9@o!`K8lU>\/2WtBrk`@@T:cE4Z8297uH7d_[-%2q_W]C$1Lm2)WXB&C!/>eP2cX((ceC>I3O:I!h9V%aCaF),lIa+tY;JHfflqBMt8#Sf!ipeQ-X)nQC/D=Qll(UVh11XIt9E"q.;A%Fh?q[_-3^J-neZ@),/RqWmE8*U0t!%;li1[/K*T;7CPW?!:soA1'#A2jF^8RmhKW(K5Hq&:R\UZ<3%IY(VAcV$V>(3XrMW0&2TcS%EME#m8VAPcB@9Cd!R_CLdaLX:^nmVL6&@UQ8Q)FRYbS]7AlXFP`(kYSPt?5uoIG*"=^Vf3BkpZQ0Z'$\FeI!TTt"@3=1TYg4JWf?%]R*rNcP>*Sjg:orM[U1%#O]!js23>aekl?npJ#(W?I/Ed']Q$.dHu1DJ>l^Hl_r<`^gL^$@4K`EF<`'-du!X8$`6rV*NL2P<%qma%[7S+G7pq$.4')6?F-lPp4'(f!81BP/[>Vb9E<,[1<mu86`&j?-VThh)rJ;TGC>*pO<jXZ8YX7.OosSR9NLu^cQr-acm[i%$)E\C0%)h1K\17LD)mIXqAWEN$6ElA=s9\!l`Y#@k]r'T"LqO_C,5gu5$!l!0\>d&)PS85g7lfT<XX6I4H(^H/n!;\mOHh1cZVMeY*Vok:/%Xe=EQja37T0<LtPj-9eFC,O8rPE\0u(tT/+-f$$J_J3sLhrGBe=d,_<7`?)HG&aWuDO8SW.\L&-<BaT;<3<$!?7^ON>a,NAiqH4-%8*jK,7:1h9$"i:)qq]t'_pF'pW"3cO(/")WJFTDZ7A^1u,?SI..P\o:AP4-OED';/Lq_T;eh]PtrWsU=G^9_O>^AhG;0<2BCpfS"%]?[L:a<<iKGA9-Q:)(K50u>tZ$<QO7)%r3dU]_]T*34rc"WlA,*0%7V:pUE',[?B#?iWR6#0OtX/Z?H<c(aYOaJ*W&gfOIH67i:<%\/M6dH+K7T+qD9E(^?-2YD(`P9B?0c#,oD1,CYhhl!W*-Wk9JVCF,9a[":d\:?`/;('28ZbVBB?1'%G%Pnf`_WGni9,\`L+@9P*N%0<&13O!%^^FfTXX$KY=A-E3WhO&^_CP;O?YK&6@;(.ptgH4h0q^e<T2l;]#s"^\J]`N!l%<(r#@L(7BMNAM8Z@FA,X?qUZ0ne*55%SkPc(7s:`Qjm3;Y_N@Cr?2.[()60(d)jQ.UJX7TQOeac![lDjm6:]n4[fkOGN.l/X9V8,Rc/0$0/Wk7]ZER<=90+?2bpqM^-2cU1%pG*S<%UJpASq/h(nBg3-4e]s+b(bSk=KBqUqX@l=#mt:d6*#f_&u?HVV6>Qs^f8M."(M;ElO2C,p(Z/>K!sMGohrK"0!C>Rq,@kH%E[4rro<m,@iEWu8SSbTo)?KG0eor9UpX,+W2L4sV\0CP0WDMCO;buY>qsPgZWI!csA[2HI6AKr<90BBo%uTuYUQDtKTJ]uS.'5UW%24!;hJ=0sAnWOP_W0VD)AO1X0@"&9fl:QV/oid4ClopURWFmRrEg1l/fH$YT33kEc"")-gNs_Go>\L^EXnQ4<-:#hX)M?JIXT-Xn%bO&@;53\/=s*_A0oUuDSVA#>(l#,\H_3@_"q]0b$,16EY+Mb:%c$#PWap(J7SH$-#?(GR%cS`>2i*boNCVE;U?'i#\1<ge467T)&%Ui+?B'!NKpp["Bbe0nDu5&sc(+_DI"AocMnNc6Q![?%11R&\DGfXJHL7@/p=ID605C<9$0;h'!Zhcq?$=kC>Z;dBEoB,7B,3NRHO%Q\/jLKu]DN^A>N@4]aj2*\b&KYjlM*"gcedBtn7seF[nV?1Ua$WTlQT>?sYt+PlD9DiS,r93J"T3<Y-#.WYWefaDc&^iVojBMdJ`%<#Vj6QbaZ/<aEDjBpAdO;X2A&,O,TMo_CMA.fKab:6"l[W0I:HEs`L*jZ'Y9?1D?oN-`EcAe5g?=S3s-85h;H;KW3j9I[<#<HVF:%;Zd+.C+=KnS_pSVr5e??fiU&*;R<CGYYl$3?G+hIQ19E/i`RjuHK>L4`E*T6X5nC[_YYb&c'O%?VR4ZTp'?W;aD;5ri<-/r7:8_t%GI?D9I,$T``#)<^DdWk[Uh<Qo!jelA#Z5a:*X;J6#Vpg-;&W,6H*D#hK-`?fBmlW"a_+U443]f?V7)ePWehNGBlsblVeu._A]pbA%ord1f'cZ3LjJF*t$KnY.pXuj)=g);UX!Y9kPj)csX9rQI`Wl7W=a]Ya1mOS+<-d]O/a'isFf*3!`$\Y))*\bh#S'9&H>:jXK#4HW%FJqf>^0P"Rd6c\`T^=F\_+'-5'E!GR[q@1oaA?9ApVX9,4F$)9nq[_!p=`f>Tg9^]BZ<7`@kA@G:HGfmA9B)J,0O](JD#HO;#.*R%E@*Mmm<H'iW@Q6s@jrXQfg6RZ6$GVN40Xmt91t7saaT"lq_!]8:Ysq"q*C7d:p0Sr?SA/][>F?=$k&#=(<mT<YV=@E.Ths4PS^K6%nh*"^U![B+XX@P.$.MSg^^LTY<DEWpiI<gr=[uQ%(C\$LF5Mf]Wqqa%eB8.c"lHOs_!I\of%[D"?)%IB\^gQ\o;NgU.DH!A.PU$i%F));OTY3*)r4Dp4d/^1!(D'GpiSp#X!AZ,YK.IBiR*GbJh`g5DN!me`7\/M3Du+-/rR2G^F!M=`bs3>;d?(?l00Hq%q(iFapQ>?o%JbGC<mE-6]<+H67gI':%*k"\HiF@EV(0$:,l`56h66p#]bErI$RQY"85mCj0X7C$5&R^=sYarJre#K9,13bS_PD_AA//iG8jpb^p%9F"$h?uE[c!^MEm&W<t^gc6dbRV(s)Y]sNkS4a7P3lRclaV8Ff/kr6X6R>BB`C^1^/d7VF2Za(m?LkJg25<K72:dOc^=Ir(XC@.C%BX9m;O?8hA$]#m(57bu:&-^L`Z#%%\VUI\;#/U!fV`mZjdsSX%e+uZ._H`>@b/taKW.<Ab(!FGCWCIT\Hh1lY7Kp#:_Zeedffia9%5d.rrSlp^O_.<8T&aJ/R0Va5oS<_7)1-QS!>i/\O;$!c$h9+:al&68VBPOjR,J.q>5V%0qe2a]2_\*\lW3s3J:Du[E?J]g!Sr*jh%e3X.\>5>+qB=ZoP,q@.%FIO>bhq+V?ah=9u,q;af5PM)R<ec=;HJWj7"m#!T#6RnE+07TO_,qNt,ZZDL@`sAm9"BERBhAF"meR$(%L'\H/3I)R]Hr0>JGauO@95&je53D[2UBP&_g*4Nn+6=,gAo)Vpe'J.^RMp#C95(!@*F9#=/f3a+N)89FeG2T=Vkg?.FM8UX2e;FM%15$OBbjAfL@46bQkL!e.%m#rDLXB$#ZZ?b-_jjr7N(>P<HM!^-7,-]4[D?$gTb.\_7q=:tf!+k;5g\OFK-X<_$;[ktI-B!<cB%3C%JAP0G,/E7lTS.FDg0R6*_h>Q1Y#fE^@?,^>Qsgs<-<[FdFQOF;bcN#@R4A#da7VD%6>03'0-LHMlu`K4O^9^F.+R@)o)`>m\P%P>%cFa]j@Y6Gn8[fQI]To.Y7p6g)/REScY.?/??3ak"[;iDRL]%mH#;c825O/HFWULXEPP]`"^62rAR4851F?iHH-(?2W&1><:ll8^b%&>dT[/d`pMB^#9_XMPSj@/$jNb#\(SKu&(%+mfg6I&_O!F]G"Y-n9?;TL9"jYaN9/96?h]QGOE)V?G%I^!HLlU'&rI[0oTGd&XJ/%d;nSN.I*pgG/pfiCrOL*bi#.'e#;TH'-*6B]'I\.ZOb^Bp!.K8:"2D-gCpb4'oZ<Z:iBf1</C7aN"'M.c$;#1:XfLCql[1i=eEj=%(fG6T:Tn$-?q(BcDU&8Mp)%_P<N4\#mi\E?qT(O;&/o[X*G_qk+6=k,@p1VpP6-Nf9.eqo/;=jgM.=`hXL7&@J(6>e25/=Apo(r]%Bt^7,9(JQN:.4^Q.CapH)\b0/AKRK7)+a-PTVb[;RNX2Fl-CcuU?S%C/'-?s[H^M]-3Nao-KM6[c;E)_n]X1h1H$YLOjo8c)kg[i%U!m1R)I&jbd4QA-@&cSo5ESMk0LGq/&8,VcMe-Tah+@YZ850;]PEeFMH*s42+WCS@18&ocp099rKA$V(9T8aW-ub92ocnN[gZ`jj%VI0T4V$<qX1M-]@EWNEq#"*[fM=/au_.%#b?Sh"&'>l)!6)I%4Lbb#<dJ)N5?<Q'Op7;j&I&-8*^<H.R[7#g+XP1lt.j5MK'ma%Z%mcSX44#>56Z?ZsK)-1(@S'+&-N)c1[j80i%E_2fcV+Cg0S)oi2i=[UBF/`[Qf\ro>/rOfKp3F`HYlZ[m>Cpp(9%Yg^>>kulmF*R`%\Q:p.o1ni(g")FDCu/=W*)K?K&WG7Z3]0`a9BK1s5E?*c=Z4V8G.-&I5:2eC6r+%hAmr9p9Zs5cosi4"@JPYT%;+/B1!0&0+8`Ql%7#QuDoha"X!J"\rLFOt]RiFkEcc:F<8]fsIs)=VBWL3^$G?,p1^:pmn%'k3%ku2nR+5YuZ8]Gu%0'Xk+3B8GGY&i]*]jilrU[e%K%o4)@,M-:';3&831cT#fq@((M$3NF/@*1<d-FYVH4g]0%h<RS-[HHaSts2a@rPND0cPuT$"?uel0^j><3WXHi]eWV/WLNK!$)9/HL%iF%Q/0Y2AF!!Z,XRCRgb>n<M;%*gPBF@%+O6/GbVRX&?WC-d,j43$5jLElEU&q*2E5+&N,_`[q#@%,;!OH\Al#EB3$:*sYKliEp$%$%jtOr!(V\`Z^^[)),S<RpfuAe:O]d,8/))T[n\8n/XRs47T"$Y/LeQZ<??Jb@63\8L>(d@PMs&qYng@^@!JA^d,/lZ+chQo3nnk%U![&KPC8#u1DI^PGngRF=bfq3G40sj!7g'g6U$I%[4(@%BS?Q-@`CumqW]\kRCaL&n:rTM(,P\l).o.V2\Q2Qg^4gT)8bQ-WW5=S%MjaIGrXC#KM]$89[Io4rUW8<NVn>m>>^@-tLO]gJNu?(uYlFi`a%ZC#EZPKAR`nUuQjLf//!CjXL&O7PP8Su,q7RCB=N^3q^$u!V%EHQM@bOh#X,BWAhg>[b5P9r'iXoo,G1>"+]IB7l;,#OfQ\@'L=94:JJFYt&h.-WHR.'$/SbsII/2DM93l7.i4/U4RM6B]`+``c/]%k4TqeQm#gtZKm,m^)f)ddHj_44D+GNbR(/e9`M*c!l\ZHs6T9IB:$XIH!Zcg@EE1<6P^I*&6MV<<6Rm\HYT!i3W/Ii/1*0K+][0H%-)8Z-Qq-`AJL.)7%'9H`gO5@/%(2K?"+b/AUT.sY)'g(oAoLem(2"Ft?++Le/M*&o13<E;kjtSAY9#L@V<52Am?l,):b.1s9P2-l%G]s,YR+^qZb$nu\OsO/f=NnuFC\pAZd::2/rBTn?;&CJNJ!\h-f_9@I:X&BsdIJNOdTrW*OshjXKH[,2%.2-i#dMbB0sc=D;./p]%@83r3=Cj4^[<7'3RcdkuW$"pgl1nDXe4''6M8]lue>_%eO3qA?#E1>g*kd#BQuOg'T$PAaB)Uojhf>*XnJE-AYW0iDh6RCT@Ve^5%bO('+UVR@s='Y+.1mi9R8eiFZE"-D]PVW755`a<#k4q_`J]2'[Yr-X-36^S;OfTIIN".Wt[k!*,fqcO01O`U135%As0LQr+^umPI%i4RTV%Tj]_?suJ?#ja"<lB5A!%%BWcRG1<?<"?ZQgJtUMYZT-5[h5Q"`4CJ1D+=]?QSI-$&A6!2$m2THG*Tn&j59630pofUi*=W/%"uEk]%1Fd->TM."qY-ohg#JB!C*I%?R+X^eo*7mF"uBrZ,RZk6>(7EL"(jj(QXL.]eDBA:b?ef\b`KYM0=-^t,Z*9-*3OI%g2tnf%Qe=SU'U\;Dq^2dV'R,sNM@X*=\]aJ9AkiM'(RV%(^!//`m:G?k`BA$E2/<Ft9.ZHF#qNUWkB#A#J/*]G;g>foLd#in5e>,='h&Uk%VaH?loEk]BJC,u'FGYFr82Jm;bA8k*2VJ[2Ym*m&LX`:?8agH7>t1Db..:QTbNMs>lh>!lFPRNbs1"*kLFf<a%`),Tenq\[`R8!\%-;m6u2[L7^9(0d#rot0Q!@^K@m_EX>K8l+X2J`D?m\'qMUG1M8FI#TO!n1FE#KeFqCg-h=]W.fL#1HjI6d$$"[T9q"KTaZnH/3T1%7m9sX"sC<Mo[1kr5`OmR7^JZQa$pWAcWFB:!#&%I)>Q-:o0A=FaJMP"I%uMP>0K7Hr8M)kRV3V.<!LQRem(%kLQ/BPbcB9a$mMlB%U[#lnF5%5]j_,Q=dCr8g8YbRXMSLd/lB%HY)bf7c7]O!4oV2)905Iij^au)@b8U6a0GdG$/@,h2je\*UP0Go;]OGP[6J4VMbNKkV%nu4"f17HD3r>+Oe8@hF1%%'Fgkpih7_N)*!kULk`C#qN7G.:V<f>7*FOfi`VTtF5rOg"?*kM?mtjK%)-?r+=7=!;^qngfsAP%5.u%<Ci*uj7*,H\Vq5gp>ih3pRl;@&kF^9A>HVd;@dAaOk(.8jA!hh/W8i]@s;@VPsod@_Rn@$<NOar3g[HPP1/q'P-,oR-4(QW"tj@V%82nd`b#\(DC@._Dpm+]t9bW-S1NBJ@REZSO`2pPQ^l5frXJ;uj3SWf'R'+c;R&6)_oj&EX7a.n.054nk6lkV-himt9hY!Xl(k:n#%0F^`sA0ZSD8#.IZ0^cg5Z0+MV6(3ttHK8tW)<f@Wb:A-I@kW>qo>%ZZ=gL6.p\Chr4)\0>:cDjLXd@pi.`V>kY^>sdrr],1L_!(;%"?jp)Wb3bb1b]A&I-+V`%Q[O(kD2de@eUZ$%V]#W;;GCYk05@F?6H;c^(RD:D0ed#k4/IXqH92bUi4mJ+-VH<M\m8Sh+%ac^9D++%_R.MU`NIaof.=9:5RK$2T$D^n<Bj\n]G]$'(R/*!]?WoLG"2Gc9#fu`'^&s[I4N1PCBnph`76J#jmGqB-sRK3NWQ*P6l:L8?n.2I%a@<RRpX3>e1!W`1Qj]mOG$I8II'Hr3.gU5[K+\8QbQW%a"'3)a0KDHhPR?0?"pg2N+`i1ujC!Z;I8&+EcpEprd;[_Qge,!`9Z!*8%Z-Ebdf\ohJLP**N)a%2<X]qaG@.BmR9D3&H$8uFur-iAH(ti-.$Zk%jM4`^1QkRDM$>Bc`L@E5W7T%u_0U;IX4@7R%e&T64V;M*\%2-b&H1[B*<"pOS!=4YKe;iOVqLOG:@!^.11CIqL3=,1IXqfueoaq2;Jo?7JYpYf:DY6`/Odjr6+Y#5s,fm6'4FD\g:=B;`r.tF?M%h"6CDV/HTLBh*c)j^UZ=QR&QX?3*s1hcr)1/mpFt12;p#CL5s&RMo85TI1c7%oVVq?FH^U:SlcZ3Gg86e)^:a`b[?P^o$OLQkQ*h%puf7@)c*pEkATREOr_G#PSUfV2AX7Ag9ZRS#?H:8?jbT!:Us[[bgH]BS<LHJ!4gqG85bh/3MPcj9\`+R'WD7OEN.U7=C#fb`f]*_%6W&;$=)/VJHFs>G:U1<BPh>%n.&j^9=(L:+H?/D`U&`N*nN7SnPT@SThn,H>@ZRk?ITKt/hOLf2LdW]$ZPgO4eD+C_U2A]0_Oss1%PlVDW/2MLtl2U/H7UVe3p5+e#9k*Fc]Ub,*:L&Bu97)pTRsY'HP(5!<DClu['O+`K3ul1=dfA.Pg_lBN[SYX9-$QlQ%LL.1*/n.A%q8*D%mF@q4^/U+gOKu!_61fL<)SjiG#I?>pejI$BNq0<IUG0lWels=$"K&3+PFZW#,L\/YXjaT\o.@>pF8,8dBDX(^mIU_ZdMX6/%UC%cPAu:@;;QjGsdIj@>2:#X3H,!&:r\.ng^om0a^l19Q^:o<P2he!S[X@h@Yo#0;S<fmZ=gg<[@0,g_9-`?M@=!H8DA['"WS\G;%%nN]XA\MnIm.D\6;%>_aa*JtP@Fak=kB$WDbo_4F@l;Qs!d6="MXF/B=KK/uBOXn8R%U=ECfpj=*MQmf)rJN^Y?iiaH*aK\Vm:Wo%oP#`^7Y'DK8-*L@ZF0RY>4ejEh6p<RdBfK7<["sFkQb#n/qm(T'c/;:f?!1,=b.-WB(OO[;e&c)M)SN#;:j\tFV3*s1UG;(jF6-n%#:?bdm$cUg4>XS!$?bF3HWKd>ebt:d.%'k]eD&08*_cNIlLMW[3aHD*!Q^44EMD76>=k64ZkS.a&d+gJ0[A&pLi:b87)XV?Y>u/\%oZcd_V*FVOXaeY9q.b6k8ai60,W<V[;FR>4:,t`pSWVa&V*3QL,Kk!ZeZ4u3W=5DF+,n=6F:d(FokKbJ.]:umakOV1DE<l=20G's%LVN9d1"-Z5n]&7HoW.3qSHiO=[up[<I'PkK3+?e5Q;]Q[>uRisX/^BXXWQ8dl:1gU9Ef2X[\E/oW@>RTVXArsn1k892m($pJCHtm%eo7p>WrAtXoKJ/X?tR@BTCqr+:'#.!I5Q\^.C_bE?Ab`FoqC<hM(8RM+%QkK/]N*^W40[lUD$d)/MQp).c=l3(Q9H0Yut&2%7P*s%%DDdqbm:+k[1\"t?pblc>YR"S(KI[ulIAhB`7/-B\AOb9"Yoj6?qrX'Zrk4+)gWBIZbh\V<sM[<HC??qfmP@uSlYE'ArPP4G$lAe%&lMC]+Y_B%Y)usC$g;]6C[QV7_,4l9d.8:H_3D.#"9,rY:cM?$;KU&_k%$B(;<Uhue8(o^9R\dgpE$qW0_ML2d!nQU^G2HiXjh,4%4=%"WC_b%l7/:Rg!@t>$RqjO<Ma]8a)"gg!>;.hM<X4h6$l@k`#IcJKK*(PqP@uSK1\CQK4rGKVm^Q6B.glG:<@Lr3,0(I/gGG6n%n[k;epqB9\(P-ujmg3WMb+l)&.";fYW)k#0c5\cbO"s;ZN,;1)6FWn)QgZOrCZqBN'USsQcqI'0lFk@=(ck97BS/n4=116=ppGYp%G"YD*][Y_FTYc8ZE]odg&(:qnard!k&Q!4WHKq?h^9iWl\1e:g^KT%^dI4pdYZ=jj=6e=K*eK!UZb%%9]_>A_n\,B0_-4$nK]nci%0!?Z3\PX/N7)<'EKIi'ihIU@n?f975bY0?MD^r=4R!K7hTL,?"%s&<FMX'lK/63Hb?r^?A$DrE_4rn'FJD&8q=sU5f(P\X=8EZ&k%<>Z(oEGsOnA%i]F3?qBdMP03"P<.]MQ.!9.2t&kr>Ul:d`l`-Lolo5<63DV+#1@mFS9<u-8eGCQTiC,[lTfBm1(FH1HUc@Tb774.%m-3k+%]+j=@Hm`^Si=76dfG]D$d7kWONTg0>N%l^VfrKV_h7lPX'U^51YA7mo6Zhf4Ij>^/&>DFO=PI)?t0DHcl?^6&b9.YG<pMd%.B<-t$^qB16B9MiH5YcO'=+6M2m=&EA35tL?s*Z#^e5USCkW4ABC%aJ+TZcM(Vs-\Wd<tpGieEem!^u)3CdLue>EtHGq\T+2V+_p%cFolZ+Vg.A>P_H0=]DQsHh?aS$jA0<gP]F2FKTCKN]WUPiVIY.W<LK)_jk]2csZG0FW6<]*Z2'udJWI&oHeWRN>'liQc=JZ=nfas%(Q\+PFVgpXZJMl)irE"u>lWOAc@`Zl_0dj^3LDS_]'tG0pS.$]N==8-\$4)nPU7L@:\u*T2,=bC0RU[K5*30bS*0OqC"A,dSr]jY%Y1Ia-@c+f)rLo%6r=#(R^3WiS?BApIRUXV;Hr[G;@2FBO_H]D"p:fgK>)Js<*o?K4UFA7@LJKB&dR'(o,uTeI3<]g1^2"F[6olUk%1AlCY3\dhB="M@CWA(G=rDV$J=UIFnn+G3OiE'UoMAZJmKJ_>(m_k-s3\q"0R07TeAi=)b"?7;g<&;@nGi-3Yo%hSAga@4F;h^d)%LmlHkF7C1b;XX-^42#%h4?[U.WJ;*HoeaCFH=Din9mPu?j^\ABH>Y=*V\Pih3O=;]NQO'Sb[6a7(WFf2<i$ll@foXWZ_@tHBum;J%VsHH#`2TCoJDE@a$9]mFXA$6bBl45hCg\aTM0/aOl9Q?:e(etp=jU^%V?TH)'T$H@V^Q%n.g#r/)`V4W_t$LqoGE.0alR">BSFe7%VO0IZ6uW!)^l/b2D=<)p*LK#o='_jBASic\hG@Kb%/ZtSNV0b'[8Kq8l=l:U?p+EUmc>i"rW1(\>7D^Ol'\oYq(=AoV2('kGsm^A%(>+$FDWId*^2)NGU[[Rg::!7*R-/O*GCqoJ(sLpR>Zo`?K.58.//T^mC7RFA]2m020Qjk@8k'W@kV*_.HUhME%1]pP5Kj<c=M*kW%S'_:MhJVK#TY%,`pq1*u)9a]s=Ohc77bk5OA"<i/<J"AhB<D>"6)p^jU6WCPo7RKtK3APEDsl\UXfNle?$t,/">_qE2*nBO=CMBd%+dF3,"&%U@Oi\e`K-`F7EN8_N.pE_-/SicC/?scg8%MZ-lLg5..o(XA2F*M!lhk'uK/01/%$\HE0WE;h6W\;C6!_nE_%IaacP$:0%d/b8q2jmGl.5.pZf79k#ch-PFY?S(_7R%T\(WS]l.+OoT(V,l8"p;?2bR\=?S[mMgGlp]]d!RH)Lq]e7J[@F!;(s<FLGO-W)B%]_%8I&2$/m-!.q.%5R*pCR,^[J0.`!GrR2bGd-%p/m!00>26FH++?"U?*X8;r'JeH)!1\<hk%'A(d1#>8`<n2>:m?jR;0=5*pXVfK]s%2!<C&SJVVc%6cI5K=UZe$SjQC<el>3UnIT=*n1qmR3Z3k]c-HL#n9S1VniP&cuAI%c[?B?G*;_$gP&JO]AI#8p'46$O:sD+_@daS%TAA\2\Tu@(s4IpnXa2bf?aRh^Q_atN!$uCeQH4$cOs5u52&$6e9bU4oh/I`kR8kp'&QB1q<Hidj@*lnTCG\ISGdHTUbfE\7,qt]X%f2E9:&tksL!Z;lYT;aH);@#W3pYT=KA5G[q/jL;B%(0m9/=q_-f2"7D9JtYbT!p?C;iuY0nuT<p$r>6D.+)k86jE=BZ4''>L9M%d%e)Xnn%.mbJ4_A8aJp,.j!d(f+$t's*!`BTE*snuU"pW"+atEDTje'sQXeZ"`j.",?fZ/e%/==TULk:kN#M@NJH_*eZ+EVGV&ge)4%];'.6P'k_YEsJbf(bg0]kaIb)-CCJ-rKGTuJ1Rhp^St!_L%rL<5o^s6(B+XkcP?Xf14';&<CQpd`<B2b'Wm_KeUcf#+UPL$Tp;rW%hl!@VA@2_t)/#k`=rQ-DdF:G'X3hnr8#4?XZ@Wr.:pqfa4YTOn.,_1Q[<7&1JmIR.2RtU!N&e)`a@k4\Fm=WF<dkYIM'*"a('-ZP%e]ud>M;/]G:>mLN)&0ZB:j!mD5ln(+9_)2Y+6=pajoe</!O$6.o4\!88+HZHY*d!M+#*e-UClH?0IKdr5cS6Q0KhD,$$.-DN07[0%@EqW-g(dHcjeX?biNKQc#Z$jB-U=H]IjoS`*B=]c"kL7OX2"*A(Vn=J5;FaLH;q):(_%h!IRogOZbGF6!*2I+@)`@,X/b=jB"J+Y%X-5,q'hpf$Z-#&q4c98I-)($!BM`tG1%PLH8q\*aH/aA=&H_[<hbT,(.!\fGj&Ib,70Td*cbPJI@!*uCS4(^7S$crM2>bjn#HLp6%-S0@&OIl&L_ZID\1W$k6(/k$7B4BmAjhq7eV/s9U$N4lU!R.4`[>%qg0Z9f<9%W,EZ0UWm(1d`RPI/oi/PM[B"pM4D/q9k%15LK6%>h/_f$ju4=Q#YeF94ApCA3Rg<$L#kP&K+9?'6NPt&eASN!%T4eGEsm23d=(fHY6I_TpPNNmN""rYk(K3&gp2!YM+)+M$gmc'r#?g%FLu]7=Y/KZ]\60Uj#6t(W5*^X#nFu37YO'&(bkLqj9AEE%"?9R.cIANbYjMjj&\6n0k+,G5@IbM/LO@bgq+'+a,?eg^B\M>3Do7k%)%?[@=Qo'A5_EcFdJk]=OA2%tdka>#_%IT\_:>.p'c?fB<>T93+e^)_@7Hq']r0U&m/]jjk^TiHSr/XrZg'T_)5E+m+*QJ[)2U&c%0MbFub7Y-/bU9Dr@#5<Z4jrP%7()G`Vp5@8Va?qM-6PPd(tc&mU.qu2aM<P7p4;G4PMi/G>,Lar7OBgeo7J>ETS8R0$L,@AT\</3%s&2df[9q2+n_>"IdrG_ABBf&3o&\RWTPWga:0"8;,6S9RD2QP]T&M/OUVV7h"9^-RZ&J$q:>T0"/VEbKZH,)cT*&L+aVFJ4)V./V%4<^9HK$'MgAYmRbc>1Ja0U"6te)i)F#_k@-If3O+^iWE;Asq=dWt#fll;KQFAbq'pDX0O27D::jR<*luZZV.S1U%oor>EP"B-glb%-]paF[g!dX8hj#^+T>SSCgc\Kcj6e7(RStC>/DScpZdWe<A]P;Xc'Dncuk(p<Yo/`[cL`:O*gLlnS%,$]mkGMa>&aMb<Nfa0OJ:B%P=tf740\M'+L$5OUoU:]&7R7,Hna.a"Ii1J^33gEKUn%&pP)Q;.KFm+j\"Ng:@p!F5t3'IC8OH,GjEV4K'IFa`.BFkgn&dh,KMTu%ark0LUTk<+]aSB%Vd<)ePYi;dZ*-u5?g'5'arm9]!d.l\caOY6`B_#XTZ(3C"7HmX"sgh(N"3q!$YAe^SYr"=S(a@2dr@oTnhI(l%,I@cS[g[TB-.;RWXkhAF?PRlqO22i'T=d8i^m'12a':ca@!^"hG@&][03KKO1?bIaa9n=.[&dl)als(kVni5RQ/K8/.F[X`*_:2e%1ttZc'$Pj"m='p,cP%b<VVh(q8@^=Ji^X:D?k+k7.:6hC0D(X6;tO!NE?N5d:oLSF))1H"a8DbO4BRQaTQT]M1mn572"A`k!R,C/%Er&5DJ)SF%-\FYV>ItF"s0"o>mkJ;VP95irs%-GQa%W%uT;+(Mjq\F7J<N:>eK(E8ngA\8L-Rq?C'A1h#<dh));g!CH$S5_TWq8>%-1f3][O=]8'*5/>\9k_+p`5kO..in/=7lCEc*2?%onqW+`H7G\MLd&j_2im6MI+?]iamhR@bX_&[6P'2@dd,;SR?mK(Pm+g"*8a)%Q@eD=YIMd6.e2$.*B+`pR(,qVis_;in@2G^./Jig_51<,5%@X^/tGOl0[>"L6Y>QurC!(aD!N^+LW3JVG&`c9g*lt(0\p<Ej>c7D%-o)L*[I/h]*13!l/3\@pQWTa!I[YobGm75U@KCJG.uuV'R9.#apC,Z+kq:GfI?a8/-o+`5ki^=M^^.O%'R]?db@#Tn#-@8t[WtuM%'I<iT4n9r5@/bXaB=DYPQ5oQF3:G3Q,Cq/B>.)(Z>s`$/U]uGOR6*5d$oZPKa"TDR]KI"EN*KB'F"eE*l&Mq#BCG\!R4C'K_@ZAO%N)kg#Y/YCG+cAp%_XNhQED,FK,0-XN,h!Q6iS5Li^+pPAGR`.R@JJ!HoZ@l6^+uheYb&QaF-j)\D6+RCO4<5)7U2+q:"FmZ<6@=?%=kb)RZLG0.^610tAI?1"Wgp*JB\+E>*BS]WUK&bD*m7drUBk+68i+3=Ks;%=5;A-B#gT3hJ?nX@`pAOZo]6CM-$i8*-i/^+;IC?b%aFbmFJ1=Zd_d5bdMbssigknsNcb0?%4?.m-HO&VTaX3uViCcdm<*s16jEDK#g:aST/-?-um&e&Z(9\Z>_d<TmV[0DT(sLq5FO$$l%I5e7$U/lYo[M+j[PdTWS0q"0WPgrG-.@M"(gVj+2C_==aYDV*9:b3c+Y+jDQ7^=Z9R!IY:36gBN`N9>3Mcp$_*g[(![/qSU4F+k1%A=6X-(D*bf3I?&0"VBd$/AP`j\A9&#1K]>OGq3LrhTFX-o7.`M&QWE=G%4R=Q:[M%"@*r>"T"5`7*l"]ZOh;n_%iOtR%oqS5rM6C%W3s9U.i@BR>B@:I^0aAEcL>D'[1<ghQ42P\:C,hq5u,CdUQuR`QP07D37$M"QPYud2^ZsW4ou:MS\QK&%QAWeq$^kXO_+]M1YLDU%aFNndZ+g[?T,Xk/!Q$3;e3!adTYXGXQ9dd)j>cU^(u#KX4D6G4Mb4<n-8YdbnJoWE.*"R("E1N"%1Um=k?J>Q6R*+-LO$]).)W%M%o')a?Q7F,T&;0>bYqN3SK16QKn2UoTfGg>h7O-9B$'=JUX`Z=*^^."Y/@N4#=3r[A@LO&25j"05Ci&ntYAg;RgG&cI%5,8XTqgSe%'%&OP)pac.#:.T'.iAbV40(K\BES:V&;^U%p/YR#s1iki<:S(3:HN&4_=G;3Lbp68%gJFR+gfqld>[n7)a&bH+N$q"F90f4^mVP+%GuO=Kc*51D=%JnYM95B)!hTZoP/S+lS5KA@9RF7!iJk87Ttk4r2C!_heDNeWHlqV#iA<]]FK\q3/8DCJ4nEI_d'CXr20("YLbkLu%o#W,F)u-E;>6GK`(CXDA^F?)J"m+UPEb.@cEK?l1pWKJCFmic1g1t$Q),<%k`1DFOV(Z%fR)F;U";%aT9P5UA",nX\MrX:K>2`M7%NGZ%D!?q*nGMBd7WZ'BjE6kt_G<+.q^1Q#1+41K"CaE>eD%d4F8h87t1H/Ef&;520j-D"mNYWDa<_NK=?Ju'XTh#&b_G%"%0aGY*%#']%i9E?@+M[OO=jD)=cRnu1F"/NPhf5[t:;Fn4GZV?'iXG*VR2T`LiWa.[P7.'t++</ib?M5j$287OOeE?C+KSGWFW6Zm>!:n!^%kHj&nWKS):;O>`n#@p<44J$29/<sX&h0OZ'Z!<d;%62h'H=+0"'+No@SR6Gm*D=L9G"(*SEQ88nnh2]#b)E"GQJ24p)dHgC&e<Uj%"KgT-LS]2X'>tY4>dCOm>m4P%D/BPiqlg_-C<+'=k1"&<e#Nu7Zo`C^IN9`9H1^msDO(<t7iu@+55PcYGocun$\ii)T9[VP0k'gc%S@Q/n8[e6%];8m@`q,^$LD-X5(7SI]:%\]pG_GSQ:VY(TfO+07=<n=e.::r0N!HK*.`[J1[3(Us*j;^#d"&(&o.J'7`XRrIm,4_$%U&eZ3`jb<eJWUfVgc;<6fV=,aG/#q)L<S)1nQLpH^:]7rYFs.R<0k/\2&XHJ),$nUrrB#`'NdQpea8JEd"YAI&/ju`hS1GnO''+:%RFQHu\5n[K[MVE/S9T!9+@[(Q-\ie'DT<r0FpS5GmYHYl*;`:&`=#b_)1_QPQ'ci.]buop@VOT5%hMY@JJKcG_=.t5`'$lQ>\+qH%R(8fAW7r:_TQP9mcj=AW'3g)GU.`)M)N5f6``*B=BmUfigt6=JIdr\-SX<Lq#k>n?JJ`-/IPAB,&5%"eB^]BH;mJo($u^i_<rgSW%4%cF+1]tZS6(f`_J9W=FA>'%2;3$gM]m=nWiY6jDF$Xg@$?"G,jE?/nQO"S9bm22,5`+]%]t3m8WsWp5\/`Yh(&S4ZF(PtJJjPO9%iCLW`Yu:d3q<AJ0cmX`om2[m4N4s6'4#q+/UVtqO"ZL[\.'u6T+p4P>X^&V#`XEg)#TK1<Nj+/`m_Ql:)mf9s5hF0ZWQu<8QG/X%%^+KI=+>)<P"3mbkU4>\*OYCNm^`K*(d)O03F>mk`(4kUN!4#:6+1?+V^h'@h7.@B$+cfmTYj<;s-ssU'I*'o$BPbV!C9QIO$jD%G%.G`#IN%cJ.b'EA!,Kr]U/aF-d+:L/;SpiALC;'>T(,u@`M7?BupTq"LJmJe==^<aY'B-gsqY\h)I@*4s_!el&T/1=E;Xd9NTB7fP%f^eL03Gg)ed&ECSpGMrF)T!mt=/T=j<,FTN-!)H[O]LD?c>f]j5ZGPOlh??7>NXLO!+Tb7i6(Lj6`RhmXQ\h[g9j:Z(Aj[(d]-62%k,?ShV[YWhcB'.P,h"7L\"3CeeC7JCb+*c=1^Uds]GgLj:k<<p^WYW=eF;G"4b'3n0a].Q?LH<Fd$RV625`19bmRI2?LH<G:a2]U%=`*"L9m=&RWX=4Ik7!2fJ\-@cm8d($8'L:BL&/:dHBtT47%QZo^jI"Wr20]t](]u-W/)6Hq:Z%8$s1Eq3k]`(BCCY.<17/_`-nUZ%NjOZIA2dT@9RcdHQB2IiBH'`4=EXjP`B"WbBW<g<B`k$!*)quQ;ef-ILMFBf%=upq<7,oV>1@AU3+AN+6@IO:5pbPOS5F(Y;S@RF%Q:K1AA8;A!TR3QhQ[KQIXKL0cO(:.82=>NFaBWmZ3"Ht1)QY`Pk#Q[/6Z)!S-n,\6dt(-ZHb4ISej-Y=l"\sa$\K*[0Q3K/$.Li,%]mV6IdsNp)m!GnTK>oIl4_XYO9>*]g't"oqGlc!p?L8#>O8p"1:PpZO9@\F:CkR*UVW$=g$Is#O7nT(X<+>9_A='C+"/=PPG0;V1%M97VKM:.gc5R+2aX+@U$1MT4SW\/8Zjd3s`ec)g@&Kp)hC(m`;$b&Hh?gT*Q=2E2/moJ=[f5?m3pJ23!l3:,T<[WfR%A;hTeaglT%BA)KLXYCXU!>4icT`I4U;+G*B]'D'YDigFCM/cFBAd]Vt2=un[5q^[Seb=-M*f(0")MBES]p]N<f%EP'Mr3Fu0lOH>h8'4>2`ock%8H9B9e?Cb_mKUoK<+jZc&jQT5cdn;>!/Se+>,?ZD3Ju4f78)00j++^@C;'&kOP1ABSuYA.AH?Drf3,dl'7g-$1K>ZEf1"2`d*eYC%Z(8g*;2^%?^T*"%*WdL:aj]"=<.JY/X"S<SJf?87m]HJ2(5`5]9NIoMIulqWokK;p@s2?pFFhq%2ru%kePrs41HcIDX&8h@kC#c>%$F.<@aF\hm`#:N-:$r$-.hr;>Zj!\Q7ck\V0K"[5[n$\XBS3*5-V!a+s%oWPE+897=(4R0Yo,YM!JoC;BFe.)\A8blhr7.Ng'j'V%,9Ff=50/7B)j)h[(/`SV&H,<mhtb%p7.FIq%T@HMOo.D*MTrbVU%p94a;)Q!@'mpK3nJZ'Y8@U+YI:Kf78(312.E=k4;Q!R>I9[S%*g4<p2Nf)`.umSiJnT5-k@tboOe6`',;0^dp@l,+WSJ#L&H<LJLCk/O'h1tnhD?)?h^?*,s6VW7^IA+ClCL6D^r6nkRP#^.f9;QH%#MLRq6mQ!a!?qPN;2d[3O_B9'`^J,Qd&XYN:8VY)Opb<tfh+t8@Q^srY!IR=K+/ume]=fB6O17Z0Q:ljQ`b'Y\bi4$Rf[c7Rbdf1%.dB<Rji@4KOb>j@=5#-H+%Zd715D<B@YPf2-to$i#Xf2.9JtHT#*g(XZ93,T6WXPFb6Qf*+[@<hla]S#J4(f*kuPOGb`[clWjt$#%a9$X:"?r/^70F6]cc5$rLa@r\BPD9JZ@@F#Ef27l<Qc)+0RJWXd1rkJ;[X1.#t//ZrWFF*,i3"R#P5>$Jk1rj@1,JV]Mb_H5/!V%%,fZW/NaO4^5Lg$J]Xn6IB*d.BEOlBT!I:BXo?@3'^_NBgQL<KdBQ8MV8*sdmGR!K@VksY@YJ+\JRC!cdNt=pU/5"h/k3:+K(r.Z#%VcRj;!,Dj+M_<1L]>6;UVebHC!boB+CRaF*JS:p=VjhsH8ZI\67R[a&`tleK;^aTW,29%n-!^g$H<jat_LSU\>,`h12%klM@e.(u%UR_YnXru^+_?m1%!a\Sr)\e)A]q9(_LEN=KVsa1`+KLeFe_OMTJ`sOD3a9qp/7emT^YWIi;Z!^TO`K185YU[RN=GH9#`Q;V0GLZ?%I-?P5s""NR):K^YaBf7]?8<Xk^A.#cI_3E6@bB\S6dIS[Y=IM+#sf[Pg#C9>`a5<o5iUQD&SI&6<%<!<rtXVU.uJBX;l;2_7.u,%%eLO&M"g49.dDcQ:*4n6\Yf4u+Sl#NI<I!m#Dnmmd(:Yn"@qeD;Xn`L0:l3OAKK6&_Z!NLbV__]Y(#&>LXK_L0+N7-9?t9eWi0>d`%mMNR7+:oT<`Lb*f90GW)?Gdk\)$Z6!Y2ag@347IJoh%'Cqgf?k9g*QWSa>H8bF2/E/ZK"E=HN70b*,I(j_N^!3su*7=A2rJ(du,F%dk]J["cN^B?O9@_G>7#dem;a;'id_NHSo[i`^cjdjOLNhJ3r1O#ol3PQ8KhMNF@AMC*XWsne.K'207lo,=l/(g,4GUAftOEH::1-%i=>e)bEF>glB3ir14fmo!a3,l3+^uP^^)_G%:p$D*LCYb^!b!d``bcuX!J&iN$op2db#,rs2(kd$5c&uU06pG#pc4qPZ]nS"@eK`%k3`NlmI`kter3cC[jAfq11Kf[@in:Z-87BA![Gd"LHM0S6p"RnFYt_%!$fRdVrq0hW?fQdV_KM0X`]Wl\Mblf@Z9A'1<)lD\!M%R%hj8@C`1Rq.#UQ*3OVouqB`459S.77ZHM@Za*JS:IStTHKPG,n[=jS\-*eIG;q_5q=5XU\rLfU!nBYq%j0*;jCA!C%%9XuiWH[mq(%%VeY@`h;SFM%iL6d1kf,;+m$Uq.$2LPS`nJ#br9ck*99UR7p*mH_^_)!$fk^l[[d'L/tSn!3D/;Ks(!qR1I,k[8^PRAPn%ZI;E!e%37ZSfVBUsgDU7E@0/6tmPD8S9s,O/s'k&r'CJ,@,9mj=M:Br]n'0^Kg&W@"Eb,-Th_A^lgEU2Im2qs^5)ECGZ!n"Sp#QWtQo_q@e%bWWGRC(r23f,uo(DM(=oJLf>njZ@c*2+F.l`+W:h-s\#EDP'?Bq@%=MTeh!)Rbuu6"SJ*#%c#*BH.#>LQq]4glsu1`,LG]s,q'Ea%7a0W.dq_>gNMdR/o4T)(1M554Wmb]NQq"7?4c9*U)X`sO7%O3"(&<QclF3\EMPZ"P@o&2_VW#Y`V7P?QV4m&NS;omh_#'B9#ng[B%"Am]k3ca_L4Q!>eZ^ZlgR>HfA`JM)i8b#_E6;4Eq^,AN<&W!HH6/FY:*VAc)Y4Ym;,a<7kn)r50k(78(Fto$no<;Z6?%`5UAs>PJ%2*lc4Zf4XdS(PYeJdRtnDl''i8OM;%V&ujsDh')Yls^D>IqA")[+T"[ne6An7=SJCmd4^?6*!nR&U;R`',e?CnjUm[VqI30OjLS'%+GLj;WFd%oc:E&p,1D(\)(Baq]b'RJZpViS0s1d<%<bcYh\FE?dL*N$_^e$i9LEk_0DZ#?"+g&a%c"-.,t3t;T/G@PrcWo.YkB._%cj7:i'HqU9nQM`AZD3;%Es3#<*E7?0jTsU<7=,,J<YAdXk5u?3Uu#"APHbX4#ZU[In$^aY\/,Y&&4C>tDN(LW!@-$k><]^fkkf+H%6K%3Z34^\d,YuloGSV-YVQW]aU0Cu*J4[-s9YFp+IAE&W+MJ8IeN&\r_$DpH13O<?p7i\CL5*$A1elR7CXa-F]k4H&j!\lW=Vhd&%&n4,$H6Xcin;?iK`LN>=Yt"P93VS*;jFa_UI2jR^OtbV5E47ih[#U1%-\t*_)S!SNV3PrA+=SW(MP580(LGs-K0/np2A0ccmq%.H%W3gaMheb"lKdTNO'fZL&S,$6rZFJ[<N-`m)nu?Au"MX#"lJXcIE0\)Sh9fh<3liGd6^"jg,D:RDE3rIH5Fe!Q1/od31pKO)=9P*I%fUE0k6DXFR_[3fN*n[3^jdQf3CLlouFb[MdoY-?OO0DoN"D4o-KFhuP,SnsOMr&<),c.d+EY>.6@A7"-@p`Xu,)oLqbdBiE<pCoh%Z]]=2gGVX]Q)g5--/O&!ddNB6H:qMf7Lak[B.2rO`3@[O10ZN>iE+(=:hmHor&'.5_`K2>a0GVZa<oAV;78>C+>l/_n-1,]?rT2]%B-R8\:7FB\38eK:8Nkm2@YABXY[.8G7uXfH!Un;kH@c`?<e!^Y'%YJT.<(i!T,pjA+Vl&)>_Ep<m7=b53\Q!qARpL[n!GR.RduR,%hn<s=&r\6F?8\o`*+bE_pUrQF"=Pd-kmX3@pScH30[nEOnVX.T>>7'_>^8?TLbdC>*9TMGi#n0#F*WNsc3Q0,T?kE:63<'JKbio[%&Otc=kK6F8*#W08\(<*K8@B7WYduPU9ZIRc:OpMCU&bSUX66]UPr'fUpVMEl713FRPiq\>3,DjM?[ZO;<'d?m\a+pdG#jdC]U-3m%+;A78lh"(8CiUgF9mc1?;07UK;W5j.0I%=df*f6`OdR=H7N.kH32t<`E5@]CI)r`l-cU6b)Y;A?_:k6%BWl\77`:[S3`:FQ&]pc_%,k%!tifJ&WPnj?]MPk%HT,q)A$+#+A(_K5PWGUc<+(6uOWRW"5L>B="M7scf`?e5X8Z/t-=u#BceT$aeM,@(_FtZZB5m!!E@s;oc%,ULjt41.sVSRMCJJP"K,8:Zh1D67Z-fXD,k\OG*UN\7BnDXDTQ81]m&m`I_[kY)@_EhuUG-AV]1`4t*mKe9-YQo'+0gI,Ze78rck%3@H0bVH/J$h%M"pQS^DVP(8i-OG<72`gBVd5W5*F^Wa%&ROhIujr#mCS@&9=`-o9pMpJ2q<\h_(\,o'6<I5pFKB_R2e')tH<7ht!%<;OaY3163m4H?5^S8J0j/=/eNgQR>AjQBEa^7X_S@'"1#H/uI$?Gq/<8f!<\XB:FlP^R'n:S\TZ81>;#)pr_963tt.>1U<e/3]8d%D-^;?CDbN=QGg&1.1D$>W`6?H5YN;1AY!7L#:%Wa=:/0-r7XbiLpnEWJV<%U(;J1V\]@InC>bE)!:4BRn+;(3i,<gce%X\u13F#K%M]E,?YWV1f7egdo!NJsF=n>nDAb*^=UjGtOfb'F)[q>=FO"cC$YnYcq8pHocH6iN4C+'9(9T_Ga&rZs&[#V%MI\.O2Z-n!6Wmf28%dn(SCRf(ntBT#cR0?k$Ar`PN3Nb(s[N9!HkoN<XTNCefQ%X$%d;`#iGB1_.?ap*C'\>=n/AT;$=VN-*#O_u9F\stC`A8sE"j7":=%E3^''R?FGtHran:eUcqQ;*gAJIg`"o5ZA/&!0FO1!_E[Y'X1Y"&XbK3,Y*ER;,fq1/XisdYac\@(a1'"i<.?PP.Q8K*s$@JHCVR^%_?rm*b11KB*VMh:7+>4TnX)!tJj&6D?WC:bOMk,>Uu9P]LnSj-kbhd*9"-R8^r``+(4Jd]i442<*Xn0HKN0l0EC<\./kb9KUbUP!%G`]TA;,GOM.^ip,>LfTAj]1IZNsT$d1A57I_!jcjJ,=19cs85RMAd!Bc:I4TkK>4o'BVjNrH@Y*Q$MALUo%u&$?h'S,H1dZY?SJ#%&dkiqs/f^^,a#sL="Y^O*0R7P[=)S1,U%%DcN\*a4He"WJQZI)>:)pV?B)LV%$r4sPt^!MaY@Upkk4#cES2c)dFSN>.B+Ndk,Yb'%PpBdlT"!>:>6>[+YEm=a_kO!^,eSpk).lIg9+9W_^i2rHk1^g`]-NZNcZgsJ=Q5[CG&p@9",:5^4*Ebb?oTL0iZ@"qQ:WR5L+3g<%GUBC>lK]cN>a&-g%#^JsIV.4Z25W?7K&N3K[f80l(al:Dk=2\CSDg!6>+5%8JRP+&OP*/UXHV@1!N%'`B6Yf'GVnt0Fh9"AiK%Km%p.5Moq@\e[:X\%Q[1_7!8uK_Bcbo%"UMmcuEoNd+n6Vg6"RVo4GC^K'KeQ@BC#rXYS)U3=;$?KX"GW$OUUqbU)9=j7J"L:"-#G3H%aV5Ru9%k;g/$Ud,)J+!(`DqW43S8G=%>LG%3)^Uq0`70T-E)gO)Lb<4PB_Zn'abA7[&I0AiQtrLRQY"6d9jdh$2't4('KAid[5@s%pLO5dWRA;"dn<*^YZ2UrSfSFlH23M4hBXe6PuJ%[1lOE%iN*1B^5`?6>=nI5oBQO6\WS^D\+.DNjjfn4*E6.n.k(c2#<T`j<t`^6%R/gtE(bEq'UOH$`EEEjuJ*c4BAs"HG%7/d$\d0?M'<RF\@$iLE$KRbb^i3Eh]5A=TIbA=IVWe@'MiQ4(%ho?YT-YdlD''QX92N\#%RP,U38W77&,Je>&Ou61@A&SiZg%<sDV2/Iu?;!!PI46J]MqQOD2On/`[Nn>Okm8OXLYItcGruumOQH%ZEfcJ=KU&41gp*f9YoJcs%lM?r!,qpm:<&+gR9#0q$'*$Z((?.5BS<:t;iG0mb%^&II:eWSW(qrXX"ck'gM!uD091h]p_,D]el_Sb%WScho$nI%Uebg)_Z6I')%1JdC(TFkcHAj@3418$`=NUU6eZnLidLd?urliU*=(78TB,$O$@,_o&DEW]dc,g\=;JBY4?L!sLT7?hTi'TH[Z(bAq]:KM,-eHE-b%P1O@6q2m2WK*>Eq$BV/$1\^i*QU?_#d*!S%KTM*b.Ai&B=LA86Np[EIdh5/pGIKsFa,!;VW$PeJFh1V@URE>W#Y>Y;/!k-2^\S56%<_J\YdMWZWnki=UXL.J3]eeEQ5H'(@n;+47!XPTd+j_uYJ2f=Cm-[?IKV+?>Olu)E#d"672V3be"/ZnGf*Vo\jWOg?fl:Sdfrb4b%!21\Hm%-.*F)$_Scb4)ma:U-r2S7,`&gYKTa6Ud=HM`]B]>M2uFR'?Zph]+!KH5XTE3<Vag[tW6gHr1/EB_3@f_t9&<o+1ApiY`l%]g=:YUN[BG`4*dZ#u>&D53h=7&Y@#:Ed]9j6^,;IOUb3)qVK)Zq)J;4W[!#DY['F'5=:T'/uS*)c&WQm?fPYK3.#Eg%'i'Gce_Hf%BkAc4Ku%F_)%Bq]1jrm[;cgV=[[QUj&RdAhp95,QAn?X&I(#jh'PKXGYF.X1LfkDbfI#7CBGf7gbeE]@P+WjO]X?S/'?4O?$28E"%:q(`'DVZ)&WqqLY#-Qf8)$iVr%/XrVRKO75n-Q:)nX<Hg0H!*FW(>+@g3!9'L1c+^#3&J9nlO,@5lt;$-)_RfNp!Qf#Xcc@nB-g)%U'cp7]$#!nU&4rRl@rb<R]U5LUstW:Y*eLN/mGQLh]N?BTl>T:R\RZ".$!hq+d?UEp2rC20QH'di"j`IF4),r*d8<QQl)2@_?/\j%nXFTLTS@9jjZ4k7#4ZQg17B.8OL?F-pJ;dp5_Feqe!tf-GLs@2hVEs!@,/YcM]EHR,JJIcS;2rq=aPPjj:IkQ&\%Q'fqHfp#h,V4%Q%sQQ&p$3/]I,`),ERmB:VS]#p#rQrmdR*F$:Ij\GGk4QPQYd8i\ei8[)PnaL]dB,YGU$B@4n1b.tNrJGeqYhd$tG1_Ka#^nu](I%KerTNpEL7BBRr1,TTL!^:om#S?Hj3[1)S!Bat40K!1`%i"#m<mKiS%jCp<TJRL?I=...AbDM<`l;,bCa^,jEX+Jo`.e`QI7+85Ju%QtZ:rC?kW1CVH^_4!6<V!`No++Drb%fFk/Pj#AIRiu)d(QGAgKnn0Sa"3W8b\<S!A<CJ94F'IB",)\,$,u\4dEeGI1nnPsq%Cfm8%$sOc<LRIb5!t6,V#qVK]W-cs.,QXlt-BMA#JSfZE'jnB\2Tm/?3(NaE@3G#iG>q)q&RapIKBUKSbS'kjBg[&QgqLYSg`WAa!g<m@%0X`a:RH1M^fLK[Q?!/aFS3[:TVO'QrDIm]Dg+81;*Vd+i&4JB'ZA(,&f*)>oWZ5e:&'VD]P<_4q'Fd@%BSr4j=9!!H-=Negs(Q8G%JaK>ldqKmNJQ<d'`[HjFBT$m;6O$+alb9jWAkG\<Et%W0iLM6qB*L(b`"71[mpickJXL6OCg/"gZs&ME6Hm5!e_du/KGd`S*tU2Z%2CI<j<!!ps(_37g6E/])[+kl3YThLjBshFmLlf-^*(nd)(hOE7I9f!cM-W+FjtPTAmF@6B@O4^,eK]6_j`6YAD%/=h%aX&!Td#'"%HltA%_WInrJJTGmD;(XdYnp4N-=J?TJDRL7+gep'\Ko?a?C+IG*B,lI3D*N<S9EMs)MSXRE*q/mcHD50!mfo\+BAj'XX@%;WlXr^%BX==2=FmhI"kp'k&4ZlR$:\paXr'<$Tj`_^b9f1Ml\"_DX)sKYS]gFZWc?gp_+YE`!eI5[#U@-`68D<Ng:C:QaVo9pngE.R7UW6`%$"RmRH,_MTAZ$ErG-:b#"%o^=[OB._>>enNilOWAHd's=Y*>\IW)Yd(hGlrr)al_Wi0e/gbJ#VZ@&5]J5UN^8rn?JQbEaa__N^6(%2's)FoI>taLV%BR15Jj(LDF*7($Y'R<&@2Q$WY`im!f;:E]W\ZCPa3+Y$,4V0Jmj,@$RaHfp<8+9YN!:diEddLuPHn\Vb=YZ8[ZV%E]bIbpF:$OR2molSu;p@0*_DLE@Ro[NoiiFg!E-peght&^,)ck.\4en\nkA%0L,/UTB`EYCBqTdb:Y'?rY"`%D)jA=/Fk!uln>(_%ZaGkqGpil7%:5o53/=GO]nXGOZ;6:l_rHs_Bl'g;I3&kcb75YpORIR<g$_;9FLQQ6f$pNnd6/5k"JS[V&E32'8bIq87ra%A=!HL#%m,269$H:YK+8gMDi<o_t3X_>f,fs@plB7](coGf5,`,B^U?L+-J\bQ(OM7u'*@8qi!7BS";rk%!8!]Nr;YT8Ed#C;fVUT6M!>L+/%=/dEC_jR/?U>N51a0rT+W6O\ERP'nP@0kEp4S#Me]Bq$OIXU`Y$=jf)0Fs+D;BVG$j*^(X2(_q\[E@/FJZ./#]p6dP5U]oQKXI+q%h0'B_WQn&a"X73Tjr,LRK4INQjfW'/KQR/@<g#-BHX<7+=)N\b=$7*'*PUkrA6MKLbSlF",K&86p6"RjX8c9qVQ/uAkk8_Mad[a5%[cr&(jI+c)(rjn/2Gh'nrde7N=_F`#dhFe7A,@tnA:.VK=?A@(4nUm-Wak37ODttWGa!%m0LCa?W,V_gRL_m3?N&h.lnC7Y<cjKF%G(n?);p.1JgDV>,/lg0\<"]t&=nQ780Hp)TeH<;FP2*QWWk+tU;L3pcg8hD@b^pX%'iRm$h6ISI]cbmJ7%S$eOC-D'-&UEZ5cX>=%oOfURPKaBfM\C&3KN93oE?,'m5;FOJWK%ff2`="X?AA0%j<Y_<DVnlFk-#aJkTGc#fe+@,,M7e\@4QUgJrQ]C3Qo6@[<U`k>g.Wm%'j<<^[D-ns1I2;tU27>=-k*;+X+(5R&@iS\,UX$)157+Wah8kS+I\OhR\WKY`ja@+mkFjq'-u.bWH)0@<$8G8KU0Mt9auCnFY>Mo%I]h!0g-Ha%/O)"g1IcZF[sIiAOF.c,-KTN+_9j'3B<<m$UoE.3T8;FI5WLs6Ne9at9$J$e3MWQuDNJ6N%T/7&$UfqK%&D+b21!P)%NOVTu<Ek%$\7Bctf3u'76oOI$l,_L-QK]bbWFVP-UGX>ieK*:7Jd`mHn@lJEVSRC9^g^gh:F-?Y"A4'EbHJlF,1t!-54a2^\23d0%WH[L<Qm%S;g6eoX_GIu`kq"V&NP-Qd0AHAqT6S3/&7[;+?c!Aj(Z14(-(r;D4&-/io@0BDS[L?G\Fu$jiJU`<>iO2U4J>6?]R;0W%T7@HQcP[6a.O\'LBr+<.M4g$&>?X<0Y6ZsNCG7Q"&&%=O5%B[@IS^R$%78p'U\K5t[E4AVYc99%K(eCMXpb=,/,VrqLhbrVR$94)%$`*&#S4i#Me_7:EcJ3o).77d=VC4tP+PpB0T3cZ]8QIT6o8hY:+pb!jOZh@#%Y=mTY[?Q/RhL#MqfQ_?Qr"nZqt76sMSPDAf::_5%=G-S+Fr`nW&,'epg+aaY!;fd,9AQLQ_1"Ok[o-'Spq<U*E"';^&\-''@O6R\lk`G,*4W0dGd#%pFZHn^+<Y7t_,nqZ@#kbabq8CY%HRHX\DB"OW#e"jSnI^r26*'DmN5\@;;_B!=7\E&sc6$n%CC&a&EF]@_obHV56B&_c6/5%kRRaSj@?S)/1Ar2_o=V=a"H?ifQb!,)%,44mP4h)`U#<`)!hG)kHpIq=sl^?NB7Ks0S^@(#`'d;=m=V=+*2/)g]$Z-Lh"TCN3Kf_UtrLIb(>DFmH@)AI"7/(2=@+5>TFtmWK%[KN";A0.Fk]rSRZM89?KN+*JU?GVFb6AT0l."iZD&U7fs@\psf+@>WR>nNPaJMY:rY0G<.a:F;^%BijX#*CXoiQHfAPpTj;)41o&%)EZJo"\",\+/gJKL.\%5`53\;:](b]S"7Kj8o1^]HHII&>'aYZrA"3/XJDCqp(0SHI^#8h;.?'8BqIeQQ%$a2:#CGU-kQPBITW'C%m:2="q/3Nq8rW]C/_/]VFjZQc3qheda>697pXpBS`41r]?YL75G8Z$)H%B2<Ql'8S$eHS>@G'i"#81NU.`r@'H-S;0ViH2$f"1QQ%9#1:B:LlKRB[<gO*OAtj<>$Rs`0==t%(RP$_=Ds-fd5e#o%s)EY$f+_ba'@p->(Yq82;-`kng5Jq?@6\N40i'@#\R3`Z3dEO!MZ^%`15^t2'DSE1L$2]-l!"WoBPK)82#Z.'D$M[#P&P!N96C"3YP&?&X]<KiCh:+*`Ro`+<`)o$GD^>Gg:O6dBQ7:Ppo/mdf8f6Ierr6%g/%b2j7l1Pn#p_!aY.f8'XQ0ls8Tu,rUTL1++O+Vqi?7,Z$uNss7E5hr0JN*oA`XGfDQfkir7hBI7-/=\U1O*iiaF\Dq(JNOrucq%3RL*35H%!Uo$?bXoIiF(k20rRmLLm2pErqq$\M)>:ItD<qpku5#1B<g)H:!qM#I>%k6JFrHkqBEPQ4]$^W*a=2DY"/)!>c&?L8(i%Tl@)J2N1^j#(%p4U@Y/bEgHGsQHt,71dJF;lg6u[hMRHXk:!H?Mu%XH;T&:@IJJ5Y#?R,dF]=EgofGS/lb[di0]\TOT?`>)YFZ:0%PMat*&bd?uo@*nZfUj%lPDf6'YaW.i][)WTL.Vb:Nu&b$P.%H:X48HI8CZMUcNODJO+Of-+Rl-J`#R7a[+tEUB-&])gr=ejd$tai%90G(3J,4$29pn)p]\WqMb"LW#@m"Ff+4]CVb3M>T0na9,bGE)Pj`O6tEkau5#OfM"p)tr7S6lkMS)4a.b0ei<3>fiT^7I)`FR#X7%T=`55jE8h.h;7``deN/.i/aS'qgS*3jCPLf/YX:qjg5KY'prZ$cSmVR2u11NlGdO1mrd+fTr9GoYqOqDTmNc:@)g.)X9=<:VdP7J%aAe=Ji77ThlDe:9GirJp5sBR?.!<:bU,o(@&E#tJE==^hPru63Z2FN3/c4Yi^O?%%J%CuhH_EgQ8R7)Z]q;0U:,=f[kR[C1K2(`C%@sWHn]<NI8I,9'_FY;1,^R?'20%eLBpE,asQ"GgcOd[#Kr-o+t1NMd']Wa1]aS*Y:5lR`NIf<0_X027`5<`%6X'r,l-]2#2gA*>k%I"RF?fAqR[ft7@c1&q-sGGr&^Q5#+W`eV*fF'jQB76-'!aC)POX9OrCI9acA/Ci9IPBIW<n,!bd/tUM!Q:r0J=j*rLl.RZ$.uipg%E/jCCqaZV;&jq>SK]2^m'!)$:W?GoSo3PO(,#*E!(_pmLN:.!lC[49.?HeeO%T7_10=Bo7PV5Z35EYh"V1kl#5=^]@iBNs1kOnf$%3c.=3o/Z"qX<%9LdNU!Pc[00\Ei_I*,h2Oq'2k*G^9=CL(;97:f82Gb4!b2[<CB4tf`+-fPk"RSOXis1qI.&$TmS2`->;+2kna.q%T+ZXQae(j0J81>N](l"1_Q;FL2iZe:T6[62`GOrHfG'*1.S8"eUjWBp?XF/#q[8gS0mnG_YTALA*b*AI4r9'$Xab;PUdhFKiThoD%-,)a<8++4af"nUNa&h>NQ-5ML5e<d\7LP'\_rZpW1pt52(U%IHH:t1?5"DRt+p"+pPD[m.?[iSt,7X=YN`*o;X`"emTQT*!j!llZ%hVKo%6_F#Ind8%Ckq&UDNd?d.<\l-jXVhXUB-id/Pp3)[>g`3B!Q;.+1"D"8edGoB7hSoOg@C*=PJGQ$lR4npGT"'pMt31b$[)5%%^[h3F.e\`tlDbu1+\b_#QG7Ho0R):(0/%,gZf='rd#W*/mJjMb^e7sd:XfNTS[qm)#u*&:5:37"5#e#/0=B<Oe/CS/<kcV'i!X"L%(M\3=!'J?a@fM(:[4eiKqn2#1E[//a+e#:"TQY*kR1u:b5#$KHU"NEtTm9g:=\,Ksjj2]&I@c2D:rM!V<PMlM@:62d8meBeTta+Z%>Na88IGh!oI1tRtC\RNhStEJH;/I6:Y)1B\_H4,'&5Y4P9rFt6,n3\04!ZR0WC,&Gj1\'CPFn1FO@"EAaOs6OWD%Fe@dh=dg=IS\%eI9T-@_\Ve-ab6pJn\4MD*ECK4*bA[&-f6`:J%.:@8FUoC0_e+%2.b:BsKin*ND!V#4^3A[<=2`nb4HC7DaW<MnTq-.3W@o4PtN2%q>9/6A(@$W`N5X:/L17degpu3MJkNbjin(t'0Y4g8tj\rK^B?&=h90@kc10#B7>jRM&l\'k.K_`hCj@K`KKf?I9Krt!Z==^c`O35%aT(:ip[`aJ39!7r;H+qJh:N=ol%FM2TLP]=3n6FcL&J'!EVR$#-EpEX4cPhR7J61P0S]-DP6WCHG3b-r@[S>^0PV=kBWHU=kKW3u%#Xbe09(I\Ii'u5/e$%ZMI@`"Y.Hg&mk)lkB6#Z&iUq3`)nGBQtZN9r6TM8ut/aFUZO(H![NJqU)7=T0NIc1n,4$k(d87[kPqupM?%M=Z[3bTH3_(BC@7gaptt'@:qS_;'L".3TPFVa/Iu[]-D@9tCt,3NL,1MMDjpJDgMPN+NI=i9HmWpAY;InG;tN_J4<N:;ocHP7M-A%K8n[D5uY9(E.7n&N)K3&Vq#abhb19Ueo+(^9Dcc//tJ^[+]Dh3#8m'"g]DVNKV3jbfD?#m\bQ)ITZ]\_q(Z.06"t/S_"L7ce*%St%(#;A[X6Vm?7*(Z>lO%tsS^q8-Wl5[f`K$26@7r5l<,"0r!g*<Raur^*IUi-@`QkiUf9m.iKX/Q5KYb^Tf6Mb!q]uo][4ZG$S'CXI%%4;'onf;P/Ud,#<o)9-D`bATi;0roWR9U$hB\YcsM\FK\.)Ac.*Ha'KqT"-CXHP6V)[\L3k/)js8/jkdG9`_B@Z7\/Np8>9-%r3b%bs<VHNTe"i"l\Vma`Xa$7nG1?2Oeh9E1]SlrHoV@U=8W.PUj<gn%Y-si&Rfm#1N1?0tSt/b>7G9XLsSY(*<KcAD5c5oAbPdjd'Kt%(Z7UEQWkfi]nt>252Z]0U^(UG-riCC(10qV5.j[TLrKV7GsVMtYSV>7Lfp8A@!Ym]8<&ehUpdHq:-;Z6QB]8MFX9tPp,%dnGOX!b%0_4IbrUO?"B^Dt-ce[67Da*V3X50FJ!f[[qBC1V,%I"S^]JfQ&_CMEMg<S[m-\3&?X=>K&H--H15*b-Hd^9B]R+Te%]*KUWULrs6%Z<Z[LIf9Vp1LuFXr5HNG4JQA*CF&M,ok4[NbZD#/rS,sl9#F^,`><V"AcD;]!?7e[E_sZX*F[+XoSn`,LrpXaWG7[E(j_3@d0``6%os'c`51$XC^9J`r$6`f4[e(@aKYS8l+,+b,3c8&r(Wg7UL>L8alTh#0+DEO+"C5K\b-Wr500T86>c'Et?_%cWhT*m.kl(ot#4_B9%($"Q4Znh.`qJ.JUhnsVX;Vmk\FsEX1C[/UG%o[TS%FrA-)%XYk<G(q"nHNc>E:JaH)f#oagGLM`osm[dl)*aFdpuOo6SpWLj:,Vh%Zk_4pLmRN=NL4td3F3`[IN,*L-QN2PUtFHQ;>rF,G#%sCS6uN*0gi3K4Bk2RBNPm.[=isW`4WkYjlN]_0GF3V@>70B'>\iZ3`AHj%H,dUZA$FX[R""6,3^SBgB0KFUFX6+FY8)C&N%0?%UhM*1"Z&WL)i<P]<D9'OR1!6eY7NG8Vf!&-TD)]s<tepMOj+@2q_A0M4q:n3%I+T/;W\\fl,[Lh+5C^V]FQVcG8,k84Y?8Bh=>U?lWWQ-7F8Z1HB)Li4)ltb,b`k#MoJ`"6JV8I^D&qik)uL:g5>9fo-Ng(&=?Jd#%c4I?eI:386I^\O)LaAkrg?\_lW;N%;UZn;1Ca,\;^%_r.DuKM%#,`K%?_<(c4&Sd]q[pVVW&I"LHQOK$bPPdM%&*3_X*OFW8k$sq%[<,s=$Lq!`4B#S7Zl_daUjIF?omMJ(W=5?+lc[C'#j%)M&>f0JpSiNT.bBGU_+79T?Uor!QH1RKIsdM+#29E*b:sH_TIWnn+p/D:%hHFsR<V!#ECq-1bOL&EgkB5QkjjJ(@RCV,mZpbW>$=PRn1TNMWkVJes*mOG!2II6;PmDX_4bXjO%+up`*T+o>R&-q&/i#s3@;i\"%/piR\q=eklm!>7!e'7$IhLB\*T%@u9>&(hOr!!QHo;MShdX[09p,]@3/+C$0/W`1]hI,1HI2X?<Dodg[n,"TZ*V,NjEC\Mn?]ZJS%BE:E'j0oLOCXUkQ.p/.[=)N^jjU4s0Tp5lpDc"od?]f;u'uY>)RBek\PisCGI)`%Ya#]tLVii-%\-.;,JZfd^3W56'Ie0!-BTfE&%5@M2ZiHN=jI0E?rQi:B=pSBj0"F#G_iHao%V"m1D,sOWNTNF*t>UXVW&0BeD'H>K401o9!he#\lV1muk.!*&j+_-%Iog7ABI"CXO%qYBXcX)65f"W<6gK8\#AMi!)rIE"2P;VgXuC&ZZX[.*Q#_1I&@?\C-sio>p5E;YO&F\?1RT&>Zc_,0JW#S^M>DkOYX6ce55K6P&i%XG"ud2e9=\%IsD"QtG+r?R7%<)`dCb,7$)9-b9shjDX5hq2!@X2lLqg4sm!N/S+"]`E=!'C4?P0O\K55*S3D8hf)O=l[)"UW4]?R%6k1LK%D7*T6CH]OB0>J/2kP`*(r+FQ@t"Z9kD:<<2Z+u"b'i_0%jKUrYYki(.%#\9M0A_7qXin3cG,C/Yr-7>'L[8VTb5U%Vf"3@%p)oa&$<\m"`@H4W)EhFR()r5pZF&TMTI^'.(N=4KFTth@K&;/hm2e9IQ`#<<MB+frf:pAl?Cu/PrKTqQRI%f8"T@A5lsCu=R">]6%\[t8/+6m8B4f&sjh<0YAq?;m-@P\.@(00,l"ZIdSp]ChN`cPR$h='A\CrjaGK7\)3ms;pF6TddL(Gtj(o0&[$8,*Q%\t:311MUL"%J$>Wm(sbSQn9s)HC61I5cl$&UTAQP=pqKX#I=kFt=mpF(pIp8(qM%1DdPJtJ?]Kbc-jUD3ITP#Z,qgI.J:Bee:W&NL%e0X(g5+-L%^[OBsX)u)d9:*Vi34Lt+-Hr)8_Yk\T]tQ1dQ>?Pmj,3*2])*9HQ&Q2giQjK)K.SE7QoDpC;M8%Bq0YBkg^Q^d/O:GT&?/_A+NO`/%1;phALd/dV3,I"jBWg"e1V_%l?&:kK"Xn?SP"Z96aqn`%j7<^d+n?:&X%GK_8h8o>O<k9`6@<3'5JE..QCnh:)'Tb+Q"EmV?"B"q%5'G`0OB*jTAYP(V'oLb7&?"(r6hku_L@P[i8H#__"!6sK)jUd&!fJYp?P)XBr]Kbb%Ja'bpcc`0A:-ZaY1=]Ya4^%;`N0)mHu8fB%iQ3mi?">#c=^LfU5ZEf6]aYcQf7`cmd$o>KNHtJ^m$Hs_T?/Sl6[Qgl`#EE!As@(&J7hiDj/!5Pr8D"uV"MP*G/^<Mg;fLWc[(/1%;%MFN1s?)J8Iu0H9VdG@1sne;;CoTVHET229ic,5ha(Y&mhgXl/$g2P@'?O$SGYO[_ohS)^;_'k7q1#PSl*r14RL(k_-^NA->(Ea%>PX<.?f:srRgRi^*oj/V_8>Qm@Wd,kafqg/r^NWDruaH`e1YWk#V,1gl#L'qp5M@h3]?L'&`X/iI>fA%!S#@3_%:N[IggH1ST[I/%6Psj!b^Re55O+RXd84m*s3blKg#G2O.HmNnA1"rmn#,p.4;gk6NP?n1\g4LbP`CW7T^)<KZG`Ru*Fa\niCf>Y#G/1P0)N#9@)\sK%6=^9g4;adVru@f6kC&8kj,?Rg(XbX#n+5RnbqSpl=HqZl?*kMdL>?p`,T&!h:=)R-9f_fD:E41<alu]'&QZpVcB.jYZN<Jl\HTt1%rkLUD$8$:H)p2t9$)S-*1s]%Cf<r_CV<.UT$5,YrHa")S1E%b:%s]<PnMd36AdBBhNk.RH:7mR<$'Yos/GK9ZOS1LT4NHMC7Lq,K%EI6eUMs[qiLJ#<?&iTelW7Onfj7dJSL,_i]DF;S?C0\CJ&e49N]qWOFY*Zjfd:uP<0sNY.V:7eA=,e1qZ*u=gq;rX[+gS)r2Kja.%q>PH!C+74:&+YDW@0G-Dk:#ReMYO471^\_W;<n"8C)5oAL(ZAp4kC*</g_`124k83c2f)D.`5L]f(sYGQdicHJ6,TN3hmnRbfe_a%g]]QK2A3BfF\$fJ3U2FeD<@Y,elb$r;\c]`qPO.sJ@JA&Ok]nr+T((Y<fLV/hh(jFpP/(2^TR"L7%4q3mYt2qRJ[d%;??@tX)R;J%.]HH/7":a!FX)>dAX<'1<GW\R$OL,,Kp3-Sp1jZ*K'bVZK&#%1/gR'rHm*V7'%%.:<mo_mC"-#YA?!]kB3892=JKLq*`@lgR&DL$%Rprg@h!*ELf#$b=(YH>j#(D>5Z5jAHKRN:_fSm3&`Zu7p?hGGJ^PcPK/N/G]CPeh*q<JDeiNZ=^I:6Ri20s>b5s<!q!f76=;';R#%KN<Lt%Dc5PH%h/+G&;PL%Rgc*mE49D,#7J38!f47"*]OnlhMe`DL1.ArglZU`q!pDJGa[?5gOA"[bbB+jTYDd";*XJBh1d2lGj8o%Yn,t9g^?Gq<]LR]23e#B*EDC"KCBj,Bl4C[?.c7=pR+SB`8f/c&,+eG(Zt23LD0RUa/k64H"/c)\hWi%oT.>[/9X4%0"D[!UmV"i%0sVapoC*_GI@+f_Dp2?/Mg=3I`*PC"?l]'T%gAf%qAo(\R#Sdsbf94nSDHOoQX#2e7DeeYWV0JBNl")n]^ADoYM55el`P'Fh]&8?%p%fhP7j#d<S!).qVEfWoIc8#*GZ)<E5_I#91b.rc(a5O?UK1%h4s/9H'Qi7,,dGra;5*;Rg:2Wi>Vo(O$>@ja.2bGV5CYe_ZiDp(%ro8\E?fq/F'>D&d7Yidko?!m%@qo*hl_YfDU8pk*T&b_G?=YYQocX!SfN+"23_C9BH8S<>moLd+-Y.>,r3;70"$L/!-biuXGH*5Q%?_<"AlPgG6]LC<;Fd1XCb&G5R1P@#(f)Rt\=BLO,i7e5%XINAQXmIWN\_pSU26X?[f6Z;tEV[2_Y=`>?.*L1CK_Y3BgJeWM]qWLS%gCZpkV-4#9JR7k^TD:XYA'k3%?fP&+0f#"1%sU1>,>60K]RGVKH=i]A\M*:kmcT&p(E^EfkPr-nQTtBGJ,SK<s6"TUph0Wnj#=aK%GJF*Whu1S[r:[o*pt[#Urp"EOqnIXTdr0a9qnMs=hu;I#rl=tEIep*0r9eM'mVi*o]:])rYQ*bRL"rTeiP535TDca$J,EXn+\hh~>%AI9_PrivateDataEnd