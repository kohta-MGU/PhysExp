%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Japanese
%%Title: wave3.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Kazutoshi Ohta
%%CreationDate: 12/21/09
%%BoundingBox: 0 0 1350 852
%%HiResBoundingBox: 0 0 1349.6797 852
%%CropBox: 0 0 1349.6797 852
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.3%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.3 x483 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=400 GradRes=200 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-12-21T18:51:43+09:00</xap:CreateDate>
         <xap:ModifyDate>2009-12-21T18:57:58+09:00</xap:ModifyDate>
         <xap:MetadataDate>2009-12-21T18:57:58+09:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>164</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgApAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FUo82&#xA;2Gtaj5b1DT9Fu1sNRu4jBDfMCxgEnwvKigrWREJKAkDlSpAxVjf5ZSt5b8h+WNG8wapDNdzQRQ6X&#xA;I37uSSEqhhjdasOcYkSKoahPHuwGKst/S1rcaTPqGnzR3MUazcJEPJDJAWR1qP5XQqfliqRxfmH5&#xA;WsYfq2ua3aQalax2rajzrAkZvQPRYhywVHJ48i1Adia4qiF81Wuo3OmyaLew3Nm9/Lp+pJwYyJJH&#xA;byS+malDE6Mi1DL0OKsixV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxVxBIIBoT3HUffiryvzZaa43kvyVd6JYPqOraYsF3aAwevFJKtg8cUU/CSBo1eaRJOd&#xA;QitGOVNsVZj5f8vy6H5As9EY+tdWenCGeRdzLcel+9f3LyFm+nFWJ6l5F8za+mo3tlqFlbWus6Vp&#xA;dhDFd2VwZoRp00lxV6yxVLvcSAjiP2fA1VR+l+XNZ0bzHJLfXEV4Nc159VjFrbzKIAumNassrlpV&#xA;pSGOhPH4ifair0DFXYq7FXYq7FXYq7FXYq7FXYqwxfzIDXOsWw0mcz6Pf6fZSxhlBZNSnWGOT4uP&#xA;F1RhMY+vBk3qxCqszxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ksb0bzvpms+adf8uWsTPJ&#xA;oMVs085pwma5adHSIH7XpNblHPTlVe2Ko3ycAPKOiAJ6YGn2tE2+H9yu2223tiqb4q7FXYq7FXYq&#xA;7FXYq7FXYq7FVlxI8UEkqRNO6KzLBGVDuQKhFLsiVboOTAeJxVJf8R6x/wBStqn/ACM0z/stxV3+&#xA;I9Y/6lbVP+Rmmf8AZbirF7fRLmHXr/VBoeuvb6jfRapcaY0uj/V/rcECQI9frPqlR6Mb8S9A6gjw&#xA;xVlH+I9Y/wCpW1T/AJGaZ/2W4qgNd84atY6TdXjaDfWIgTmbq5fTGhShH21F+hIPTY18MUobyb+Y&#xA;GpeYUgYeX9QigdVMt5PAbNQW6kR3DDki+MbuT2GK0zXFDsVdirsVdirsVdirsVQmq6tp2k2Euoaj&#xA;OtvaQgc5Gqd2IVVVVBZmZiFVVBLE0AriqSwXfnnVVFzaw2mg2bbwR6jDJeXcinoZYYZrVLc9+PqO&#xA;fHidgqpT+YfMHl/955nht59IrSTXNPWSNIK/tXVrI0zxRDvKsrgdWCrVsVZSrKyhlIZWFVYbgg9x&#xA;iqS+bL/XbXT0h0Swmu768kW3W4jMPC0WQhWupRLJHzWJSWCLUsRTbqFWF+U/KGveXfzKuBHDc3Wh&#xA;S6Hb6emsSLaIouLaaWZeao6zSErOeUjJUt1J64qzjyerr5S0UO3NhYW1WpSv7lewxVN8VdirsVdi&#xA;rsVdirsVdirsVdiqU6/5ktdI+rwCGS91S9LLp+mW/EzTFBV2+IqqRpUc5HIVajuQCqgkh/MWdDM9&#xA;5pFgzbiy+qXN5wH8pufrNnz+fojFV2n+Z7qPUo9H8wWi6bqM5pYzxv6tneEKWYQSkIyyBVLNFIoa&#xA;lSvMAtirIcVdirsVdirsVdirsVdirsVdirsVcSAKnYDqcVYno8f+KNVTzFcjnolk7Dy5Ad1kcVR9&#xA;RI78wSkHglXH95sqyzFWmVWUqwDKwoyncEHscVYnpSnyrrUOgHby9qRb9BMelrcKpeSw/wCMbIrS&#xA;QfygMmwVBirLcVacAowK8hQ1Xbf232xVKfJwA8o6IAnpgafa0Tb4f3K7bbbe2KpvirsVdirsVdir&#xA;sVdirsVdiqA13WbXRdKn1G5DOkXFY4YxWSWWRhHFDGDSryyMqKPE4qgPLGg3NqZtX1fhL5i1IKb2&#xA;VDySGMVMdpATT91DXrQc2q5FWpiqfYqgda0Ww1nTZdPvkLwS0IZSVkjkQho5Y3G6SRuAyMNwRXFU&#xA;u8q6rfyfWdF1hg2t6VwWeYDitzbyV9C8RRsBLwYOo+zIrgbAEqp/irsVdirsVdirsVdirsVdirsV&#xA;Yz5xlk1GW08qW0hSXVw76jIhIaLTYSouSGWnFpi6wIagjmWX7BxVkkMMUMSQwoscUahI40AVVVRQ&#xA;KoGwAGKrsVdiqXeYdEg1vSLjTpXaEycXguU/vIJ4mEkM8df24pFV19xiqh5V1qbVtJD3aLFqlpI1&#xA;nqtuleMd3DQSBeW/BtnjJ6oynviqcEEggGh7HFUp8ogjynooY8iLC1qelT6K4qm2KuxV2KuxV2Ku&#xA;xV2KuxV2KsWTj5g83NITz0nyy/CNf2ZdUkj+NvAi1hkCj/Ldv2kxVlOKuxV2Ksb84201p9W80WSF&#xA;7zRebXUSglp9PkobqEAbsyhBLGB1dAOjHFWQW9xBc28VxbyLLBMiyQyoaqyOKqykdQQcVVMVdirs&#xA;VdirsVdirsVdirsVY55RtpLmfUfMtyhW41eQJaq3WPT7Yslqo9pOT3HsZKdsVZHirsVdirsVYxdq&#xA;NF85wXyrxsfMYWzvT+yl9bozWsp8PWiDxM3crEuKslk/u2+D1Nj8ApVtum5A398VSnyb/wAohof7&#xA;sxAWFqBGePwgQrt8JI+44qnGKuxV2KuxV2KuxV2KuxVKvNGtSaPolxeQRfWL08ILC1Jp6t1O4igj&#xA;J7K0jryPZantiq/y3okWh6Ja6YkhneFS1xcts808jGSed6ftSyuzt7nFUyxV2KuxV2KsY8nqNJut&#xA;Q8qFeEOmlbjSK9Dp9yWMca+1vKrwgdkCfzYqyfFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlnmb&#xA;Rf01od3pyyehPIoe0uQATDcxMJbeZa13imRXHyxVry1rLa1oNrqJj+r3Mqsl1bnf0bqFjFcQnx9K&#xA;ZGQ/LFVvlHl/hPReRBb6ha8iBQE+ivQVOKptirsVdirsVdirsVdirsVYzOP0x53hg+1Y+W4xcyj9&#xA;ltQu0ZIVr4wWxdiP+LUPbFWTYq7FXYq7FXYqxnzlTTZdP80rRRpEhj1Jun+466KpcknssLLHcMfC&#xA;M+OKsmxV2KuxV2KuxV2KtMyqpZiFUdSdhirYIIqNwehxVouoIUkBm+yCdzTwxVvFXYq7FXYq7FXY&#xA;qxjT1Gleb9S01hWz1uM6pZp1HrxBIL2MDoAQYZAO7M58cVTDycFHlHRAq8F/R9rxSlKD0V2piqb4&#xA;q7FXYq7FXYq7FXYqhtT1G003TrrUbx/TtLOF7i4k68Y4lLsfuGKpX5L067tNEW41BOGq6pI+o6kh&#xA;6pNcnkIa9xBHwhX/ACUGKp7irsVdirsVdiqndW1vdW0trcRiW3nRopom3VkccWU+xBxVIvI91OdI&#xA;k0m7cyahoUzabcyOau6xKrW8zH+aa2eKRv8AKYjFUdbeYtPuPMF7oA9SPUrGGG6dJFoslvcFlSWJ&#xA;qkMoeNkbuCOlCCVUzxV2KuxVhmseedfs/MkGh2Xl03895Hcz2Y+tpC5gsnijnmlR04xozXCiH4zz&#xA;PXgNwqmP5gRxy+VbmORQ8bzWiujAFWU3cQIIPUHFWL6j+aeuabe6pZJ5Ziki0jWrLQg0d+F9QalH&#xA;E1pKiG3HH/emISITRa/Cz0xVMINbl1y9099Q02Ox1LRvMEunuqyi5WosZJBJFKUibjJHKpoVB7HF&#xA;WdYq7FXYq7FXYq7FWOeeoZY9Ki1u2UteeX5hqMaqCzNCisl1GFFORe2kkCr/AD8T2xVGeTm5eUdD&#xA;bkH5afanmuwNYV3G52xVN8VdirsVdirsVdirsVY15uB1K/0jy4u8d9N9d1H/AJgrBkkZf+elw0Mb&#xA;A9UZsVZLirsVdirsVdirsVdirGb3/cT53sr2vGz8wQ/o+58Bd2wee1b25xGdGPchBiqQPpXne589&#xA;6R5xa0FtbRyT6PNpCmEzLpcwLi7uJeRDP9ZhicRox4Rk9WLYq9FxV2KuxVi7/lv5XfWX1hkuWvZS&#xA;/rF7q4dHill+sNAY3dk9H1hz4AU7fZ+HFUw83WF5faBPb2cfrXHOCRIgVUsIp0kYAuVWpVDSpGKp&#xA;HeflR5W1Ce+u7htRjn1S9t9Vu1W/uEpd2oHoOoSTinpcVChdvhX+UYqhk0fQNF812el6fdzSanqF&#xA;8dZvoby8MrFVt5oDLEk78mqSqkRA0AHKgpirKP8ACflX/qzWP/SND/zTirv8J+Vf+rNY/wDSND/z&#xA;Tirv8J+Vf+rNY/8ASND/AM04q7/CflX/AKs1j/0jQ/8ANOKu/wAJ+Vf+rNY/9I0P/NOKu/wn5V/6&#xA;s1j/ANI0P/NOKsB0zVtCvb/THuPLulnRNe1TU9GslS0Rpo3036yPUmehRxP9QloioKVXc74qiPym&#xA;0Py9J5Xh0q90qzkvNLSEK8ltFzktbmJbi1c1XltHJ6RJ3Lo2Ks2/wn5V/wCrNY/9I0P/ADTirv8A&#xA;CflX/qzWP/SND/zTirv8J+Vf+rNY/wDSND/zTirv8J+Vf+rNY/8ASND/AM04q7/CflX/AKs1j/0j&#xA;Q/8ANOKu/wAJ+Vf+rNY/9I0P/NOKu/wn5V/6s1j/ANI0P/NOKsb8q+WPLWp6lrGvNpNm1rPP+j9M&#xA;X6vDw+rWDPG8gXjSsty0x5ftIE7AYqyT/CflX/qzWP8A0jQ/804q7/CflX/qzWP/AEjQ/wDNOKu/&#xA;wn5V/wCrNY/9I0P/ADTirv8ACflX/qzWP/SND/zTirv8J+Vf+rNY/wDSND/zTirv8J+Vf+rNY/8A&#xA;SND/AM04q7/CflX/AKs1j/0jQ/8ANOKpV5p8g6DqOg3dvY6VYxaiFE1hL9XiULcwMJYORCg8PURQ&#xA;47rUd8VV9C0rybrOjWWq2+iWSRXsKTCN7WEOhcVKOOOzIfhYdiMVR3+E/Kv/AFZrH/pGh/5pxV3+&#xA;E/Kv/Vmsf+kaH/mnFXf4T8q/9Wax/wCkaH/mnFXf4T8q/wDVmsf+kaH/AJpxV3+E/Kv/AFZrH/pG&#xA;h/5pxV3+E/Kv/Vmsf+kaH/mnFWI+cfyy/Lk30XnDWNMWZPL0DS2WnQIkcPqhufP04ghmlcqqIrsV&#xA;6UWpxV6HirsVdirsVdirsVYVY/ly9tqunTtfI2n6Pqepavp1qsBWQTap65dJJPUKskbXkpWiD9kf&#xA;snkqoaZy0oeT9aJAt9Q0+10bU2HwrykjEllIa1+zPzhUV6zYqzzFXYq7FXYq7FXYqknnLVLuw0GY&#xA;WDBdVvmSx0sncC6umEUchX9pYuXquP5VOKpjpOmWmlaXZ6ZZqVtbGGO3gUmp4RKEWp7mg3OKorFX&#xA;Yq7FXYq7FXYq7FXYqxny6P0X5i1jQW+G3nc6xpg6D07pz9bjHiUuuUjeAlUYqybFXYq7FXYq7FXY&#xA;qxrzDx1TzFpGgD4oIGGsakKVHC1cfVI28C91xkX2ibFWS4q7FXYq7FXYq7FWnpwblutDUCpNPoxV&#xA;jOn6PBrP5b2Gll2gW60u2SGZRSSFxChilUN0eNwrrXuMVTHyrrMusaDbXlxGIb4c4NQt13EV3buY&#xA;biMddllRgp7ihxVNsVdirsVdirsVYzvq/nnubHyzF124tqN7H08eUFo33T4qybFXYq7FXYq7FXYq&#xA;7FXYq7FWM+dh9QisfM6bNoMplvW8dOmHC8BP8sa8bj3MQxVkwIIqNwehxV2KuxV2KuxVxIAqdgOp&#xA;xVjPkkfX4r7zO+7a9KJbJvDToRwswD/LIvK49jKcVZNirsVdirsVdirsVacOUYIQHoeJIqAe1QCK&#xA;/fiqU+TxIPKWiiRgz/ULbkygqCfRXoCW/XiqXwsNF87S2zHjY+ZlNxb1rQajaxhZkr29a2RHVR/v&#xA;qRu+KsnxV2KuxV2KoHXdYtdG0i71S65GC0jMhRBV3I2WNB3d2oqjuSBiqE8o6Rc6XokUd6VfVLln&#xA;vNUkUkq13csZJgpO/BGbhH4IFHbFU5xV2KuxV2KuxV2KuxV2KuxVbLFHLE8Uqh45FKujCoKkUII9&#xA;8VY55ImktbS58t3Mhe78vuLZGapaSyYcrKUkklv3P7t2PWRHxVkuKuxV2KuxVjXneaS5tbXy3bOU&#xA;uvMEhtpGUkNHYqOV7KCN1Po/u0btI6YqyOKKOKJIolCRxqFRFFAFAoAB7YquxV2KuxV2KuxV2KtP&#xA;Tg3LdaGoFSafRiqU+TuP+EdE4ghf0fa8QQQaeivUHfFXeatHn1TR3js2WPU7Z0u9Lnf7KXUB5xcq&#xA;b8GPwSU6ozDviqv5f1qDWtHttSiQwmZSJrdyC8M8bFJoJKbc4pVZG9xiqYYq7FXYqxfUidd822uk&#xA;qA+maGY9Q1Q9Q159qxtz/wAY97hu4IiPRsVZRirsVdirsVdirsVdirsVdirsVdirF/NbnRdRs/NS&#xA;bWsAFlrp6D6jI1VuG/5hZTzJOyxtIcVZRirsVdirsVYt5UrrOp33mySjW1wPqWgkUI+oRNVp1P8A&#xA;y9TVcEdY1jxVlOKuxV2KuxV2KuxV2KuNaGnXtXpXFUp8o8v8J6Lypy+oWvKnSvor0xVNsVYpcv8A&#xA;4Z8y/Wz8Oga/KiXR/ZtdSYCOKU+Ed0AsbeEgU/7sY4qyvFXYqlXmXXRo+nerHF9a1C5dbbTLEGjT&#xA;3UlfTjr2UULO37KBmOwxV3lnRG0jS1gnm+s6hO7XOp3lOPr3Uu8sgG/Fa/Ci1+FAq9Biqa4q7FXY&#xA;q7FXYq7FXYq7FXYq7FXYqsnghuIJIJ0WWGVSksbgMrKwoysD1BGKsa8q3Muk3TeUb+Rmls4zJotx&#xA;ISWudPUhVBY/altqiKXuRwc/bxVlGKuxVi/mq5l1a6XyjYSMst5GJNauIyQ1tp7EqwDD7MtzQxRd&#xA;wObj7GKslhhighjhhRY4YlCRxqAFVVFAoA6ADFV+KuxV2KuxV2KpRqHnHyjpt29nqOt6fZXcdC9v&#xA;cXUMUihhyFUdgwqDXFVaPzH5fl0ifWIdRtp9KtUkkuL6GVJYUWJeUhLoWHwjc4q86/LTzne655+8&#xA;1/WdTW9sLjT9Nv8ATrG2lWVLKNnuo2hpEW/fFVjaWm/PbpxxVn3k1lbyhoZTlx+oWtOYYNT0V68/&#xA;i+/FU4xVQvrGzv7KexvYUuLO5RoriCQBkdHFGVgeoIxVjVrea35XpZanHdaxoabWerwo9zdwp2iv&#xA;IUDTS8eizxqxYf3gBHN1US/nzRZBw0uO51e8b7FpZwSFuXhJJII4Yf8Anq64q3oeg6g+onzB5gaO&#xA;TWGjMVnawktb2ED0LxQswUvJIVHqykDlQAAKKYqyLFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUs1/&#xA;QbfWLaJWke2vLSQXGn30W0sE6ggOtdmBDFXQ/CykqdjiqVW/m+504C1812clhdJsdRtopZtOmA29&#xA;RJUEhgr/ACT8SDsC4+IquuPN9zqINr5Us5L+6fYajcxSw6dCDt6jyuIzPT+SDkSdiUHxBVNdA0G3&#xA;0e2lVZHuby7kNxqF9LvLPOwALtTZQAoVEHwqoCjYYqmeKuxV2KuxV2KuxV2KpP5j8tx66lnFNfXV&#xA;pBaXEV00Nq0SpO0LrIiT+pHIWQMm6ggHv2xVDr5Ot085zeblv7o381ounm1b0Pq31eNmkRKCIS7S&#xA;uz19StTSvH4cVRXlHl/hPReVOX1C15U6V9FemKptirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVaenBq1pQ1pWv0U3xVKfJ3H/COica8f0fa05V5U&#xA;9FevLevzxVN8VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirjWhoKnsDsK4qlPlHl/hPReQAb6ha8gDUA+ivQ0GKptirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqH076l+j7X6jx+pejH9V414+&#xA;lxHCle3GmKojFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq//9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:E859FC6DF3EFDE11967EA2303830C27F</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:EE59FC6DF3EFDE11967EA2303830C27F</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:E759FC6DF3EFDE11967EA2303830C27F</stRef:instanceID>
            <stRef:documentID>uuid:E659FC6DF3EFDE11967EA2303830C27F</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>475.544444</stDim:w>
            <stDim:h>300.566667</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>初期設定のスウォッチグループ</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -852 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 852 li
1349.68 852 li
1349.68 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 852 mo
1348 852 li
1348 0 li
0 0 li
0 852 li
cp
clp
1348 426 mo
1323.17 413.584 li
1330.62 426 li
1323.17 438.415 li
1348 426 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
3 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
0 426 mo
1348 426 li
@
grestore
gsave
0 852 mo
1348 852 li
1348 0 li
0 0 li
0 852 li
cp
clp
297 0 mo
284.483 25.0337 li
297 17.5234 li
309.517 25.0337 li
297 0 li
cp
false sop
0 0 0 rgb
f
3 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
297 852 mo
297 0 li
@
295 823.6 mo
299 823.6 li
295 795.2 mo
299 795.2 li
295 766.8 mo
299 766.8 li
295 738.4 mo
299 738.4 li
295 681.6 mo
299 681.6 li
295 653.2 mo
299 653.2 li
295 624.8 mo
299 624.8 li
295 596.4 mo
299 596.4 li
295 539.6 mo
299 539.6 li
295 511.2 mo
299 511.2 li
295 482.8 mo
299 482.8 li
295 454.4 mo
299 454.4 li
295 397.6 mo
299 397.6 li
295 369.2 mo
299 369.2 li
295 340.8 mo
299 340.8 li
295 312.4 mo
299 312.4 li
295 255.6 mo
299 255.6 li
295 227.2 mo
299 227.2 li
295 198.8 mo
299 198.8 li
295 170.4 mo
299 170.4 li
295 113.6 mo
299 113.6 li
295 85.2002 mo
299 85.2002 li
295 56.7998 mo
299 56.7998 li
295 28.3999 mo
299 28.3999 li
@
293 710 mo
301 710 li
293 568 mo
301 568 li
293 426 mo
301 426 li
293 284 mo
301 284 li
293 142 mo
301 142 li
@
grestore
gsave
232.441 160.347 mo
284.41 160.347 li
284.41 106.378 li
232.441 106.378 li
232.441 160.347 li
cp
clp
244.674 150.722 mo
241.805 155.528 239.011 156.536 235.857 156.749 cv
234.998 156.821 234.353 156.821 234.353 158.169 cv
234.353 158.594 234.71 158.947 235.284 158.947 cv
237.217 158.947 239.439 158.735 241.448 158.735 cv
243.814 158.735 246.322 158.947 248.618 158.947 cv
249.047 158.947 249.978 158.947 249.978 157.601 cv
249.978 156.819 249.333 156.749 248.831 156.749 cv
247.182 156.604 245.46 156.029 245.46 154.231 cv
245.46 153.368 245.89 152.575 246.464 151.568 cv
246.966 150.706 247.037 150.706 251.912 142.357 cv
269.906 142.357 li
270.05 143.868 271.054 153.655 271.054 154.376 cv
271.054 156.532 267.325 156.749 265.893 156.749 cv
264.89 156.749 264.172 156.749 264.172 158.169 cv
264.172 158.947 265.031 158.947 265.175 158.947 cv
268.116 158.947 271.198 158.735 274.135 158.735 cv
275.926 158.735 280.444 158.947 282.236 158.947 cv
282.666 158.947 283.526 158.947 283.526 157.528 cv
283.526 156.749 282.81 156.749 281.877 156.749 cv
277.434 156.749 277.434 156.245 277.22 154.165 cv
272.845 109.307 li
272.705 107.87 272.705 107.579 271.485 107.579 cv
270.337 107.579 270.052 108.084 269.623 108.802 cv
244.674 150.722 li
cp
253.276 140.157 mo
267.397 116.507 li
269.693 140.157 li
false sop
0 0 0 rgb
f
grestore
gsave
180.089 732.945 mo
283.464 732.945 li
283.464 678.217 li
180.089 678.217 li
180.089 732.945 li
cp
clp
222.277 714.905 mo
223.294 714.905 224.68 714.905 224.68 713.486 cv
224.68 712.068 223.294 712.068 222.277 712.068 cv
182.688 712.068 li
181.67 712.068 180.293 712.068 180.293 713.486 cv
180.293 714.905 181.673 714.905 182.688 714.905 cv
false sop
0 0 0 rgb
f
243.776 723.186 mo
240.868 728.06 238.034 729.082 234.835 729.297 cv
233.963 729.371 233.309 729.371 233.309 730.736 cv
233.309 731.168 233.673 731.526 234.252 731.526 cv
236.214 731.526 238.469 731.311 240.504 731.311 cv
242.905 731.311 245.447 731.526 247.774 731.526 cv
248.21 731.526 249.155 731.526 249.155 730.159 cv
249.155 729.368 248.501 729.297 247.993 729.297 cv
246.32 729.149 244.574 728.566 244.574 726.743 cv
244.574 725.868 245.01 725.064 245.591 724.044 cv
246.1 723.169 246.173 723.169 251.116 714.701 cv
269.363 714.701 li
269.509 716.234 270.527 726.16 270.527 726.89 cv
270.527 729.077 266.746 729.297 265.293 729.297 cv
264.275 729.297 263.549 729.297 263.549 730.736 cv
263.549 731.526 264.42 731.526 264.566 731.526 cv
267.548 731.526 270.673 731.311 273.652 731.311 cv
275.468 731.311 280.05 731.526 281.867 731.526 cv
282.302 731.526 283.175 731.526 283.175 730.087 cv
283.175 729.297 282.449 729.297 281.505 729.297 cv
277 729.297 277 728.786 276.779 726.677 cv
272.344 681.188 li
272.201 679.729 272.201 679.435 270.964 679.435 cv
269.802 679.435 269.512 679.947 269.076 680.675 cv
243.776 723.186 li
cp
252.5 712.471 mo
266.821 688.489 li
269.147 712.471 li
f
grestore
gsave
255.118 486.438 mo
286.817 486.438 li
286.817 438.142 li
255.118 438.142 li
clp
285.14 462.797 mo
285.14 457.442 284.805 452.086 282.463 447.132 cv
279.387 440.707 273.904 439.635 271.095 439.635 cv
267.083 439.635 262.201 441.376 259.458 447.602 cv
257.319 452.221 256.985 457.442 256.985 462.797 cv
256.985 467.817 257.25 473.844 259.993 478.93 cv
262.868 484.352 267.752 485.69 271.028 485.69 cv
274.64 485.69 279.723 484.285 282.665 477.926 cv
284.805 473.309 285.14 468.088 285.14 462.797 cv
cp
271.027 484.199 mo
268.434 484.199 264.506 482.525 263.31 476.106 cv
262.577 472.093 262.577 465.94 262.577 461.994 cv
262.577 457.715 262.577 453.299 263.11 449.69 cv
264.374 441.732 269.364 441.124 271.027 441.124 cv
273.223 441.124 277.612 442.331 278.879 448.955 cv
279.543 452.7 279.543 457.781 279.543 461.994 cv
279.543 467.011 279.543 471.558 278.811 475.837 cv
277.814 482.19 274.021 484.197 271.026 484.197 cv
false sop
0 0 0 rgb
f
grestore
gsave
315.543 80.543 mo
453.543 80.543 li
453.543 13.3589 li
315.543 13.3589 li
clp
346.466 38.854 mo
346.727 37.9414 346.727 37.8105 346.727 37.3525 cv
346.727 36.1787 345.814 35.5859 344.841 35.5859 cv
344.191 35.5859 343.153 35.9785 342.567 36.9551 cv
342.439 37.2798 341.917 39.2998 341.657 40.4717 cv
341.204 42.1631 340.749 43.9204 340.36 45.6777 cv
337.438 57.3931 li
337.179 58.3701 334.389 62.9258 330.102 62.9258 cv
326.791 62.9258 326.077 60.0552 326.077 57.6401 cv
326.077 54.6362 327.161 50.5898 329.335 44.8442 cv
330.357 42.167 330.614 41.4482 330.614 40.1431 cv
330.614 37.2051 328.534 34.7847 325.283 34.7847 cv
319.109 34.7847 316.708 44.3037 316.708 44.8955 cv
316.708 45.5498 317.35 45.5498 317.479 45.5498 cv
318.122 45.5498 318.187 45.4204 318.508 44.3711 cv
320.246 38.2061 322.821 36.2368 325.008 36.2368 cv
325.524 36.2368 326.618 36.2368 326.618 38.333 cv
326.618 39.9639 325.988 41.6631 325.547 42.9023 cv
323.031 49.8232 321.899 53.5439 321.899 56.6118 cv
321.899 62.4224 325.988 64.3799 329.818 64.3799 cv
332.349 64.3799 334.556 63.27 336.375 61.4419 cv
335.53 64.8447 334.749 68.0488 332.143 71.5176 cv
330.451 73.7412 327.976 75.6387 324.979 75.6387 cv
324.067 75.6387 321.138 75.4448 320.029 72.9146 cv
321.071 72.9146 321.918 72.9146 322.83 72.124 cv
323.482 71.5298 324.133 70.6719 324.133 69.418 cv
324.133 67.3711 322.375 67.1055 321.723 67.1055 cv
320.226 67.1055 318.078 68.1567 318.078 71.3774 cv
318.078 74.6616 320.943 77.0923 324.981 77.0923 cv
331.688 77.0923 338.396 71.1558 340.222 63.7808 cv
false sop
0 0 0 rgb
f
387.35 79.9985 mo
387.35 77.4556 li
380.914 77.4556 li
380.914 17.356 li
387.35 17.356 li
387.35 14.813 li
378.371 14.813 li
378.371 79.9985 li
f
395.982 41.1807 mo
395.982 58.7144 li
395.982 61.6567 395.279 61.6567 390.986 61.6567 cv
390.986 63.6548 li
393.264 63.5894 396.586 63.46 398.345 63.46 cv
400.037 63.46 403.425 63.5894 405.639 63.6548 cv
405.639 61.6567 li
401.243 61.6567 400.522 61.6567 400.522 58.7144 cv
400.522 46.6924 li
400.522 39.8955 405.147 36.2368 409.317 36.2368 cv
413.422 36.2368 414.137 39.7656 414.137 43.4893 cv
414.137 58.7144 li
414.137 61.6567 413.426 61.6567 409.088 61.6567 cv
409.088 63.6548 li
411.366 63.5894 414.687 63.46 416.447 63.46 cv
418.138 63.46 421.527 63.5894 423.741 63.6548 cv
423.741 61.6567 li
419.392 61.6567 418.679 61.6567 418.679 58.7144 cv
418.679 46.6924 li
418.679 39.8955 423.303 36.2368 427.474 36.2368 cv
431.579 36.2368 432.298 39.7656 432.298 43.4893 cv
432.298 58.7144 li
432.298 61.6567 431.576 61.6567 427.193 61.6567 cv
427.193 63.6548 li
429.472 63.5894 432.795 63.46 434.552 63.46 cv
436.243 63.46 439.63 63.5894 441.845 63.6548 cv
441.845 61.6567 li
438.508 61.6567 436.902 61.6567 436.836 59.6968 cv
436.836 47.2095 li
436.836 41.5889 436.836 39.5596 434.805 37.2051 cv
433.893 36.0952 431.74 34.7832 427.955 34.7832 cv
422.476 34.7832 419.603 38.7451 418.494 41.252 cv
417.581 35.5117 412.753 34.7832 409.816 34.7832 cv
405.055 34.7832 401.987 37.6201 400.16 41.707 cv
400.16 34.7866 li
390.986 35.501 li
390.986 37.5103 li
395.47 37.5103 395.982 37.9707 395.982 41.1777 cv
f
453.543 14.813 mo
444.626 14.813 li
444.626 17.356 li
451.001 17.356 li
451.001 77.4556 li
444.626 77.4556 li
444.626 79.9985 li
453.543 79.9985 li
f
grestore
gsave
1.6792 717.273 mo
1349.68 717.273 li
1349.68 139.273 li
1.6792 139.273 li
1.6792 717.273 li
cp
clp
4.5 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
1.6792 292.696 mo
2.0083 291.966 li
2.3374 291.236 li
2.6665 290.508 li
2.99561 289.781 li
3.32471 289.056 li
3.65381 288.331 li
3.98291 287.607 li
4.31201 286.885 li
4.64111 286.164 li
4.97021 285.444 li
5.29932 284.726 li
5.62842 284.009 li
5.95752 283.292 li
6.28662 282.578 li
6.61572 281.864 li
6.94482 281.152 li
7.27393 280.441 li
7.60303 279.731 li
7.93213 279.022 li
8.26123 278.315 li
8.59033 277.609 li
8.91943 276.905 li
9.24854 276.201 li
9.57764 275.499 li
9.90674 274.798 li
10.2358 274.099 li
10.5649 273.401 li
10.894 272.704 li
11.2231 272.009 li
11.5522 271.314 li
11.8813 270.622 li
12.2104 269.931 li
12.5396 269.241 li
12.8687 268.552 li
13.1978 267.865 li
13.5269 267.179 li
13.856 266.494 li
14.1851 265.811 li
14.5142 265.129 li
14.8433 264.449 li
15.1724 263.77 li
15.5015 263.092 li
15.8306 262.417 li
16.1597 261.742 li
16.4888 261.068 li
16.8179 260.396 li
17.147 259.726 li
17.4761 259.057 li
17.8052 258.39 li
18.1343 257.724 li
18.4634 257.059 li
18.7925 256.396 li
19.1216 255.734 li
19.4507 255.074 li
19.7798 254.416 li
20.1089 253.759 li
20.438 253.103 li
20.7671 252.449 li
21.0962 251.796 li
21.4253 251.145 li
21.7544 250.495 li
22.0835 249.847 li
22.4126 249.201 li
22.7417 248.556 li
23.0708 247.912 li
23.3999 247.271 li
23.729 246.63 li
24.0581 245.991 li
24.3872 245.354 li
24.7163 244.718 li
25.0454 244.084 li
25.3745 243.451 li
25.7036 242.82 li
26.0327 242.191 li
26.3618 241.563 li
26.6909 240.938 li
27.02 240.313 li
27.3491 239.69 li
27.6782 239.068 li
28.0073 238.449 li
28.3364 237.831 li
28.6655 237.214 li
28.9946 236.6 li
29.3237 235.986 li
29.6528 235.375 li
29.9819 234.765 li
30.311 234.157 li
30.6401 233.55 li
30.9692 232.946 li
31.2983 232.343 li
31.6274 231.741 li
31.9565 231.141 li
32.2856 230.543 li
32.6147 229.947 li
32.9438 229.352 li
33.2729 228.759 li
33.6021 228.168 li
33.9312 227.578 li
34.2603 226.99 li
34.5894 226.404 li
34.9185 225.82 li
35.2476 225.237 li
35.5767 224.656 li
35.9058 224.077 li
36.2349 223.5 li
36.564 222.924 li
36.8931 222.351 li
37.2222 221.778 li
37.5513 221.208 li
37.8804 220.64 li
38.2095 220.073 li
38.5386 219.508 li
38.8677 218.944 li
39.1968 218.383 li
39.5259 217.823 li
39.855 217.266 li
40.1841 216.709 li
40.5132 216.155 li
40.8423 215.603 li
41.1714 215.053 li
41.5005 214.504 li
41.8296 213.957 li
42.1587 213.412 li
42.4878 212.869 li
42.8169 212.328 li
43.146 211.788 li
43.4751 211.25 li
43.8042 210.715 li
44.1333 210.181 li
44.4624 209.649 li
44.7915 209.119 li
45.1206 208.59 li
45.4497 208.064 li
45.7788 207.54 li
46.1079 207.017 li
46.437 206.497 li
46.7661 205.978 li
47.0952 205.461 li
47.4243 204.946 li
47.7534 204.433 li
48.0825 203.922 li
48.4116 203.413 li
48.7407 202.905 li
49.0698 202.4 li
49.3989 201.896 li
49.728 201.395 li
50.0571 200.896 li
50.3862 200.398 li
50.7153 199.902 li
51.0444 199.409 li
51.3735 198.917 li
51.7026 198.427 li
52.0317 197.94 li
52.3608 197.454 li
52.6899 196.97 li
53.019 196.488 li
53.3481 196.009 li
53.6772 195.531 li
54.0063 195.055 li
54.3354 194.581 li
54.6646 194.109 li
54.9937 193.64 li
55.3228 193.172 li
55.6519 192.706 li
55.981 192.242 li
56.3101 191.781 li
56.6392 191.321 li
56.9683 190.863 li
57.2974 190.408 li
57.6265 189.954 li
57.9556 189.502 li
58.2847 189.053 li
58.6138 188.606 li
58.9429 188.16 li
59.272 187.717 li
59.6011 187.276 li
59.9302 186.837 li
60.2593 186.399 li
60.5884 185.965 li
60.9175 185.532 li
61.2466 185.101 li
61.5757 184.672 li
61.9048 184.246 li
62.2339 183.821 li
62.563 183.398 li
62.8921 182.978 li
63.2212 182.56 li
63.5503 182.144 li
63.8794 181.729 li
64.2085 181.317 li
64.5376 180.908 li
64.8667 180.5 li
65.1958 180.094 li
65.5249 179.691 li
65.854 179.29 li
66.1831 178.891 li
66.5122 178.494 li
66.8413 178.099 li
67.1704 177.706 li
67.4995 177.315 li
67.8286 176.927 li
68.1577 176.541 li
68.4868 176.157 li
68.8159 175.774 li
69.145 175.395 li
69.4741 175.017 li
69.8032 174.642 li
70.1323 174.269 li
70.4614 173.897 li
70.7905 173.528 li
71.1196 173.162 li
71.4487 172.797 li
71.7778 172.435 li
72.1069 172.075 li
72.436 171.717 li
72.7651 171.361 li
73.0942 171.008 li
73.4233 170.656 li
73.7524 170.308 li
74.0815 169.96 li
74.4106 169.616 li
74.7397 169.273 li
75.0688 168.933 li
75.3979 168.595 li
75.7271 168.259 li
76.0562 167.926 li
76.3853 167.594 li
76.7144 167.265 li
77.0435 166.938 li
77.3726 166.614 li
77.7017 166.292 li
78.0308 165.972 li
78.3599 165.654 li
78.689 165.338 li
79.0181 165.025 li
79.3472 164.714 li
79.6763 164.405 li
80.0054 164.098 li
80.3345 163.794 li
80.6636 163.492 li
80.9927 163.192 li
81.3218 162.895 li
81.6509 162.6 li
81.98 162.307 li
82.3091 162.016 li
82.6382 161.728 li
82.9673 161.442 li
83.2964 161.158 li
83.6255 160.876 li
83.9546 160.597 li
84.2837 160.32 li
84.6128 160.046 li
84.9419 159.773 li
85.271 159.504 li
85.6001 159.236 li
85.9292 158.971 li
86.2583 158.708 li
86.5874 158.447 li
86.9165 158.188 li
87.2456 157.933 li
87.5747 157.679 li
87.9038 157.427 li
88.2329 157.178 li
88.562 156.931 li
88.8911 156.687 li
89.2202 156.445 li
89.5493 156.205 li
89.8784 155.967 li
90.2075 155.732 li
90.5366 155.5 li
90.8657 155.269 li
91.1948 155.041 li
91.5239 154.815 li
91.853 154.592 li
92.1821 154.371 li
92.5112 154.152 li
92.8403 153.936 li
93.1694 153.722 li
93.4985 153.51 li
93.8276 153.301 li
94.1567 153.094 li
94.4858 152.889 li
94.8149 152.687 li
95.144 152.487 li
95.4731 152.29 li
95.8022 152.095 li
96.1313 151.902 li
96.4604 151.711 li
96.7896 151.523 li
97.1187 151.338 li
97.4478 151.155 li
97.7769 150.974 li
98.106 150.795 li
98.4351 150.619 li
98.7642 150.445 li
99.0933 150.274 li
99.4224 150.105 li
99.7515 149.938 li
100.081 149.774 li
100.41 149.613 li
100.739 149.453 li
101.068 149.296 li
101.397 149.142 li
101.726 148.989 li
102.055 148.84 li
102.384 148.692 li
102.713 148.547 li
103.042 148.405 li
103.372 148.265 li
103.701 148.127 li
104.03 147.991 li
104.359 147.858 li
104.688 147.728 li
105.017 147.6 li
105.346 147.474 li
105.675 147.351 li
106.004 147.229 li
106.333 147.111 li
106.663 146.995 li
106.992 146.881 li
107.321 146.77 li
107.65 146.661 li
107.979 146.555 li
108.308 146.451 li
108.637 146.349 li
108.966 146.25 li
109.295 146.153 li
109.625 146.059 li
109.954 145.967 li
110.283 145.877 li
110.612 145.79 li
110.941 145.706 li
111.27 145.623 li
111.599 145.543 li
111.928 145.466 li
112.257 145.391 li
112.586 145.318 li
112.916 145.249 li
113.245 145.181 li
113.574 145.116 li
113.903 145.053 li
114.232 144.992 li
114.561 144.935 li
114.89 144.879 li
115.219 144.826 li
115.548 144.775 li
115.877 144.727 li
116.207 144.681 li
116.536 144.638 li
116.865 144.597 li
117.194 144.559 li
117.523 144.522 li
117.852 144.489 li
118.181 144.458 li
118.51 144.429 li
118.839 144.402 li
119.168 144.379 li
119.498 144.357 li
119.827 144.338 li
120.156 144.322 li
120.485 144.308 li
120.814 144.296 li
121.143 144.287 li
121.472 144.28 li
121.801 144.275 li
122.13 144.273 li
122.459 144.274 li
122.789 144.277 li
123.118 144.282 li
123.447 144.29 li
123.776 144.3 li
124.105 144.313 li
124.434 144.328 li
124.763 144.346 li
125.092 144.366 li
125.421 144.388 li
125.75 144.413 li
126.08 144.44 li
126.409 144.47 li
126.738 144.502 li
127.067 144.537 li
127.396 144.574 li
127.725 144.614 li
128.054 144.655 li
128.383 144.7 li
128.712 144.747 li
129.042 144.796 li
129.371 144.848 li
129.7 144.901 li
130.029 144.958 li
130.358 145.017 li
130.687 145.079 li
131.016 145.143 li
131.345 145.208 li
131.674 145.277 li
132.003 145.349 li
132.333 145.422 li
132.662 145.498 li
132.991 145.576 li
133.32 145.657 li
133.649 145.74 li
133.978 145.826 li
134.307 145.914 li
134.636 146.005 li
134.965 146.098 li
135.294 146.193 li
135.624 146.291 li
135.953 146.391 li
136.282 146.494 li
136.611 146.599 li
136.94 146.706 li
137.269 146.816 li
137.598 146.928 li
137.927 147.043 li
138.256 147.16 li
138.585 147.28 li
138.915 147.401 li
139.244 147.526 li
139.573 147.653 li
139.902 147.782 li
140.231 147.914 li
140.56 148.047 li
140.889 148.184 li
141.218 148.323 li
141.547 148.464 li
141.876 148.607 li
142.206 148.753 li
142.535 148.902 li
142.864 149.053 li
143.193 149.206 li
143.522 149.361 li
143.851 149.52 li
144.18 149.68 li
144.509 149.843 li
144.838 150.008 li
145.167 150.175 li
145.497 150.345 li
145.826 150.518 li
146.155 150.692 li
146.484 150.869 li
146.813 151.049 li
147.142 151.23 li
147.471 151.415 li
147.8 151.602 li
148.129 151.791 li
148.458 151.982 li
148.788 152.176 li
149.117 152.372 li
149.446 152.57 li
149.775 152.771 li
150.104 152.974 li
150.433 153.18 li
150.762 153.388 li
151.091 153.598 li
151.42 153.811 li
151.75 154.025 li
152.079 154.243 li
152.408 154.462 li
152.737 154.685 li
153.066 154.909 li
153.395 155.136 li
153.724 155.365 li
154.053 155.596 li
154.382 155.83 li
154.711 156.066 li
155.041 156.305 li
155.37 156.545 li
155.699 156.788 li
156.028 157.034 li
156.357 157.282 li
156.686 157.532 li
157.015 157.784 li
157.344 158.039 li
157.673 158.296 li
158.002 158.555 li
158.332 158.817 li
158.661 159.081 li
158.99 159.347 li
159.319 159.616 li
159.648 159.887 li
159.977 160.16 li
160.306 160.436 li
160.635 160.713 li
160.964 160.993 li
161.293 161.276 li
161.623 161.561 li
161.952 161.848 li
162.281 162.137 li
162.61 162.429 li
162.939 162.722 li
163.268 163.019 li
163.597 163.317 li
163.926 163.618 li
164.255 163.92 li
164.584 164.226 li
164.914 164.533 li
165.243 164.843 li
165.572 165.155 li
165.901 165.469 li
166.23 165.786 li
166.559 166.104 li
166.888 166.426 li
167.217 166.749 li
167.546 167.074 li
167.875 167.402 li
168.205 167.732 li
168.534 168.064 li
168.863 168.399 li
169.192 168.735 li
169.521 169.074 li
169.85 169.416 li
170.179 169.759 li
170.508 170.104 li
170.837 170.453 li
171.167 170.802 li
171.496 171.155 li
171.825 171.509 li
172.154 171.866 li
172.483 172.225 li
172.812 172.585 li
173.141 172.949 li
173.47 173.314 li
173.799 173.682 li
174.128 174.052 li
174.458 174.424 li
174.787 174.798 li
175.116 175.174 li
175.445 175.553 li
175.774 175.934 li
176.103 176.316 li
176.432 176.701 li
176.761 177.088 li
177.09 177.478 li
177.419 177.869 li
177.749 178.263 li
178.078 178.659 li
178.407 179.057 li
178.736 179.457 li
179.065 179.859 li
179.394 180.263 li
179.723 180.669 li
180.052 181.078 li
180.381 181.489 li
180.71 181.901 li
181.04 182.316 li
181.369 182.733 li
181.698 183.153 li
182.027 183.574 li
182.356 183.997 li
182.685 184.423 li
183.014 184.851 li
183.343 185.28 li
183.672 185.712 li
184.001 186.146 li
184.331 186.582 li
184.66 187.02 li
184.989 187.459 li
185.318 187.901 li
185.647 188.346 li
185.976 188.792 li
186.305 189.24 li
186.634 189.69 li
186.963 190.143 li
187.292 190.597 li
187.622 191.054 li
187.951 191.512 li
188.28 191.973 li
188.609 192.435 li
188.938 192.9 li
189.267 193.366 li
189.596 193.835 li
189.925 194.306 li
190.254 194.778 li
190.583 195.253 li
190.913 195.729 li
191.242 196.208 li
191.571 196.688 li
191.9 197.171 li
192.229 197.656 li
192.558 198.143 li
192.887 198.631 li
193.216 199.122 li
193.545 199.614 li
193.875 200.108 li
194.204 200.605 li
194.533 201.104 li
194.862 201.604 li
195.191 202.106 li
195.52 202.61 li
195.849 203.116 li
196.178 203.624 li
196.507 204.134 li
196.836 204.646 li
197.166 205.16 li
197.495 205.676 li
197.824 206.193 li
198.153 206.713 li
198.482 207.234 li
198.811 207.758 li
199.14 208.283 li
199.469 208.81 li
199.798 209.339 li
200.127 209.87 li
200.457 210.403 li
200.786 210.938 li
201.115 211.474 li
201.444 212.013 li
201.773 212.553 li
202.102 213.095 li
202.431 213.639 li
202.76 214.185 li
203.089 214.732 li
203.418 215.282 li
203.748 215.833 li
204.077 216.386 li
204.406 216.941 li
204.735 217.498 li
205.064 218.056 li
205.393 218.617 li
205.722 219.179 li
206.051 219.743 li
206.38 220.309 li
206.709 220.876 li
207.039 221.445 li
207.368 222.016 li
207.697 222.589 li
208.026 223.164 li
208.355 223.74 li
208.684 224.318 li
209.013 224.898 li
209.342 225.479 li
209.671 226.063 li
210 226.648 li
210.33 227.235 li
210.659 227.823 li
210.988 228.414 li
211.317 229.006 li
211.646 229.6 li
211.975 230.195 li
212.304 230.792 li
212.633 231.391 li
212.962 231.991 li
213.292 232.593 li
213.621 233.197 li
213.95 233.803 li
214.279 234.41 li
214.608 235.019 li
214.937 235.629 li
215.266 236.242 li
215.595 236.855 li
215.924 237.471 li
216.253 238.088 li
216.583 238.707 li
216.912 239.327 li
217.241 239.949 li
217.57 240.573 li
217.899 241.198 li
218.228 241.825 li
218.557 242.453 li
218.886 243.083 li
219.215 243.715 li
219.544 244.348 li
219.874 244.982 li
220.203 245.619 li
220.532 246.257 li
220.861 246.896 li
221.19 247.537 li
221.519 248.18 li
221.848 248.824 li
222.177 249.47 li
222.506 250.117 li
222.835 250.766 li
223.165 251.416 li
223.494 252.067 li
223.823 252.721 li
224.152 253.375 li
224.481 254.032 li
224.81 254.69 li
225.139 255.349 li
225.468 256.01 li
225.797 256.672 li
226.126 257.336 li
226.456 258.001 li
226.785 258.667 li
227.114 259.335 li
227.443 260.005 li
227.772 260.676 li
228.101 261.349 li
228.43 262.022 li
228.759 262.698 li
229.088 263.375 li
229.417 264.053 li
229.747 264.732 li
230.076 265.413 li
230.405 266.095 li
230.734 266.779 li
231.063 267.464 li
231.392 268.15 li
231.721 268.838 li
232.05 269.528 li
232.379 270.218 li
232.708 270.91 li
233.038 271.604 li
233.367 272.298 li
233.696 272.994 li
234.025 273.691 li
234.354 274.39 li
234.683 275.09 li
235.012 275.792 li
235.341 276.494 li
235.67 277.198 li
236 277.903 li
236.329 278.609 li
236.658 279.317 li
236.987 280.026 li
237.316 280.737 li
237.645 281.448 li
237.974 282.161 li
238.303 282.875 li
238.632 283.591 li
238.961 284.307 li
239.291 285.025 li
239.62 285.744 li
239.949 286.464 li
240.278 287.186 li
240.607 287.908 li
240.936 288.632 li
241.265 289.357 li
241.594 290.084 li
241.923 290.812 li
242.252 291.54 li
242.582 292.27 li
242.911 293.001 li
243.24 293.733 li
243.569 294.466 li
243.898 295.201 li
244.227 295.937 li
244.556 296.673 li
244.885 297.411 li
245.214 298.15 li
245.543 298.89 li
245.873 299.631 li
246.202 300.374 li
246.531 301.117 li
246.86 301.861 li
247.189 302.607 li
247.518 303.354 li
247.847 304.102 li
248.176 304.851 li
248.505 305.6 li
248.834 306.351 li
249.164 307.103 li
249.493 307.856 li
249.822 308.61 li
250.151 309.365 li
250.48 310.122 li
250.809 310.878 li
251.138 311.637 li
251.467 312.396 li
251.796 313.156 li
252.125 313.917 li
252.455 314.679 li
252.784 315.442 li
253.113 316.206 li
253.442 316.971 li
253.771 317.737 li
254.1 318.504 li
254.429 319.272 li
254.758 320.041 li
255.087 320.811 li
255.417 321.581 li
255.746 322.353 li
256.075 323.125 li
256.404 323.898 li
256.733 324.673 li
257.062 325.448 li
257.391 326.224 li
257.72 327 li
258.049 327.778 li
258.378 328.557 li
258.708 329.336 li
259.037 330.117 li
259.366 330.898 li
259.695 331.68 li
260.024 332.463 li
260.353 333.247 li
260.682 334.031 li
261.011 334.816 li
261.34 335.603 li
261.669 336.389 li
261.999 337.177 li
262.328 337.965 li
262.657 338.755 li
262.986 339.545 li
263.315 340.335 li
263.644 341.127 li
263.973 341.919 li
264.302 342.713 li
264.631 343.506 li
264.96 344.301 li
265.29 345.096 li
265.619 345.892 li
265.948 346.688 li
266.277 347.485 li
266.606 348.283 li
266.935 349.082 li
267.264 349.881 li
267.593 350.682 li
267.922 351.482 li
268.251 352.283 li
268.581 353.086 li
268.91 353.889 li
269.239 354.691 li
269.568 355.496 li
269.897 356.3 li
270.226 357.105 li
270.555 357.911 li
270.884 358.717 li
271.213 359.524 li
271.542 360.332 li
271.872 361.141 li
272.201 361.949 li
272.53 362.758 li
272.859 363.568 li
273.188 364.379 li
273.517 365.189 li
273.846 366.001 li
274.175 366.813 li
274.504 367.625 li
274.833 368.439 li
275.163 369.252 li
275.492 370.066 li
275.821 370.881 li
276.15 371.696 li
276.479 372.512 li
276.808 373.328 li
277.137 374.145 li
277.466 374.961 li
277.795 375.779 li
278.125 376.597 li
278.454 377.415 li
278.783 378.234 li
279.112 379.053 li
279.441 379.873 li
279.77 380.693 li
280.099 381.514 li
280.428 382.334 li
280.757 383.156 li
281.086 383.977 li
281.416 384.799 li
281.745 385.621 li
282.074 386.444 li
282.403 387.268 li
282.732 388.091 li
283.061 388.915 li
283.39 389.739 li
283.719 390.563 li
284.048 391.389 li
284.377 392.213 li
284.707 393.039 li
285.036 393.865 li
285.365 394.691 li
285.694 395.518 li
286.023 396.344 li
286.352 397.17 li
286.681 397.998 li
287.01 398.825 li
287.339 399.652 li
287.668 400.48 li
287.998 401.309 li
288.327 402.137 li
288.656 402.966 li
288.985 403.795 li
289.314 404.623 li
289.643 405.453 li
289.972 406.282 li
290.301 407.112 li
290.63 407.941 li
290.959 408.771 li
291.289 409.602 li
291.618 410.432 li
291.947 411.263 li
292.276 412.094 li
292.605 412.924 li
292.934 413.755 li
293.263 414.586 li
293.592 415.417 li
293.921 416.248 li
294.25 417.08 li
294.58 417.911 li
294.909 418.742 li
295.238 419.574 li
295.567 420.406 li
295.896 421.238 li
296.225 422.069 li
296.554 422.901 li
296.883 423.733 li
297.212 424.565 li
297.542 425.396 li
297.871 426.229 li
298.2 427.061 li
298.529 427.893 li
298.858 428.725 li
299.187 429.558 li
299.516 430.39 li
299.845 431.222 li
300.174 432.053 li
300.503 432.885 li
300.833 433.717 li
301.162 434.549 li
301.491 435.381 li
301.82 436.213 li
302.149 437.044 li
302.478 437.876 li
302.807 438.707 li
303.136 439.539 li
303.465 440.37 li
303.794 441.201 li
304.124 442.032 li
304.453 442.863 li
304.782 443.694 li
305.111 444.525 li
305.44 445.355 li
305.769 446.186 li
306.098 447.017 li
306.427 447.847 li
306.756 448.677 li
307.085 449.506 li
307.415 450.336 li
307.744 451.165 li
308.073 451.994 li
308.402 452.823 li
308.731 453.652 li
309.06 454.48 li
309.389 455.31 li
309.718 456.138 li
310.047 456.965 li
310.376 457.793 li
310.706 458.62 li
311.035 459.447 li
311.364 460.274 li
311.693 461.101 li
312.022 461.928 li
312.351 462.753 li
312.68 463.579 li
313.009 464.404 li
313.338 465.229 li
313.667 466.055 li
313.997 466.879 li
314.326 467.703 li
314.655 468.526 li
314.984 469.351 li
315.313 470.174 li
315.642 470.996 li
315.971 471.818 li
316.3 472.641 li
316.629 473.462 li
316.958 474.283 li
317.288 475.104 li
317.617 475.925 li
317.946 476.744 li
318.275 477.564 li
318.604 478.384 li
318.933 479.202 li
319.262 480.021 li
319.591 480.838 li
319.92 481.656 li
320.25 482.473 li
320.579 483.289 li
320.908 484.105 li
321.237 484.921 li
321.566 485.736 li
321.895 486.551 li
322.224 487.364 li
322.553 488.178 li
322.882 488.991 li
323.211 489.804 li
323.541 490.615 li
323.87 491.428 li
324.199 492.238 li
324.528 493.049 li
324.857 493.858 li
325.186 494.668 li
325.515 495.477 li
325.844 496.284 li
326.173 497.092 li
326.502 497.898 li
326.832 498.705 li
327.161 499.511 li
327.49 500.316 li
327.819 501.12 li
328.148 501.925 li
328.477 502.728 li
328.806 503.53 li
329.135 504.332 li
329.464 505.134 li
329.793 505.935 li
330.123 506.734 li
330.452 507.533 li
330.781 508.332 li
331.11 509.13 li
331.439 509.928 li
331.768 510.724 li
332.097 511.52 li
332.426 512.314 li
332.755 513.109 li
333.084 513.903 li
333.414 514.696 li
333.743 515.488 li
334.072 516.279 li
334.401 517.07 li
334.73 517.86 li
335.059 518.649 li
335.388 519.438 li
335.717 520.226 li
336.046 521.012 li
336.375 521.798 li
336.705 522.583 li
337.034 523.368 li
337.363 524.151 li
337.692 524.935 li
338.021 525.716 li
338.35 526.497 li
338.679 527.277 li
339.008 528.057 li
339.337 528.836 li
339.667 529.613 li
339.996 530.39 li
340.325 531.166 li
340.654 531.941 li
340.983 532.715 li
341.312 533.488 li
341.641 534.261 li
341.97 535.032 li
342.299 535.803 li
342.628 536.572 li
342.958 537.341 li
343.287 538.108 li
343.616 538.876 li
343.945 539.642 li
344.274 540.406 li
344.603 541.17 li
344.932 541.934 li
345.261 542.695 li
345.59 543.456 li
345.919 544.217 li
346.249 544.976 li
346.578 545.733 li
346.907 546.49 li
347.236 547.246 li
347.565 548.002 li
347.894 548.756 li
348.223 549.509 li
348.552 550.261 li
348.881 551.011 li
349.21 551.761 li
349.54 552.51 li
349.869 553.258 li
350.198 554.004 li
350.527 554.749 li
350.856 555.494 li
351.185 556.237 li
351.514 556.979 li
351.843 557.721 li
352.172 558.461 li
352.501 559.199 li
352.831 559.938 li
353.16 560.674 li
353.489 561.409 li
353.818 562.144 li
354.147 562.877 li
354.476 563.609 li
354.805 564.34 li
355.134 565.069 li
355.463 565.798 li
355.792 566.525 li
356.122 567.252 li
356.451 567.977 li
356.78 568.7 li
357.109 569.423 li
357.438 570.145 li
357.767 570.865 li
358.096 571.584 li
358.425 572.302 li
358.754 573.018 li
359.083 573.733 li
359.413 574.447 li
359.742 575.16 li
360.071 575.871 li
360.4 576.582 li
360.729 577.291 li
361.058 577.998 li
361.387 578.704 li
361.716 579.41 li
362.045 580.113 li
362.375 580.816 li
362.704 581.517 li
363.033 582.217 li
363.362 582.915 li
363.691 583.612 li
364.02 584.309 li
364.349 585.003 li
364.678 585.696 li
365.007 586.388 li
365.336 587.078 li
365.666 587.768 li
365.995 588.455 li
366.324 589.142 li
366.653 589.827 li
366.982 590.511 li
367.311 591.192 li
367.64 591.873 li
367.969 592.553 li
368.298 593.23 li
368.627 593.907 li
368.957 594.582 li
369.286 595.256 li
369.615 595.929 li
369.944 596.6 li
370.273 597.269 li
370.602 597.937 li
370.931 598.604 li
371.26 599.269 li
371.589 599.932 li
371.918 600.594 li
372.248 601.255 li
372.577 601.914 li
372.906 602.571 li
373.235 603.228 li
373.564 603.882 li
373.893 604.535 li
374.222 605.188 li
374.551 605.837 li
374.88 606.485 li
375.209 607.133 li
375.539 607.778 li
375.868 608.422 li
376.197 609.064 li
376.526 609.706 li
376.855 610.345 li
377.184 610.982 li
377.513 611.619 li
377.842 612.254 li
378.171 612.887 li
378.5 613.519 li
378.83 614.148 li
379.159 614.776 li
379.488 615.403 li
379.817 616.028 li
380.146 616.651 li
380.475 617.273 li
380.804 617.894 li
381.133 618.512 li
381.462 619.129 li
381.792 619.744 li
382.121 620.358 li
382.45 620.97 li
382.779 621.58 li
383.108 622.189 li
383.437 622.796 li
383.766 623.401 li
384.095 624.005 li
384.424 624.607 li
384.753 625.208 li
385.083 625.807 li
385.412 626.403 li
385.741 626.999 li
386.07 627.592 li
386.399 628.184 li
386.728 628.774 li
387.057 629.362 li
387.386 629.949 li
387.715 630.534 li
388.044 631.117 li
388.374 631.699 li
388.703 632.278 li
389.032 632.856 li
389.361 633.433 li
389.69 634.007 li
390.019 634.58 li
390.348 635.15 li
390.677 635.72 li
391.006 636.287 li
391.335 636.853 li
391.665 637.417 li
391.994 637.979 li
392.323 638.539 li
392.652 639.098 li
392.981 639.653 li
393.31 640.209 li
393.639 640.762 li
393.968 641.313 li
394.297 641.861 li
394.626 642.409 li
394.956 642.955 li
395.285 643.499 li
395.614 644.041 li
395.943 644.581 li
396.272 645.119 li
396.601 645.655 li
396.93 646.189 li
397.259 646.723 li
397.588 647.253 li
397.917 647.782 li
398.247 648.309 li
398.576 648.834 li
398.905 649.357 li
399.234 649.879 li
399.563 650.398 li
399.892 650.916 li
400.221 651.432 li
400.55 651.945 li
400.879 652.457 li
401.208 652.967 li
401.538 653.475 li
401.867 653.98 li
402.196 654.484 li
402.525 654.986 li
402.854 655.486 li
403.183 655.984 li
403.512 656.48 li
403.841 656.976 li
404.17 657.468 li
404.5 657.958 li
404.829 658.446 li
405.158 658.933 li
405.487 659.417 li
405.816 659.899 li
406.145 660.38 li
406.474 660.858 li
406.803 661.335 li
407.132 661.81 li
407.461 662.282 li
407.791 662.752 li
408.12 663.221 li
408.449 663.688 li
408.778 664.151 li
409.107 664.614 li
409.436 665.074 li
409.765 665.532 li
410.094 665.989 li
410.423 666.443 li
410.752 666.896 li
411.082 667.346 li
411.411 667.794 li
411.74 668.239 li
412.069 668.684 li
412.398 669.125 li
412.727 669.565 li
413.056 670.003 li
413.385 670.438 li
413.714 670.872 li
414.043 671.304 li
414.373 671.733 li
414.702 672.161 li
415.031 672.586 li
415.36 673.009 li
415.689 673.431 li
416.018 673.85 li
416.347 674.266 li
416.676 674.681 li
417.005 675.094 li
417.334 675.504 li
417.664 675.912 li
417.993 676.318 li
418.322 676.723 li
418.651 677.125 li
418.98 677.524 li
419.309 677.922 li
419.638 678.318 li
419.967 678.711 li
420.296 679.103 li
420.625 679.492 li
420.955 679.879 li
421.284 680.264 li
421.613 680.646 li
421.942 681.027 li
422.271 681.405 li
422.6 681.781 li
422.929 682.155 li
423.258 682.527 li
423.587 682.896 li
423.917 683.264 li
424.246 683.629 li
424.575 683.992 li
424.904 684.354 li
425.233 684.712 li
425.562 685.068 li
425.891 685.423 li
426.22 685.774 li
426.549 686.125 li
426.878 686.473 li
427.208 686.817 li
427.537 687.161 li
427.866 687.502 li
428.195 687.841 li
428.524 688.177 li
428.853 688.512 li
429.182 688.844 li
429.511 689.173 li
429.84 689.501 li
430.169 689.826 li
430.499 690.149 li
430.828 690.47 li
431.157 690.788 li
431.486 691.104 li
431.815 691.419 li
432.144 691.73 li
432.473 692.04 li
432.802 692.348 li
433.131 692.652 li
433.46 692.955 li
433.79 693.256 li
434.119 693.554 li
434.448 693.85 li
434.777 694.144 li
435.106 694.436 li
435.435 694.725 li
435.764 695.011 li
436.093 695.295 li
436.422 695.578 li
436.751 695.857 li
437.081 696.135 li
437.41 696.41 li
437.739 696.684 li
438.068 696.954 li
438.397 697.223 li
438.726 697.489 li
439.055 697.753 li
439.384 698.014 li
439.713 698.273 li
440.042 698.53 li
440.372 698.785 li
440.701 699.037 li
441.03 699.287 li
441.359 699.534 li
441.688 699.779 li
442.017 700.022 li
442.346 700.263 li
442.675 700.501 li
443.004 700.737 li
443.333 700.971 li
443.663 701.202 li
443.992 701.431 li
444.321 701.657 li
444.65 701.882 li
444.979 702.104 li
445.308 702.323 li
445.637 702.54 li
445.966 702.755 li
446.295 702.967 li
446.625 703.178 li
446.954 703.385 li
447.283 703.591 li
447.612 703.793 li
447.941 703.994 li
448.27 704.192 li
448.599 704.388 li
448.928 704.582 li
449.257 704.772 li
449.586 704.962 li
449.916 705.148 li
450.245 705.332 li
450.574 705.514 li
450.903 705.692 li
451.232 705.87 li
451.561 706.044 li
451.89 706.217 li
452.219 706.386 li
452.548 706.554 li
452.877 706.719 li
453.207 706.881 li
453.536 707.041 li
453.865 707.199 li
454.194 707.354 li
454.523 707.507 li
454.852 707.658 li
455.181 707.807 li
455.51 707.952 li
455.839 708.096 li
456.168 708.236 li
456.498 708.375 li
456.827 708.511 li
457.156 708.645 li
457.485 708.776 li
457.814 708.905 li
458.143 709.031 li
458.472 709.156 li
458.801 709.277 li
459.13 709.396 li
459.459 709.514 li
459.789 709.628 li
460.118 709.74 li
460.447 709.851 li
460.776 709.957 li
461.105 710.063 li
461.434 710.165 li
461.763 710.265 li
462.092 710.362 li
462.421 710.457 li
462.75 710.55 li
463.08 710.641 li
463.409 710.729 li
463.738 710.813 li
464.067 710.896 li
464.396 710.978 li
464.725 711.056 li
465.054 711.131 li
465.383 711.205 li
465.712 711.275 li
466.042 711.344 li
466.371 711.41 li
466.7 711.474 li
467.029 711.535 li
467.358 711.594 li
467.687 711.65 li
468.016 711.704 li
468.345 711.755 li
468.674 711.805 li
469.003 711.851 li
469.333 711.895 li
469.662 711.937 li
469.991 711.976 li
470.32 712.013 li
470.649 712.047 li
470.978 712.079 li
471.307 712.108 li
471.636 712.136 li
471.965 712.16 li
472.294 712.183 li
472.624 712.203 li
472.953 712.22 li
473.282 712.235 li
473.611 712.247 li
473.94 712.258 li
474.269 712.265 li
474.598 712.271 li
474.927 712.273 li
475.256 712.273 li
475.585 712.271 li
475.915 712.267 li
476.244 712.26 li
476.573 712.25 li
476.902 712.238 li
477.231 712.224 li
477.56 712.207 li
477.889 712.188 li
478.218 712.166 li
478.547 712.143 li
478.876 712.115 li
479.206 712.087 li
479.535 712.056 li
479.864 712.021 li
480.193 711.985 li
480.522 711.946 li
480.851 711.905 li
481.18 711.861 li
481.509 711.816 li
481.838 711.768 li
482.167 711.717 li
482.497 711.663 li
482.826 711.607 li
483.155 711.55 li
483.484 711.489 li
483.813 711.426 li
484.142 711.36 li
484.471 711.292 li
484.8 711.223 li
485.129 711.149 li
485.458 711.074 li
485.788 710.997 li
486.117 710.917 li
486.446 710.834 li
486.775 710.749 li
487.104 710.662 li
487.433 710.572 li
487.762 710.48 li
488.091 710.386 li
488.42 710.289 li
488.75 710.189 li
489.079 710.088 li
489.408 709.983 li
489.737 709.877 li
490.066 709.768 li
490.395 709.656 li
490.724 709.542 li
491.053 709.426 li
491.382 709.307 li
491.711 709.186 li
492.041 709.063 li
492.37 708.937 li
492.699 708.808 li
493.028 708.677 li
493.357 708.544 li
493.686 708.408 li
494.015 708.271 li
494.344 708.13 li
494.673 707.987 li
495.002 707.842 li
495.332 707.694 li
495.661 707.544 li
495.99 707.392 li
496.319 707.237 li
496.648 707.08 li
496.977 706.92 li
497.306 706.759 li
497.635 706.594 li
497.964 706.427 li
498.293 706.258 li
498.623 706.086 li
498.952 705.913 li
499.281 705.736 li
499.61 705.558 li
499.939 705.377 li
500.268 705.193 li
500.597 705.007 li
500.926 704.819 li
501.255 704.629 li
501.584 704.436 li
501.914 704.24 li
502.243 704.043 li
502.572 703.843 li
502.901 703.641 li
503.23 703.436 li
503.559 703.229 li
503.888 703.019 li
504.217 702.807 li
504.546 702.593 li
504.875 702.376 li
505.205 702.157 li
505.534 701.936 li
505.863 701.712 li
506.192 701.486 li
506.521 701.258 li
506.85 701.027 li
507.179 700.795 li
507.508 700.559 li
507.837 700.321 li
508.167 700.081 li
508.496 699.839 li
508.825 699.595 li
509.154 699.348 li
509.483 699.098 li
509.812 698.847 li
510.141 698.593 li
510.47 698.336 li
510.799 698.078 li
511.128 697.816 li
511.458 697.554 li
511.787 697.288 li
512.116 697.02 li
512.445 696.75 li
512.774 696.478 li
513.103 696.203 li
513.432 695.926 li
513.761 695.646 li
514.09 695.364 li
514.419 695.081 li
514.749 694.794 li
515.078 694.506 li
515.407 694.215 li
515.736 693.922 li
516.065 693.627 li
516.394 693.329 li
516.723 693.029 li
517.052 692.727 li
517.381 692.422 li
517.71 692.115 li
518.04 691.807 li
518.369 691.495 li
518.698 691.182 li
519.027 690.866 li
519.356 690.548 li
519.685 690.228 li
520.014 689.905 li
520.343 689.58 li
520.672 689.253 li
521.001 688.924 li
521.331 688.593 li
521.66 688.259 li
521.989 687.923 li
522.318 687.585 li
522.647 687.244 li
522.976 686.901 li
523.305 686.557 li
523.634 686.21 li
523.963 685.86 li
524.292 685.509 li
524.622 685.155 li
524.951 684.799 li
525.28 684.441 li
525.609 684.081 li
525.938 683.719 li
526.267 683.354 li
526.596 682.986 li
526.925 682.617 li
527.254 682.246 li
527.583 681.873 li
527.913 681.497 li
528.242 681.119 li
528.571 680.739 li
528.9 680.357 li
529.229 679.973 li
529.558 679.587 li
529.887 679.198 li
530.216 678.808 li
530.545 678.414 li
530.875 678.02 li
531.204 677.622 li
531.533 677.223 li
531.862 676.821 li
532.191 676.418 li
532.52 676.012 li
532.849 675.604 li
533.178 675.194 li
533.507 674.782 li
533.836 674.367 li
534.166 673.951 li
534.495 673.533 li
534.824 673.112 li
535.153 672.689 li
535.482 672.265 li
535.811 671.838 li
536.14 671.409 li
536.469 670.978 li
536.798 670.545 li
537.127 670.109 li
537.457 669.672 li
537.786 669.233 li
538.115 668.792 li
538.444 668.348 li
538.773 667.902 li
539.102 667.455 li
539.431 667.006 li
539.76 666.554 li
540.089 666.1 li
540.418 665.645 li
540.748 665.187 li
541.077 664.727 li
541.406 664.265 li
541.735 663.801 li
542.064 663.335 li
542.393 662.867 li
542.722 662.396 li
543.051 661.925 li
543.38 661.451 li
543.709 660.975 li
544.039 660.497 li
544.368 660.018 li
544.697 659.535 li
545.026 659.051 li
545.355 658.565 li
545.684 658.077 li
546.013 657.588 li
546.342 657.096 li
546.671 656.602 li
547 656.106 li
547.33 655.608 li
547.659 655.108 li
547.988 654.607 li
548.317 654.104 li
548.646 653.598 li
548.975 653.091 li
549.304 652.581 li
549.633 652.07 li
549.962 651.557 li
550.292 651.042 li
550.621 650.524 li
550.95 650.006 li
551.279 649.484 li
551.608 648.962 li
551.937 648.438 li
552.266 647.911 li
552.595 647.383 li
552.924 646.853 li
553.253 646.32 li
553.583 645.786 li
553.912 645.25 li
554.241 644.713 li
554.57 644.173 li
554.899 643.631 li
555.228 643.088 li
555.557 642.543 li
555.886 641.996 li
556.215 641.447 li
556.544 640.896 li
556.874 640.344 li
557.203 639.789 li
557.532 639.233 li
557.861 638.676 li
558.19 638.115 li
558.519 637.554 li
558.848 636.99 li
559.177 636.426 li
559.506 635.858 li
559.835 635.29 li
560.165 634.72 li
560.494 634.147 li
560.823 633.573 li
561.152 632.997 li
561.481 632.42 li
561.81 631.841 li
562.139 631.26 li
562.468 630.677 li
562.797 630.092 li
563.126 629.506 li
563.456 628.918 li
563.785 628.328 li
564.114 627.736 li
564.443 627.144 li
564.772 626.549 li
565.101 625.952 li
565.43 625.354 li
565.759 624.754 li
566.088 624.152 li
566.417 623.549 li
566.747 622.944 li
567.076 622.338 li
567.405 621.729 li
567.734 621.119 li
568.063 620.508 li
568.392 619.895 li
568.721 619.279 li
569.05 618.663 li
569.379 618.045 li
569.708 617.425 li
570.038 616.804 li
570.367 616.181 li
570.696 615.556 li
571.025 614.93 li
571.354 614.302 li
571.683 613.672 li
572.012 613.041 li
572.341 612.408 li
572.67 611.774 li
573 611.139 li
573.329 610.501 li
573.658 609.862 li
573.987 609.222 li
574.316 608.579 li
574.645 607.936 li
574.974 607.291 li
575.303 606.644 li
575.632 605.996 li
575.961 605.346 li
576.291 604.694 li
576.62 604.042 li
576.949 603.388 li
577.278 602.731 li
577.607 602.074 li
577.936 601.416 li
578.265 600.756 li
578.594 600.094 li
578.923 599.431 li
579.252 598.766 li
579.582 598.1 li
579.911 597.432 li
580.24 596.763 li
580.569 596.093 li
580.898 595.421 li
581.227 594.747 li
581.556 594.072 li
581.885 593.396 li
582.214 592.719 li
582.543 592.039 li
582.873 591.359 li
583.202 590.677 li
583.531 589.994 li
583.86 589.31 li
584.189 588.623 li
584.518 587.936 li
584.847 587.247 li
585.176 586.557 li
585.505 585.865 li
585.834 585.173 li
586.164 584.479 li
586.493 583.783 li
586.822 583.086 li
587.151 582.388 li
587.48 581.688 li
587.809 580.987 li
588.138 580.285 li
588.467 579.582 li
588.796 578.877 li
589.125 578.171 li
589.455 577.464 li
589.784 576.755 li
590.113 576.045 li
590.442 575.334 li
590.771 574.621 li
591.1 573.908 li
591.429 573.192 li
591.758 572.477 li
592.087 571.759 li
592.417 571.041 li
592.746 570.32 li
593.075 569.6 li
593.404 568.877 li
593.733 568.153 li
594.062 567.429 li
594.391 566.703 li
594.72 565.976 li
595.049 565.248 li
595.378 564.519 li
595.708 563.788 li
596.037 563.056 li
596.366 562.323 li
596.695 561.589 li
597.024 560.854 li
597.353 560.117 li
597.682 559.38 li
598.011 558.641 li
598.34 557.901 li
598.669 557.16 li
598.999 556.419 li
599.328 555.676 li
599.657 554.932 li
599.986 554.187 li
600.315 553.439 li
600.644 552.692 li
600.973 551.944 li
601.302 551.194 li
601.631 550.443 li
601.96 549.692 li
602.29 548.939 li
602.619 548.186 li
602.948 547.431 li
603.277 546.676 li
603.606 545.919 li
603.935 545.161 li
604.264 544.402 li
604.593 543.643 li
604.922 542.881 li
605.251 542.119 li
605.581 541.356 li
605.91 540.593 li
606.239 539.828 li
606.568 539.063 li
606.897 538.296 li
607.226 537.528 li
607.555 536.76 li
607.884 535.991 li
608.213 535.221 li
608.542 534.449 li
608.872 533.677 li
609.201 532.904 li
609.53 532.13 li
609.859 531.355 li
610.188 530.579 li
610.517 529.803 li
610.846 529.025 li
611.175 528.247 li
611.504 527.468 li
611.833 526.688 li
612.163 525.907 li
612.492 525.125 li
612.821 524.343 li
613.15 523.56 li
613.479 522.775 li
613.808 521.99 li
614.137 521.204 li
614.466 520.418 li
614.795 519.63 li
615.125 518.842 li
615.454 518.053 li
615.783 517.264 li
616.112 516.473 li
616.441 515.682 li
616.77 514.89 li
617.099 514.097 li
617.428 513.303 li
617.757 512.509 li
618.086 511.714 li
618.416 510.918 li
618.745 510.122 li
619.074 509.325 li
619.403 508.527 li
619.732 507.729 li
620.061 506.93 li
620.39 506.13 li
620.719 505.329 li
621.048 504.528 li
621.377 503.727 li
621.707 502.924 li
622.036 502.121 li
622.365 501.317 li
622.694 500.513 li
623.023 499.708 li
623.352 498.902 li
623.681 498.096 li
624.01 497.289 li
624.339 496.481 li
624.668 495.674 li
624.998 494.865 li
625.327 494.056 li
625.656 493.246 li
625.985 492.437 li
626.314 491.625 li
626.643 490.813 li
626.972 490.002 li
627.301 489.189 li
627.63 488.377 li
627.959 487.563 li
628.289 486.749 li
628.618 485.935 li
628.947 485.12 li
629.276 484.305 li
629.605 483.488 li
629.934 482.672 li
630.263 481.855 li
630.592 481.038 li
630.921 480.221 li
631.25 479.402 li
631.58 478.583 li
631.909 477.765 li
632.238 476.945 li
632.567 476.125 li
632.896 475.305 li
633.225 474.483 li
633.554 473.663 li
633.883 472.841 li
634.212 472.02 li
634.542 471.197 li
634.871 470.374 li
635.2 469.551 li
635.529 468.728 li
635.858 467.904 li
636.187 467.08 li
636.516 466.256 li
636.845 465.431 li
637.174 464.605 li
637.503 463.78 li
637.833 462.955 li
638.162 462.129 li
638.491 461.303 li
638.82 460.477 li
639.149 459.649 li
639.478 458.822 li
639.807 457.995 li
640.136 457.167 li
640.465 456.34 li
640.794 455.512 li
641.124 454.684 li
641.453 453.854 li
641.782 453.026 li
642.111 452.197 li
642.44 451.368 li
642.769 450.538 li
643.098 449.709 li
643.427 448.879 li
643.756 448.049 li
644.085 447.219 li
644.415 446.389 li
644.744 445.559 li
645.073 444.728 li
645.402 443.897 li
645.731 443.066 li
646.06 442.235 li
646.389 441.404 li
646.718 440.573 li
647.047 439.742 li
647.376 438.91 li
647.706 438.079 li
648.035 437.247 li
648.364 436.416 li
648.693 435.584 li
649.022 434.752 li
649.351 433.92 li
649.68 433.088 li
650.009 432.257 li
650.338 431.425 li
650.667 430.593 li
650.997 429.761 li
651.326 428.928 li
651.655 428.097 li
651.984 427.265 li
652.313 426.432 li
652.642 425.601 li
652.971 424.769 li
653.3 423.937 li
653.629 423.104 li
653.958 422.272 li
654.288 421.441 li
654.617 420.609 li
654.946 419.777 li
655.275 418.945 li
655.604 418.114 li
655.933 417.283 li
656.262 416.451 li
656.591 415.62 li
656.92 414.789 li
657.25 413.958 li
657.579 413.127 li
657.908 412.297 li
658.237 411.466 li
658.566 410.635 li
658.895 409.805 li
659.224 408.975 li
659.553 408.145 li
659.882 407.314 li
660.211 406.484 li
660.541 405.656 li
660.87 404.826 li
661.199 403.997 li
661.528 403.168 li
661.857 402.34 li
662.186 401.512 li
662.515 400.684 li
662.844 399.855 li
663.173 399.027 li
663.502 398.199 li
663.832 397.373 li
664.161 396.545 li
664.49 395.719 li
664.819 394.893 li
665.148 394.066 li
665.477 393.24 li
665.806 392.415 li
666.135 391.59 li
666.464 390.766 li
666.793 389.94 li
667.123 389.116 li
667.452 388.292 li
667.781 387.469 li
668.11 386.646 li
668.439 385.822 li
668.768 385 li
669.097 384.178 li
669.426 383.355 li
669.755 382.535 li
670.084 381.714 li
670.414 380.893 li
670.743 380.073 li
671.072 379.254 li
671.401 378.434 li
671.73 377.615 li
672.059 376.797 li
672.388 375.979 li
672.717 375.161 li
673.046 374.344 li
673.375 373.527 li
673.705 372.711 li
674.034 371.896 li
674.363 371.08 li
674.692 370.266 li
675.021 369.451 li
675.35 368.638 li
675.68 367.824 li
676.008 367.012 li
676.338 366.199 li
676.666 365.388 li
676.996 364.576 li
677.324 363.766 li
677.654 362.956 li
677.982 362.146 li
678.313 361.338 li
678.641 360.529 li
678.971 359.722 li
679.299 358.914 li
679.629 358.107 li
679.957 357.303 li
680.287 356.496 li
680.615 355.691 li
680.945 354.888 li
681.273 354.084 li
681.604 353.281 li
681.932 352.479 li
682.262 351.678 li
682.59 350.877 li
682.92 350.076 li
683.248 349.277 li
683.578 348.479 li
683.906 347.68 li
684.236 346.883 li
684.564 346.086 li
684.895 345.29 li
685.223 344.494 li
685.553 343.7 li
685.881 342.906 li
686.211 342.113 li
686.539 341.32 li
686.869 340.529 li
687.197 339.738 li
687.527 338.947 li
687.855 338.158 li
688.186 337.37 li
688.514 336.582 li
688.844 335.794 li
689.172 335.008 li
689.502 334.223 li
689.83 333.438 li
690.16 332.654 li
690.488 331.871 li
690.818 331.089 li
691.146 330.308 li
691.477 329.527 li
691.805 328.747 li
692.135 327.969 li
692.463 327.19 li
692.793 326.414 li
693.121 325.637 li
693.451 324.862 li
693.779 324.087 li
694.109 323.313 li
694.438 322.541 li
694.768 321.77 li
695.096 320.999 li
695.426 320.229 li
695.754 319.459 li
696.084 318.691 li
696.412 317.924 li
696.742 317.158 li
697.07 316.393 li
697.4 315.629 li
697.729 314.865 li
698.059 314.103 li
698.387 313.342 li
698.717 312.581 li
699.045 311.822 li
699.375 311.063 li
699.703 310.306 li
700.033 309.55 li
700.361 308.794 li
700.691 308.04 li
701.02 307.287 li
701.35 306.535 li
701.678 305.784 li
702.008 305.033 li
702.336 304.284 li
702.666 303.536 li
702.994 302.79 li
703.324 302.043 li
703.652 301.299 li
703.982 300.555 li
704.311 299.813 li
704.641 299.071 li
704.969 298.331 li
705.299 297.591 li
705.627 296.853 li
705.957 296.116 li
706.285 295.38 li
706.615 294.646 li
706.943 293.912 li
707.273 293.18 li
707.602 292.448 li
707.932 291.718 li
708.26 290.989 li
708.59 290.261 li
708.918 289.535 li
709.248 288.81 li
709.576 288.085 li
709.906 287.362 li
710.234 286.641 li
710.564 285.92 li
710.893 285.2 li
711.223 284.482 li
711.551 283.766 li
711.881 283.05 li
712.209 282.335 li
712.539 281.622 li
712.867 280.91 li
713.197 280.2 li
713.525 279.49 li
713.855 278.782 li
714.184 278.075 li
714.514 277.37 li
714.842 276.666 li
715.172 275.963 li
715.5 275.261 li
715.83 274.561 li
716.158 273.862 li
716.488 273.164 li
716.816 272.468 li
717.146 271.773 li
717.475 271.08 li
717.805 270.387 li
718.133 269.696 li
718.463 269.007 li
718.791 268.318 li
719.121 267.632 li
719.449 266.946 li
719.779 266.262 li
720.107 265.58 li
720.438 264.898 li
720.766 264.218 li
721.096 263.54 li
721.424 262.863 li
721.754 262.188 li
722.082 261.513 li
722.412 260.84 li
722.74 260.169 li
723.07 259.499 li
723.398 258.831 li
723.729 258.164 li
724.057 257.498 li
724.387 256.834 li
724.715 256.171 li
725.045 255.51 li
725.373 254.851 li
725.703 254.192 li
726.031 253.536 li
726.361 252.881 li
726.689 252.227 li
727.02 251.575 li
727.348 250.924 li
727.678 250.275 li
728.006 249.627 li
728.336 248.981 li
728.664 248.337 li
728.994 247.694 li
729.322 247.053 li
729.652 246.413 li
729.98 245.774 li
730.311 245.138 li
730.639 244.502 li
730.969 243.869 li
731.297 243.237 li
731.627 242.607 li
731.955 241.978 li
732.285 241.351 li
732.613 240.725 li
732.943 240.101 li
733.271 239.479 li
733.602 238.858 li
733.93 238.239 li
734.26 237.622 li
734.588 237.005 li
734.918 236.392 li
735.246 235.779 li
735.576 235.168 li
735.904 234.559 li
736.234 233.951 li
736.563 233.345 li
736.893 232.741 li
737.221 232.138 li
737.551 231.537 li
737.879 230.938 li
738.209 230.34 li
738.537 229.745 li
738.867 229.15 li
739.195 228.558 li
739.525 227.968 li
739.854 227.378 li
740.184 226.791 li
740.512 226.206 li
740.842 225.622 li
741.17 225.04 li
741.5 224.459 li
741.828 223.881 li
742.158 223.304 li
742.486 222.729 li
742.816 222.156 li
743.145 221.584 li
743.475 221.015 li
743.803 220.447 li
744.133 219.881 li
744.461 219.316 li
744.791 218.754 li
745.119 218.193 li
745.449 217.634 li
745.777 217.077 li
746.107 216.521 li
746.436 215.968 li
746.766 215.416 li
747.094 214.866 li
747.424 214.318 li
747.752 213.772 li
748.082 213.228 li
748.41 212.685 li
748.74 212.144 li
749.068 211.605 li
749.398 211.068 li
749.727 210.533 li
750.057 210 li
750.385 209.469 li
750.715 208.939 li
751.043 208.412 li
751.373 207.886 li
751.701 207.362 li
752.031 206.84 li
752.359 206.32 li
752.689 205.802 li
753.018 205.286 li
753.348 204.771 li
753.676 204.259 li
754.006 203.749 li
754.334 203.24 li
754.664 202.733 li
754.992 202.229 li
755.322 201.726 li
755.65 201.225 li
755.98 200.727 li
756.309 200.229 li
756.639 199.734 li
756.967 199.242 li
757.297 198.75 li
757.625 198.262 li
757.955 197.774 li
758.283 197.29 li
758.613 196.807 li
758.941 196.325 li
759.271 195.846 li
759.6 195.369 li
759.93 194.894 li
760.258 194.421 li
760.588 193.95 li
760.916 193.48 li
761.246 193.014 li
761.574 192.548 li
761.904 192.085 li
762.232 191.625 li
762.563 191.166 li
762.891 190.708 li
763.221 190.254 li
763.549 189.801 li
763.879 189.35 li
764.207 188.901 li
764.537 188.455 li
764.865 188.01 li
765.195 187.567 li
765.523 187.126 li
765.854 186.688 li
766.182 186.252 li
766.512 185.817 li
766.84 185.385 li
767.17 184.955 li
767.498 184.527 li
767.828 184.101 li
768.156 183.677 li
768.486 183.255 li
768.814 182.836 li
769.145 182.418 li
769.473 182.003 li
769.803 181.589 li
770.131 181.178 li
770.461 180.769 li
770.789 180.362 li
771.119 179.958 li
771.447 179.555 li
771.777 179.154 li
772.105 178.756 li
772.436 178.359 li
772.764 177.965 li
773.094 177.573 li
773.422 177.184 li
773.752 176.796 li
774.08 176.41 li
774.41 176.027 li
774.738 175.646 li
775.068 175.267 li
775.396 174.89 li
775.727 174.515 li
776.055 174.143 li
776.385 173.772 li
776.713 173.404 li
777.043 173.038 li
777.371 172.674 li
777.701 172.313 li
778.029 171.953 li
778.359 171.596 li
778.688 171.241 li
779.018 170.888 li
779.346 170.538 li
779.676 170.189 li
780.004 169.843 li
780.334 169.499 li
780.662 169.158 li
780.992 168.818 li
781.32 168.481 li
781.65 168.146 li
781.979 167.813 li
782.309 167.482 li
782.637 167.154 li
782.967 166.828 li
783.295 166.504 li
783.625 166.183 li
783.953 165.863 li
784.283 165.546 li
784.611 165.231 li
784.941 164.919 li
785.27 164.608 li
785.6 164.301 li
785.928 163.995 li
786.258 163.691 li
786.586 163.39 li
786.916 163.091 li
787.244 162.794 li
787.574 162.5 li
787.902 162.208 li
788.232 161.918 li
788.561 161.63 li
788.891 161.345 li
789.219 161.063 li
789.549 160.782 li
789.877 160.503 li
790.207 160.227 li
790.535 159.953 li
790.865 159.682 li
791.193 159.413 li
791.523 159.146 li
791.852 158.881 li
792.182 158.619 li
792.51 158.359 li
792.84 158.102 li
793.168 157.846 li
793.498 157.593 li
793.826 157.342 li
794.156 157.094 li
794.484 156.848 li
794.814 156.604 li
795.143 156.363 li
795.473 156.124 li
795.801 155.887 li
796.131 155.653 li
796.459 155.421 li
796.789 155.191 li
797.117 154.964 li
797.447 154.739 li
797.775 154.517 li
798.105 154.296 li
798.434 154.078 li
798.764 153.863 li
799.092 153.649 li
799.422 153.438 li
799.75 153.23 li
800.08 153.024 li
800.408 152.82 li
800.738 152.619 li
801.066 152.42 li
801.396 152.223 li
801.725 152.029 li
802.055 151.837 li
802.383 151.647 li
802.713 151.46 li
803.041 151.275 li
803.371 151.093 li
803.699 150.913 li
804.029 150.735 li
804.357 150.56 li
804.688 150.387 li
805.016 150.217 li
805.346 150.048 li
805.674 149.883 li
806.004 149.719 li
806.332 149.559 li
806.662 149.4 li
806.99 149.244 li
807.32 149.09 li
807.648 148.938 li
807.979 148.79 li
808.307 148.643 li
808.637 148.499 li
808.965 148.357 li
809.295 148.218 li
809.623 148.081 li
809.953 147.946 li
810.281 147.813 li
810.611 147.684 li
810.939 147.557 li
811.27 147.432 li
811.598 147.309 li
811.928 147.189 li
812.256 147.071 li
812.586 146.956 li
812.914 146.843 li
813.244 146.733 li
813.572 146.625 li
813.902 146.519 li
814.23 146.416 li
814.561 146.315 li
814.889 146.217 li
815.219 146.121 li
815.547 146.027 li
815.877 145.936 li
816.205 145.847 li
816.535 145.761 li
816.863 145.677 li
817.193 145.596 li
817.521 145.517 li
817.852 145.44 li
818.18 145.366 li
818.51 145.294 li
818.838 145.225 li
819.168 145.158 li
819.496 145.094 li
819.826 145.032 li
820.154 144.973 li
820.484 144.915 li
820.813 144.861 li
821.143 144.809 li
821.471 144.758 li
821.801 144.711 li
822.129 144.666 li
822.459 144.624 li
822.787 144.583 li
823.117 144.546 li
823.445 144.511 li
823.775 144.478 li
824.104 144.447 li
824.434 144.419 li
824.762 144.394 li
825.092 144.371 li
825.42 144.351 li
825.75 144.333 li
826.078 144.316 li
826.408 144.303 li
826.736 144.292 li
827.066 144.284 li
827.395 144.278 li
827.725 144.274 li
828.053 144.273 li
828.383 144.275 li
828.711 144.278 li
829.041 144.285 li
829.369 144.293 li
829.699 144.305 li
830.027 144.318 li
830.357 144.334 li
830.686 144.353 li
831.016 144.373 li
831.344 144.396 li
831.674 144.422 li
832.002 144.45 li
832.332 144.481 li
832.66 144.514 li
832.99 144.549 li
833.318 144.587 li
833.648 144.627 li
833.977 144.67 li
834.307 144.715 li
834.635 144.763 li
834.965 144.813 li
835.293 144.866 li
835.623 144.921 li
835.951 144.978 li
836.281 145.038 li
836.609 145.1 li
836.939 145.165 li
837.268 145.232 li
837.598 145.301 li
837.926 145.373 li
838.256 145.447 li
838.584 145.524 li
838.914 145.604 li
839.242 145.685 li
839.572 145.769 li
839.9 145.855 li
840.23 145.945 li
840.559 146.036 li
840.889 146.13 li
841.217 146.226 li
841.547 146.325 li
841.875 146.426 li
842.205 146.529 li
842.533 146.635 li
842.863 146.743 li
843.191 146.854 li
843.521 146.967 li
843.85 147.083 li
844.18 147.2 li
844.508 147.321 li
844.838 147.443 li
845.166 147.569 li
845.496 147.696 li
845.824 147.826 li
846.154 147.958 li
846.482 148.094 li
846.813 148.23 li
847.141 148.37 li
847.471 148.512 li
847.799 148.657 li
848.129 148.804 li
848.457 148.953 li
848.787 149.104 li
849.115 149.258 li
849.445 149.415 li
849.773 149.574 li
850.104 149.735 li
850.432 149.898 li
850.762 150.064 li
851.09 150.232 li
851.42 150.403 li
851.748 150.577 li
852.078 150.752 li
852.406 150.93 li
852.736 151.11 li
853.064 151.293 li
853.395 151.478 li
853.723 151.666 li
854.053 151.855 li
854.381 152.047 li
854.711 152.242 li
855.039 152.438 li
855.369 152.638 li
855.697 152.84 li
856.027 153.043 li
856.355 153.25 li
856.686 153.458 li
857.014 153.67 li
857.344 153.883 li
857.672 154.099 li
858.002 154.317 li
858.33 154.538 li
858.66 154.76 li
858.988 154.986 li
859.318 155.213 li
859.646 155.443 li
859.977 155.675 li
860.305 155.91 li
860.635 156.146 li
860.963 156.386 li
861.293 156.627 li
861.621 156.871 li
861.951 157.118 li
862.279 157.366 li
862.609 157.617 li
862.938 157.87 li
863.268 158.126 li
863.596 158.384 li
863.926 158.644 li
864.254 158.906 li
864.584 159.171 li
864.912 159.438 li
865.242 159.708 li
865.57 159.979 li
865.9 160.253 li
866.229 160.529 li
866.559 160.808 li
866.887 161.089 li
867.217 161.372 li
867.545 161.658 li
867.875 161.945 li
868.203 162.235 li
868.533 162.528 li
868.861 162.822 li
869.191 163.12 li
869.52 163.418 li
869.85 163.72 li
870.178 164.024 li
870.508 164.33 li
870.836 164.638 li
871.166 164.949 li
871.494 165.261 li
871.824 165.576 li
872.152 165.894 li
872.482 166.213 li
872.811 166.535 li
873.141 166.859 li
873.469 167.186 li
873.799 167.514 li
874.127 167.845 li
874.457 168.178 li
874.785 168.513 li
875.115 168.85 li
875.443 169.19 li
875.773 169.532 li
876.102 169.876 li
876.432 170.223 li
876.76 170.571 li
877.09 170.922 li
877.418 171.275 li
877.748 171.63 li
878.076 171.987 li
878.406 172.347 li
878.734 172.708 li
879.064 173.073 li
879.393 173.439 li
879.723 173.807 li
880.051 174.178 li
880.381 174.55 li
880.709 174.925 li
881.039 175.302 li
881.367 175.682 li
881.697 176.063 li
882.025 176.447 li
882.355 176.833 li
882.684 177.22 li
883.014 177.61 li
883.342 178.002 li
883.672 178.397 li
884 178.793 li
884.33 179.192 li
884.658 179.593 li
884.988 179.996 li
885.316 180.401 li
885.646 180.808 li
885.975 181.217 li
886.305 181.629 li
886.633 182.042 li
886.963 182.458 li
887.291 182.875 li
887.621 183.295 li
887.949 183.718 li
888.279 184.142 li
888.607 184.568 li
888.938 184.996 li
889.266 185.426 li
889.596 185.859 li
889.924 186.293 li
890.254 186.73 li
890.582 187.168 li
890.912 187.609 li
891.24 188.052 li
891.57 188.497 li
891.898 188.944 li
892.229 189.393 li
892.557 189.844 li
892.887 190.297 li
893.215 190.752 li
893.545 191.209 li
893.873 191.668 li
894.203 192.129 li
894.531 192.593 li
894.861 193.058 li
895.189 193.525 li
895.52 193.995 li
895.848 194.466 li
896.178 194.939 li
896.506 195.415 li
896.836 195.892 li
897.164 196.371 li
897.494 196.853 li
897.822 197.335 li
898.152 197.821 li
898.48 198.308 li
898.811 198.797 li
899.139 199.289 li
899.469 199.782 li
899.797 200.277 li
900.127 200.774 li
900.455 201.273 li
900.785 201.774 li
901.113 202.277 li
901.443 202.782 li
901.771 203.289 li
902.102 203.797 li
902.43 204.308 li
902.76 204.82 li
903.088 205.335 li
903.418 205.851 li
903.746 206.37 li
904.076 206.89 li
904.404 207.412 li
904.734 207.936 li
905.063 208.462 li
905.393 208.989 li
905.721 209.519 li
906.051 210.051 li
906.379 210.584 li
906.709 211.12 li
907.037 211.657 li
907.367 212.196 li
907.695 212.736 li
908.025 213.279 li
908.354 213.824 li
908.684 214.37 li
909.012 214.918 li
909.342 215.469 li
909.67 216.021 li
910 216.574 li
910.328 217.13 li
910.658 217.687 li
910.986 218.246 li
911.316 218.807 li
911.645 219.37 li
911.975 219.935 li
912.303 220.501 li
912.633 221.069 li
912.961 221.639 li
913.291 222.21 li
913.619 222.784 li
913.949 223.359 li
914.277 223.936 li
914.607 224.515 li
914.936 225.095 li
915.266 225.678 li
915.594 226.262 li
915.924 226.847 li
916.252 227.435 li
916.582 228.023 li
916.91 228.614 li
917.24 229.207 li
917.568 229.801 li
917.898 230.397 li
918.227 230.995 li
918.557 231.594 li
918.885 232.195 li
919.215 232.798 li
919.543 233.403 li
919.873 234.009 li
920.201 234.616 li
920.531 235.226 li
920.859 235.837 li
921.189 236.45 li
921.518 237.064 li
921.848 237.68 li
922.176 238.298 li
922.506 238.917 li
922.834 239.538 li
923.164 240.161 li
923.492 240.785 li
923.822 241.41 li
924.15 242.038 li
924.48 242.667 li
924.809 243.297 li
925.139 243.929 li
925.467 244.563 li
925.797 245.198 li
926.125 245.835 li
926.455 246.474 li
926.783 247.114 li
927.113 247.755 li
927.441 248.398 li
927.771 249.043 li
928.1 249.689 li
928.43 250.337 li
928.758 250.986 li
929.088 251.637 li
929.416 252.289 li
929.746 252.943 li
930.074 253.598 li
930.404 254.255 li
930.732 254.913 li
931.063 255.573 li
931.391 256.234 li
931.721 256.897 li
932.049 257.561 li
932.379 258.227 li
932.707 258.894 li
933.037 259.563 li
933.365 260.233 li
933.695 260.904 li
934.023 261.577 li
934.354 262.251 li
934.682 262.927 li
935.012 263.604 li
935.34 264.283 li
935.67 264.963 li
935.998 265.645 li
936.328 266.327 li
936.656 267.012 li
936.986 267.697 li
937.314 268.384 li
937.645 269.072 li
937.973 269.762 li
938.303 270.453 li
938.631 271.146 li
938.961 271.839 li
939.289 272.534 li
939.619 273.23 li
939.947 273.929 li
940.277 274.627 li
940.605 275.328 li
940.936 276.03 li
941.264 276.733 li
941.594 277.437 li
941.922 278.143 li
942.252 278.85 li
942.58 279.558 li
942.91 280.268 li
943.238 280.978 li
943.568 281.69 li
943.896 282.403 li
944.227 283.118 li
944.555 283.833 li
944.885 284.551 li
945.213 285.269 li
945.543 285.988 li
945.871 286.709 li
946.201 287.431 li
946.529 288.154 li
946.859 288.878 li
947.188 289.604 li
947.518 290.331 li
947.846 291.059 li
948.176 291.788 li
948.504 292.518 li
948.834 293.249 li
949.162 293.982 li
949.492 294.715 li
949.82 295.45 li
950.15 296.187 li
950.479 296.923 li
950.809 297.662 li
951.137 298.401 li
951.467 299.142 li
951.795 299.883 li
952.125 300.626 li
952.453 301.37 li
952.783 302.114 li
953.111 302.86 li
953.441 303.607 li
953.77 304.355 li
954.1 305.105 li
954.428 305.855 li
954.758 306.606 li
955.086 307.358 li
955.416 308.112 li
955.744 308.866 li
956.074 309.622 li
956.402 310.378 li
956.732 311.136 li
957.061 311.894 li
957.391 312.654 li
957.719 313.414 li
958.049 314.176 li
958.377 314.938 li
958.707 315.701 li
959.035 316.466 li
959.365 317.231 li
959.693 317.997 li
960.023 318.765 li
960.352 319.533 li
960.682 320.302 li
961.01 321.072 li
961.34 321.843 li
961.668 322.615 li
961.998 323.388 li
962.326 324.161 li
962.656 324.936 li
962.984 325.711 li
963.314 326.487 li
963.643 327.265 li
963.973 328.042 li
964.301 328.821 li
964.631 329.602 li
964.959 330.382 li
965.289 331.164 li
965.617 331.946 li
965.947 332.729 li
966.275 333.513 li
966.605 334.297 li
966.934 335.083 li
967.264 335.869 li
967.592 336.656 li
967.922 337.444 li
968.25 338.233 li
968.58 339.022 li
968.908 339.813 li
969.238 340.604 li
969.566 341.396 li
969.896 342.188 li
970.225 342.981 li
970.555 343.775 li
970.883 344.57 li
971.213 345.365 li
971.541 346.162 li
971.871 346.959 li
972.199 347.756 li
972.529 348.555 li
972.857 349.354 li
973.188 350.152 li
973.516 350.953 li
973.846 351.754 li
974.174 352.556 li
974.504 353.357 li
974.832 354.16 li
975.162 354.965 li
975.49 355.769 li
975.82 356.573 li
976.148 357.379 li
976.479 358.185 li
976.807 358.991 li
977.137 359.799 li
977.465 360.606 li
977.795 361.414 li
978.123 362.224 li
978.453 363.033 li
978.781 363.844 li
979.111 364.654 li
979.439 365.465 li
979.77 366.276 li
980.098 367.089 li
980.428 367.901 li
980.756 368.715 li
981.086 369.529 li
981.414 370.343 li
981.744 371.158 li
982.072 371.973 li
982.402 372.789 li
982.73 373.605 li
983.061 374.422 li
983.389 375.238 li
983.719 376.057 li
984.047 376.875 li
984.377 377.693 li
984.705 378.512 li
985.035 379.332 li
985.363 380.151 li
985.693 380.971 li
986.021 381.792 li
986.352 382.613 li
986.68 383.435 li
987.01 384.256 li
987.338 385.078 li
987.668 385.9 li
987.996 386.724 li
988.326 387.547 li
988.654 388.371 li
988.984 389.194 li
989.313 390.02 li
989.643 390.844 li
989.971 391.668 li
990.301 392.494 li
990.629 393.319 li
990.959 394.145 li
991.287 394.971 li
991.617 395.798 li
991.945 396.625 li
992.275 397.451 li
992.604 398.278 li
992.934 399.105 li
993.262 399.934 li
993.592 400.762 li
993.92 401.59 li
994.25 402.418 li
994.578 403.247 li
994.908 404.076 li
995.236 404.905 li
995.566 405.734 li
995.895 406.564 li
996.225 407.394 li
996.553 408.224 li
996.883 409.054 li
997.211 409.884 li
997.541 410.715 li
997.869 411.545 li
998.199 412.375 li
998.527 413.206 li
998.857 414.037 li
999.186 414.868 li
999.516 415.699 li
999.844 416.531 li
1000.17 417.361 li
1000.5 418.193 li
1000.83 419.025 li
1001.16 419.856 li
1001.49 420.688 li
1001.82 421.52 li
1002.15 422.352 li
1002.48 423.184 li
1002.81 424.016 li
1003.13 424.848 li
1003.46 425.68 li
1003.79 426.512 li
1004.12 427.344 li
1004.45 428.176 li
1004.78 429.008 li
1005.11 429.84 li
1005.44 430.672 li
1005.77 431.504 li
1006.1 432.336 li
1006.43 433.168 li
1006.76 433.999 li
1007.08 434.831 li
1007.41 435.663 li
1007.74 436.495 li
1008.07 437.326 li
1008.4 438.158 li
1008.73 438.989 li
1009.06 439.821 li
1009.39 440.652 li
1009.72 441.483 li
1010.05 442.314 li
1010.38 443.146 li
1010.71 443.977 li
1011.03 444.807 li
1011.36 445.638 li
1011.69 446.468 li
1012.02 447.298 li
1012.35 448.128 li
1012.68 448.958 li
1013.01 449.788 li
1013.34 450.617 li
1013.67 451.446 li
1014 452.275 li
1014.33 453.104 li
1014.65 453.934 li
1014.98 454.762 li
1015.31 455.59 li
1015.64 456.418 li
1015.97 457.246 li
1016.3 458.074 li
1016.63 458.901 li
1016.96 459.729 li
1017.29 460.555 li
1017.62 461.382 li
1017.95 462.208 li
1018.27 463.033 li
1018.6 463.859 li
1018.93 464.685 li
1019.26 465.51 li
1019.59 466.334 li
1019.92 467.158 li
1020.25 467.982 li
1020.58 468.807 li
1020.91 469.63 li
1021.24 470.453 li
1021.56 471.275 li
1021.89 472.098 li
1022.22 472.919 li
1022.55 473.741 li
1022.88 474.562 li
1023.21 475.383 li
1023.54 476.203 li
1023.87 477.022 li
1024.2 477.843 li
1024.53 478.661 li
1024.86 479.479 li
1025.19 480.298 li
1025.51 481.116 li
1025.84 481.934 li
1026.17 482.75 li
1026.5 483.566 li
1026.83 484.382 li
1027.16 485.197 li
1027.49 486.013 li
1027.82 486.827 li
1028.15 487.641 li
1028.48 488.454 li
1028.8 489.267 li
1029.13 490.079 li
1029.46 490.892 li
1029.79 491.702 li
1030.12 492.514 li
1030.45 493.323 li
1030.78 494.133 li
1031.11 494.942 li
1031.44 495.751 li
1031.77 496.559 li
1032.1 497.366 li
1032.43 498.173 li
1032.75 498.979 li
1033.08 499.784 li
1033.41 500.589 li
1033.74 501.394 li
1034.07 502.197 li
1034.4 503 li
1034.73 503.803 li
1035.06 504.604 li
1035.39 505.405 li
1035.72 506.206 li
1036.04 507.006 li
1036.38 507.805 li
1036.7 508.604 li
1037.03 509.4 li
1037.36 510.197 li
1037.69 510.994 li
1038.02 511.79 li
1038.35 512.585 li
1038.68 513.379 li
1039.01 514.172 li
1039.34 514.965 li
1039.67 515.757 li
1039.99 516.548 li
1040.32 517.339 li
1040.65 518.128 li
1040.98 518.917 li
1041.31 519.705 li
1041.64 520.492 li
1041.97 521.279 li
1042.3 522.064 li
1042.63 522.85 li
1042.96 523.634 li
1043.29 524.417 li
1043.62 525.199 li
1043.94 525.981 li
1044.27 526.762 li
1044.6 527.542 li
1044.93 528.321 li
1045.26 529.1 li
1045.59 529.877 li
1045.92 530.653 li
1046.25 531.429 li
1046.58 532.204 li
1046.91 532.978 li
1047.23 533.751 li
1047.56 534.522 li
1047.89 535.294 li
1048.22 536.064 li
1048.55 536.833 li
1048.88 537.602 li
1049.21 538.369 li
1049.54 539.136 li
1049.87 539.901 li
1050.2 540.666 li
1050.53 541.43 li
1050.86 542.192 li
1051.18 542.954 li
1051.51 543.715 li
1051.84 544.475 li
1052.17 545.232 li
1052.5 545.99 li
1052.83 546.747 li
1053.16 547.503 li
1053.49 548.258 li
1053.82 549.011 li
1054.15 549.764 li
1054.47 550.516 li
1054.8 551.266 li
1055.13 552.016 li
1055.46 552.764 li
1055.79 553.511 li
1056.12 554.257 li
1056.45 555.002 li
1056.78 555.746 li
1057.11 556.489 li
1057.44 557.231 li
1057.77 557.972 li
1058.1 558.712 li
1058.42 559.45 li
1058.75 560.188 li
1059.08 560.924 li
1059.41 561.659 li
1059.74 562.393 li
1060.07 563.126 li
1060.4 563.857 li
1060.73 564.588 li
1061.06 565.317 li
1061.39 566.045 li
1061.71 566.772 li
1062.04 567.498 li
1062.37 568.223 li
1062.7 568.946 li
1063.03 569.668 li
1063.36 570.39 li
1063.69 571.109 li
1064.02 571.827 li
1064.35 572.545 li
1064.68 573.261 li
1065.01 573.976 li
1065.34 574.689 li
1065.66 575.401 li
1065.99 576.112 li
1066.32 576.822 li
1066.65 577.531 li
1066.98 578.238 li
1067.31 578.944 li
1067.64 579.648 li
1067.97 580.352 li
1068.3 581.054 li
1068.63 581.755 li
1068.96 582.454 li
1069.29 583.152 li
1069.62 583.849 li
1069.94 584.544 li
1070.27 585.238 li
1070.6 585.932 li
1070.93 586.623 li
1071.26 587.313 li
1071.59 588.001 li
1071.92 588.688 li
1072.25 589.374 li
1072.58 590.059 li
1072.9 590.742 li
1073.23 591.424 li
1073.56 592.104 li
1073.89 592.783 li
1074.22 593.461 li
1074.55 594.137 li
1074.88 594.812 li
1075.21 595.484 li
1075.54 596.156 li
1075.87 596.827 li
1076.2 597.496 li
1076.53 598.163 li
1076.85 598.829 li
1077.18 599.494 li
1077.51 600.157 li
1077.84 600.818 li
1078.17 601.479 li
1078.5 602.137 li
1078.83 602.794 li
1079.16 603.45 li
1079.49 604.104 li
1079.82 604.757 li
1080.14 605.408 li
1080.47 606.058 li
1080.8 606.705 li
1081.13 607.353 li
1081.46 607.997 li
1081.79 608.641 li
1082.12 609.282 li
1082.45 609.923 li
1082.78 610.562 li
1083.11 611.199 li
1083.44 611.835 li
1083.77 612.469 li
1084.09 613.102 li
1084.42 613.732 li
1084.75 614.361 li
1085.08 614.989 li
1085.41 615.615 li
1085.74 616.24 li
1086.07 616.862 li
1086.4 617.484 li
1086.73 618.104 li
1087.06 618.722 li
1087.38 619.338 li
1087.71 619.953 li
1088.04 620.566 li
1088.37 621.178 li
1088.7 621.787 li
1089.03 622.396 li
1089.36 623.002 li
1089.69 623.606 li
1090.02 624.21 li
1090.35 624.812 li
1090.68 625.411 li
1091.01 626.009 li
1091.33 626.605 li
1091.66 627.2 li
1091.99 627.793 li
1092.32 628.385 li
1092.65 628.974 li
1092.98 629.562 li
1093.31 630.148 li
1093.64 630.732 li
1093.97 631.314 li
1094.3 631.896 li
1094.63 632.475 li
1094.96 633.053 li
1095.28 633.628 li
1095.61 634.202 li
1095.94 634.773 li
1096.27 635.344 li
1096.6 635.913 li
1096.93 636.479 li
1097.26 637.044 li
1097.59 637.607 li
1097.92 638.169 li
1098.25 638.729 li
1098.58 639.286 li
1098.9 639.842 li
1099.23 640.396 li
1099.56 640.949 li
1099.89 641.499 li
1100.22 642.048 li
1100.55 642.595 li
1100.88 643.14 li
1101.21 643.683 li
1101.54 644.225 li
1101.87 644.764 li
1102.2 645.301 li
1102.52 645.837 li
1102.85 646.371 li
1103.18 646.902 li
1103.51 647.433 li
1103.84 647.961 li
1104.17 648.487 li
1104.5 649.012 li
1104.83 649.534 li
1105.16 650.055 li
1105.49 650.574 li
1105.81 651.091 li
1106.14 651.605 li
1106.47 652.119 li
1106.8 652.63 li
1107.13 653.139 li
1107.46 653.646 li
1107.79 654.151 li
1108.12 654.655 li
1108.45 655.156 li
1108.78 655.656 li
1109.11 656.153 li
1109.44 656.648 li
1109.76 657.143 li
1110.09 657.634 li
1110.42 658.124 li
1110.75 658.611 li
1111.08 659.098 li
1111.41 659.581 li
1111.74 660.063 li
1112.07 660.543 li
1112.4 661.021 li
1112.73 661.496 li
1113.05 661.97 li
1113.38 662.441 li
1113.71 662.911 li
1114.04 663.379 li
1114.37 663.845 li
1114.7 664.309 li
1115.03 664.771 li
1115.36 665.23 li
1115.69 665.688 li
1116.02 666.144 li
1116.35 666.597 li
1116.68 667.048 li
1117 667.498 li
1117.33 667.945 li
1117.66 668.391 li
1117.99 668.834 li
1118.32 669.275 li
1118.65 669.714 li
1118.98 670.151 li
1119.31 670.586 li
1119.64 671.02 li
1119.97 671.45 li
1120.29 671.879 li
1120.63 672.306 li
1120.95 672.729 li
1121.28 673.152 li
1121.61 673.572 li
1121.94 673.991 li
1122.27 674.407 li
1122.6 674.821 li
1122.93 675.233 li
1123.26 675.643 li
1123.59 676.051 li
1123.92 676.456 li
1124.24 676.859 li
1124.57 677.261 li
1124.9 677.66 li
1125.23 678.057 li
1125.56 678.452 li
1125.89 678.845 li
1126.22 679.235 li
1126.55 679.623 li
1126.88 680.01 li
1127.21 680.394 li
1127.54 680.775 li
1127.87 681.155 li
1128.19 681.533 li
1128.52 681.908 li
1128.85 682.281 li
1129.18 682.652 li
1129.51 683.021 li
1129.84 683.389 li
1130.17 683.753 li
1130.5 684.115 li
1130.83 684.476 li
1131.16 684.833 li
1131.48 685.188 li
1131.81 685.542 li
1132.14 685.894 li
1132.47 686.243 li
1132.8 686.59 li
1133.13 686.935 li
1133.46 687.276 li
1133.79 687.617 li
1134.12 687.955 li
1134.45 688.291 li
1134.78 688.624 li
1135.11 688.955 li
1135.43 689.284 li
1135.76 689.611 li
1136.09 689.936 li
1136.42 690.258 li
1136.75 690.578 li
1137.08 690.896 li
1137.41 691.212 li
1137.74 691.525 li
1138.07 691.836 li
1138.4 692.145 li
1138.72 692.451 li
1139.05 692.756 li
1139.38 693.058 li
1139.71 693.357 li
1140.04 693.654 li
1140.37 693.95 li
1140.7 694.243 li
1141.03 694.533 li
1141.36 694.821 li
1141.69 695.107 li
1142.02 695.392 li
1142.35 695.673 li
1142.67 695.952 li
1143 696.229 li
1143.33 696.504 li
1143.66 696.775 li
1143.99 697.046 li
1144.32 697.313 li
1144.65 697.578 li
1144.98 697.842 li
1145.31 698.103 li
1145.64 698.36 li
1145.96 698.617 li
1146.29 698.87 li
1146.62 699.122 li
1146.95 699.371 li
1147.28 699.618 li
1147.61 699.862 li
1147.94 700.104 li
1148.27 700.344 li
1148.6 700.582 li
1148.93 700.816 li
1149.26 701.05 li
1149.59 701.28 li
1149.91 701.508 li
1150.24 701.733 li
1150.57 701.957 li
1150.9 702.178 li
1151.23 702.396 li
1151.56 702.613 li
1151.89 702.827 li
1152.22 703.039 li
1152.55 703.248 li
1152.88 703.455 li
1153.21 703.659 li
1153.54 703.861 li
1153.87 704.062 li
1154.19 704.259 li
1154.52 704.454 li
1154.85 704.646 li
1155.18 704.837 li
1155.51 705.025 li
1155.84 705.211 li
1156.17 705.394 li
1156.5 705.574 li
1156.83 705.753 li
1157.15 705.93 li
1157.48 706.103 li
1157.81 706.274 li
1158.14 706.443 li
1158.47 706.609 li
1158.8 706.773 li
1159.13 706.936 li
1159.46 707.095 li
1159.79 707.252 li
1160.12 707.406 li
1160.45 707.559 li
1160.78 707.708 li
1161.1 707.855 li
1161.43 708.001 li
1161.76 708.144 li
1162.09 708.283 li
1162.42 708.421 li
1162.75 708.557 li
1163.08 708.689 li
1163.41 708.82 li
1163.74 708.948 li
1164.07 709.074 li
1164.39 709.197 li
1164.72 709.318 li
1165.05 709.437 li
1165.38 709.553 li
1165.71 709.667 li
1166.04 709.778 li
1166.37 709.887 li
1166.7 709.993 li
1167.03 710.098 li
1167.36 710.199 li
1167.69 710.298 li
1168.02 710.395 li
1168.34 710.489 li
1168.67 710.581 li
1169 710.67 li
1169.33 710.758 li
1169.66 710.842 li
1169.99 710.924 li
1170.32 711.004 li
1170.65 711.082 li
1170.98 711.156 li
1171.31 711.229 li
1171.63 711.299 li
1171.96 711.367 li
1172.29 711.432 li
1172.62 711.495 li
1172.95 711.555 li
1173.28 711.613 li
1173.61 711.669 li
1173.94 711.722 li
1174.27 711.772 li
1174.6 711.82 li
1174.93 711.866 li
1175.26 711.909 li
1175.58 711.95 li
1175.91 711.989 li
1176.24 712.024 li
1176.57 712.059 li
1176.9 712.09 li
1177.23 712.118 li
1177.56 712.145 li
1177.89 712.168 li
1178.22 712.189 li
1178.55 712.209 li
1178.88 712.226 li
1179.21 712.239 li
1179.53 712.251 li
1179.86 712.261 li
1180.19 712.268 li
1180.52 712.271 li
1180.85 712.273 li
1181.18 712.272 li
1181.51 712.27 li
1181.84 712.265 li
1182.17 712.257 li
1182.5 712.246 li
1182.83 712.233 li
1183.15 712.219 li
1183.48 712.201 li
1183.81 712.181 li
1184.14 712.158 li
1184.47 712.134 li
1184.8 712.106 li
1185.13 712.076 li
1185.46 712.044 li
1185.79 712.01 li
1186.12 711.973 li
1186.45 711.933 li
1186.77 711.891 li
1187.1 711.847 li
1187.43 711.8 li
1187.76 711.751 li
1188.09 711.699 li
1188.42 711.645 li
1188.75 711.588 li
1189.08 711.529 li
1189.41 711.468 li
1189.74 711.404 li
1190.06 711.338 li
1190.39 711.269 li
1190.72 711.197 li
1191.05 711.124 li
1191.38 711.048 li
1191.71 710.97 li
1192.04 710.889 li
1192.37 710.806 li
1192.7 710.72 li
1193.03 710.632 li
1193.36 710.541 li
1193.69 710.448 li
1194.01 710.354 li
1194.34 710.255 li
1194.67 710.155 li
1195 710.053 li
1195.33 709.947 li
1195.66 709.84 li
1195.99 709.729 li
1196.32 709.617 li
1196.65 709.503 li
1196.98 709.386 li
1197.3 709.266 li
1197.63 709.145 li
1197.96 709.02 li
1198.29 708.893 li
1198.62 708.764 li
1198.95 708.632 li
1199.28 708.498 li
1199.61 708.361 li
1199.94 708.223 li
1200.27 708.082 li
1200.6 707.938 li
1200.93 707.792 li
1201.25 707.644 li
1201.58 707.493 li
1201.91 707.34 li
1202.24 707.184 li
1202.57 707.026 li
1202.9 706.865 li
1203.23 706.703 li
1203.56 706.538 li
1203.89 706.37 li
1204.22 706.2 li
1204.54 706.027 li
1204.88 705.854 li
1205.2 705.676 li
1205.53 705.496 li
1205.86 705.314 li
1206.19 705.13 li
1206.52 704.943 li
1206.85 704.755 li
1207.18 704.563 li
1207.51 704.369 li
1207.84 704.174 li
1208.17 703.975 li
1208.49 703.774 li
1208.82 703.571 li
1209.15 703.365 li
1209.48 703.157 li
1209.81 702.947 li
1210.14 702.734 li
1210.47 702.52 li
1210.8 702.302 li
1211.13 702.082 li
1211.46 701.86 li
1211.79 701.636 li
1212.12 701.409 li
1212.44 701.18 li
1212.77 700.948 li
1213.1 700.715 li
1213.43 700.479 li
1213.76 700.24 li
1214.09 699.999 li
1214.42 699.756 li
1214.75 699.511 li
1215.08 699.263 li
1215.41 699.013 li
1215.73 698.761 li
1216.06 698.506 li
1216.39 698.249 li
1216.72 697.989 li
1217.05 697.728 li
1217.38 697.464 li
1217.71 697.197 li
1218.04 696.929 li
1218.37 696.657 li
1218.7 696.385 li
1219.03 696.108 li
1219.36 695.831 li
1219.68 695.551 li
1220.01 695.269 li
1220.34 694.983 li
1220.67 694.696 li
1221 694.407 li
1221.33 694.115 li
1221.66 693.822 li
1221.99 693.525 li
1222.32 693.228 li
1222.65 692.927 li
1222.97 692.624 li
1223.3 692.318 li
1223.63 692.011 li
1223.96 691.701 li
1224.29 691.389 li
1224.62 691.075 li
1224.95 690.758 li
1225.28 690.439 li
1225.61 690.118 li
1225.94 689.795 li
1226.27 689.47 li
1226.6 689.142 li
1226.92 688.812 li
1227.25 688.479 li
1227.58 688.145 li
1227.91 687.809 li
1228.24 687.47 li
1228.57 687.128 li
1228.9 686.785 li
1229.23 686.439 li
1229.56 686.092 li
1229.89 685.741 li
1230.21 685.389 li
1230.54 685.034 li
1230.87 684.678 li
1231.2 684.319 li
1231.53 683.958 li
1231.86 683.595 li
1232.19 683.229 li
1232.52 682.861 li
1232.85 682.492 li
1233.18 682.12 li
1233.51 681.746 li
1233.84 681.369 li
1234.16 680.99 li
1234.49 680.61 li
1234.82 680.228 li
1235.15 679.842 li
1235.48 679.455 li
1235.81 679.065 li
1236.14 678.674 li
1236.47 678.28 li
1236.8 677.885 li
1237.13 677.486 li
1237.46 677.087 li
1237.79 676.685 li
1238.12 676.28 li
1238.44 675.874 li
1238.77 675.465 li
1239.1 675.055 li
1239.43 674.642 li
1239.76 674.227 li
1240.09 673.81 li
1240.42 673.391 li
1240.75 672.969 li
1241.08 672.546 li
1241.4 672.12 li
1241.73 671.692 li
1242.06 671.263 li
1242.39 670.831 li
1242.72 670.397 li
1243.05 669.961 li
1243.38 669.523 li
1243.71 669.083 li
1244.04 668.642 li
1244.37 668.197 li
1244.7 667.751 li
1245.03 667.303 li
1245.35 666.853 li
1245.68 666.4 li
1246.01 665.945 li
1246.34 665.489 li
1246.67 665.03 li
1247 664.57 li
1247.33 664.107 li
1247.66 663.643 li
1247.99 663.176 li
1248.32 662.707 li
1248.64 662.237 li
1248.97 661.765 li
1249.3 661.29 li
1249.63 660.813 li
1249.96 660.334 li
1250.29 659.854 li
1250.62 659.371 li
1250.95 658.887 li
1251.28 658.4 li
1251.61 657.911 li
1251.94 657.421 li
1252.27 656.928 li
1252.59 656.434 li
1252.92 655.938 li
1253.25 655.439 li
1253.58 654.938 li
1253.91 654.437 li
1254.24 653.933 li
1254.57 653.426 li
1254.9 652.918 li
1255.23 652.408 li
1255.56 651.896 li
1255.88 651.382 li
1256.21 650.866 li
1256.54 650.349 li
1256.87 649.829 li
1257.2 649.308 li
1257.53 648.784 li
1257.86 648.259 li
1258.19 647.731 li
1258.52 647.203 li
1258.85 646.672 li
1259.18 646.139 li
1259.51 645.604 li
1259.83 645.067 li
1260.16 644.529 li
1260.49 643.989 li
1260.82 643.447 li
1261.15 642.903 li
1261.48 642.357 li
1261.81 641.81 li
1262.14 641.26 li
1262.47 640.709 li
1262.8 640.156 li
1263.13 639.601 li
1263.46 639.044 li
1263.78 638.485 li
1264.11 637.925 li
1264.44 637.363 li
1264.77 636.799 li
1265.1 636.233 li
1265.43 635.666 li
1265.76 635.097 li
1266.09 634.525 li
1266.42 633.952 li
1266.75 633.378 li
1267.08 632.802 li
1267.4 632.224 li
1267.73 631.644 li
1268.06 631.062 li
1268.39 630.479 li
1268.72 629.894 li
1269.05 629.307 li
1269.38 628.718 li
1269.71 628.128 li
1270.04 627.536 li
1270.37 626.942 li
1270.7 626.347 li
1271.02 625.749 li
1271.35 625.15 li
1271.68 624.55 li
1272.01 623.948 li
1272.34 623.344 li
1272.67 622.738 li
1273 622.131 li
1273.33 621.522 li
1273.66 620.912 li
1273.99 620.3 li
1274.31 619.686 li
1274.64 619.07 li
1274.97 618.453 li
1275.3 617.835 li
1275.63 617.214 li
1275.96 616.592 li
1276.29 615.969 li
1276.62 615.344 li
1276.95 614.717 li
1277.28 614.088 li
1277.61 613.458 li
1277.94 612.826 li
1278.26 612.193 li
1278.59 611.559 li
1278.92 610.922 li
1279.25 610.284 li
1279.58 609.645 li
1279.91 609.004 li
1280.24 608.361 li
1280.57 607.717 li
1280.9 607.071 li
1281.23 606.424 li
1281.55 605.775 li
1281.88 605.125 li
1282.21 604.474 li
1282.54 603.82 li
1282.87 603.165 li
1283.2 602.509 li
1283.53 601.852 li
1283.86 601.191 li
1284.19 600.531 li
1284.52 599.869 li
1284.85 599.205 li
1285.18 598.54 li
1285.5 597.873 li
1285.83 597.205 li
1286.16 596.535 li
1286.49 595.864 li
1286.82 595.192 li
1287.15 594.519 li
1287.48 593.843 li
1287.81 593.166 li
1288.14 592.488 li
1288.47 591.809 li
1288.79 591.128 li
1289.13 590.445 li
1289.45 589.762 li
1289.78 589.076 li
1290.11 588.39 li
1290.44 587.702 li
1290.77 587.013 li
1291.1 586.322 li
1291.43 585.63 li
1291.76 584.938 li
1292.09 584.242 li
1292.42 583.546 li
1292.74 582.849 li
1293.07 582.15 li
1293.4 581.45 li
1293.73 580.749 li
1294.06 580.047 li
1294.39 579.343 li
1294.72 578.638 li
1295.05 577.931 li
1295.38 577.223 li
1295.71 576.514 li
1296.04 575.804 li
1296.37 575.092 li
1296.69 574.379 li
1297.02 573.665 li
1297.35 572.95 li
1297.68 572.233 li
1298.01 571.516 li
1298.34 570.796 li
1298.67 570.076 li
1299 569.354 li
1299.33 568.632 li
1299.66 567.908 li
1299.98 567.183 li
1300.31 566.456 li
1300.64 565.729 li
1300.97 565 li
1301.3 564.271 li
1301.63 563.539 li
1301.96 562.808 li
1302.29 562.074 li
1302.62 561.34 li
1302.95 560.604 li
1303.28 559.867 li
1303.61 559.129 li
1303.93 558.391 li
1304.26 557.65 li
1304.59 556.909 li
1304.92 556.167 li
1305.25 555.423 li
1305.58 554.679 li
1305.91 553.933 li
1306.24 553.187 li
1306.57 552.438 li
1306.9 551.689 li
1307.22 550.939 li
1307.55 550.188 li
1307.88 549.437 li
1308.21 548.684 li
1308.54 547.93 li
1308.87 547.175 li
1309.2 546.419 li
1309.53 545.661 li
1309.86 544.903 li
1310.19 544.145 li
1310.52 543.384 li
1310.85 542.623 li
1311.17 541.86 li
1311.5 541.098 li
1311.83 540.334 li
1312.16 539.568 li
1312.49 538.803 li
1312.82 538.036 li
1313.15 537.268 li
1313.48 536.499 li
1313.81 535.729 li
1314.14 534.959 li
1314.46 534.188 li
1314.79 533.415 li
1315.12 532.642 li
1315.45 531.867 li
1315.78 531.092 li
1316.11 530.316 li
1316.44 529.539 li
1316.77 528.762 li
1317.1 527.982 li
1317.43 527.203 li
1317.76 526.423 li
1318.09 525.642 li
1318.41 524.859 li
1318.74 524.077 li
1319.07 523.293 li
1319.4 522.509 li
1319.73 521.724 li
1320.06 520.938 li
1320.39 520.15 li
1320.72 519.362 li
1321.05 518.574 li
1321.38 517.785 li
1321.71 516.995 li
1322.04 516.204 li
1322.37 515.413 li
1322.69 514.62 li
1323.02 513.827 li
1323.35 513.034 li
1323.68 512.239 li
1324.01 511.444 li
1324.34 510.648 li
1324.67 509.852 li
1325 509.054 li
1325.33 508.256 li
1325.65 507.457 li
1325.98 506.658 li
1326.31 505.858 li
1326.64 505.058 li
1326.97 504.256 li
1327.3 503.454 li
1327.63 502.651 li
1327.96 501.848 li
1328.29 501.044 li
1328.62 500.239 li
1328.95 499.435 li
1329.28 498.629 li
1329.6 497.822 li
1329.93 497.015 li
1330.26 496.208 li
1330.59 495.399 li
1330.92 494.591 li
1331.25 493.781 li
1331.58 492.972 li
1331.91 492.161 li
1332.24 491.35 li
1332.57 490.538 li
1332.89 489.727 li
1333.22 488.914 li
1333.55 488.101 li
1333.88 487.287 li
1334.21 486.473 li
1334.54 485.658 li
1334.87 484.843 li
1335.2 484.027 li
1335.53 483.212 li
1335.86 482.396 li
1336.19 481.578 li
1336.52 480.761 li
1336.84 479.942 li
1337.17 479.124 li
1337.5 478.306 li
1337.83 477.486 li
1338.16 476.667 li
1338.49 475.847 li
1338.82 475.026 li
1339.15 474.205 li
1339.48 473.384 li
1339.81 472.563 li
1340.13 471.74 li
1340.46 470.918 li
1340.79 470.095 li
1341.12 469.271 li
1341.45 468.448 li
1341.78 467.625 li
1342.11 466.801 li
1342.44 465.976 li
1342.77 465.151 li
1343.1 464.326 li
1343.43 463.5 li
1343.76 462.675 li
1344.08 461.849 li
1344.41 461.022 li
1344.74 460.195 li
1345.07 459.369 li
1345.4 458.542 li
1345.73 457.714 li
1346.06 456.887 li
1346.39 456.059 li
1346.72 455.23 li
1347.05 454.402 li
1347.38 453.573 li
1347.71 452.744 li
1348.03 451.916 li
1348.36 451.086 li
1348.69 450.257 li
1349.02 449.428 li
1349.35 448.598 li
1349.68 447.768 li
false sop
0 0 0 rgb
@
grestore
gsave
1184.88 409.408 mo
1340.71 409.408 li
1340.71 335.488 li
1184.88 335.488 li
clp
1208.41 369.136 mo
1208.84 367.271 1210.49 360.665 1215.51 360.665 cv
1215.86 360.665 1217.58 360.665 1219.09 361.665 cv
1217.08 362.021 1215.64 363.82 1215.64 365.542 cv
1215.64 366.691 1216.43 368.056 1218.37 368.056 cv
1219.94 368.056 1222.24 366.75 1222.24 363.852 cv
1222.24 360.083 1218.05 359.066 1215.64 359.066 cv
1211.48 359.066 1208.96 362.93 1208.1 364.605 cv
1206.31 359.793 1202.43 359.066 1200.35 359.066 cv
1192.88 359.066 1188.78 368.382 1188.78 370.188 cv
1188.78 370.91 1189.5 370.91 1189.64 370.91 cv
1190.21 370.91 1190.43 370.765 1190.57 370.119 cv
1193.01 362.469 1197.73 360.665 1200.17 360.665 cv
1201.53 360.665 1204.04 361.313 1204.04 365.477 cv
1204.04 367.704 1202.82 372.515 1200.17 382.565 cv
1199.03 387.015 1196.52 390.031 1193.37 390.031 cv
1192.93 390.031 1191.29 390.031 1189.78 389.036 cv
1191.53 388.677 1193.07 387.169 1193.07 385.16 cv
1193.07 383.22 1191.5 382.645 1190.42 382.645 cv
1188.27 382.645 1186.48 384.529 1186.48 386.847 cv
1186.48 390.179 1190.07 391.626 1193.23 391.626 cv
1197.97 391.626 1200.55 386.604 1200.77 386.174 cv
1201.63 388.831 1204.21 391.626 1208.52 391.626 cv
1215.92 391.626 1220.02 382.379 1220.02 380.586 cv
1220.02 379.869 1219.38 379.869 1219.16 379.869 cv
1218.52 379.869 1218.37 380.16 1218.23 380.659 cv
1215.87 388.312 1210.99 390.029 1208.7 390.029 cv
1205.91 390.029 1204.76 387.729 1204.76 385.289 cv
1204.76 383.709 1205.19 382.131 1205.98 378.97 cv
false sop
0 0 0 rgb
f
1267.48 408.81 mo
1267.48 406.011 li
1260.4 406.011 li
1260.4 339.885 li
1267.48 339.885 li
1267.48 337.089 li
1257.6 337.089 li
1257.6 408.81 li
f
1276.98 366.1 mo
1276.98 385.391 li
1276.98 388.628 1276.2 388.628 1271.48 388.628 cv
1271.48 390.826 li
1273.99 390.754 1277.64 390.612 1279.58 390.612 cv
1281.44 390.612 1285.17 390.754 1287.6 390.826 cv
1287.6 388.628 li
1282.77 388.628 1281.97 388.628 1281.97 385.391 cv
1281.97 372.163 li
1281.97 364.687 1287.06 360.66 1291.65 360.66 cv
1296.17 360.66 1296.96 364.542 1296.96 368.639 cv
1296.96 385.391 li
1296.96 388.628 1296.17 388.628 1291.4 388.628 cv
1291.4 390.826 li
1293.91 390.754 1297.56 390.612 1299.5 390.612 cv
1301.36 390.612 1305.08 390.754 1307.52 390.826 cv
1307.52 388.628 li
1302.74 388.628 1301.95 388.628 1301.95 385.391 cv
1301.95 372.163 li
1301.95 364.687 1307.04 360.66 1311.63 360.66 cv
1316.15 360.66 1316.94 364.542 1316.94 368.639 cv
1316.94 385.391 li
1316.94 388.628 1316.14 388.628 1311.32 388.628 cv
1311.32 390.826 li
1313.83 390.754 1317.48 390.612 1319.42 390.612 cv
1321.28 390.612 1325 390.754 1327.44 390.826 cv
1327.44 388.628 li
1323.77 388.628 1322 388.628 1321.93 386.473 cv
1321.93 372.733 li
1321.93 366.548 1321.93 364.315 1319.7 361.725 cv
1318.69 360.504 1316.32 359.061 1312.16 359.061 cv
1306.13 359.061 1302.97 363.418 1301.75 366.177 cv
1300.74 359.863 1295.43 359.061 1292.2 359.061 cv
1286.96 359.061 1283.59 362.181 1281.58 366.68 cv
1281.58 359.064 li
1271.48 359.851 li
1271.48 362.062 li
1276.42 362.062 1276.98 362.568 1276.98 366.096 cv
f
1340.31 337.089 mo
1330.5 337.089 li
1330.5 339.885 li
1337.51 339.885 li
1337.51 406.011 li
1330.5 406.011 li
1330.5 408.81 li
1340.31 408.81 li
f
grestore
gsave
1012.81 413.118 mo
1048.38 413.118 li
1048.38 364.441 li
1012.81 364.441 li
1012.81 413.118 li
cp
clp
1035.03 392.201 mo
1037.78 399.25 1040.99 409.524 1042.06 411.069 cv
1043.13 412.544 1043.8 412.544 1045.61 412.544 cv
1047.08 412.544 li
1047.75 412.478 1047.82 412.065 1047.82 411.86 cv
1047.82 411.656 1047.68 411.518 1047.48 411.244 cv
1046.82 410.505 1046.41 409.5 1045.94 408.156 cv
1032.29 369.959 li
1030.89 366.064 1027.27 365.188 1024.13 365.188 cv
1023.79 365.188 1022.92 365.188 1022.92 365.876 cv
1022.92 366.375 1023.46 366.5 1023.52 366.5 cv
1025.73 366.915 1026.2 367.318 1027.87 371.902 cv
1029.61 376.755 1033.29 387.064 1034.36 390.231 cv
1015.89 408.697 li
1015.09 409.505 1014.69 409.91 1014.69 410.785 cv
1014.69 411.932 1015.62 412.74 1016.69 412.74 cv
1017.77 412.74 1018.37 411.956 1018.9 411.242 cv
false sop
0 0 0 rgb
f
grestore
4 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
796.203 113.026 mo
1022.98 113.026 li
false sop
0.101961 0.0745098 0.0666667 rgb
@
1003 99.7212 mo
1018.77 113.026 li
1003 126.331 li
1048.82 113.026 li
1003 99.7212 li
cp
f
1009.49 103.584 mo
1043.78 113.026 li
1021.19 113.026 li
1009.49 103.584 li
cp
1 1 1 rgb
f
gsave
888.545 101.74 mo
924.095 101.74 li
924.095 63.9688 li
888.545 63.9688 li
888.545 101.74 li
cp
clp
924.095 70.9058 mo
924.095 66.5918 921.981 65.3032 920.519 65.3032 cv
918.49 65.3032 916.542 67.3862 916.542 69.1436 cv
916.542 70.1812 916.949 70.6606 917.851 71.5415 cv
919.568 73.1382 920.632 75.2168 920.632 78.0898 cv
920.632 81.4438 915.77 99.7373 906.441 99.7373 cv
902.377 99.7373 900.544 96.9409 900.544 92.7876 cv
900.544 88.3159 902.686 82.4834 905.144 75.855 cv
905.699 74.4966 906.096 73.3789 906.096 71.8604 cv
906.096 68.2651 903.551 65.3032 899.571 65.3032 cv
892.099 65.3032 889.079 76.9507 889.079 77.6753 cv
889.079 78.4756 889.866 78.4756 890.024 78.4756 cv
890.81 78.4756 890.891 78.3174 891.283 77.0332 cv
893.566 68.9287 896.953 67.0801 899.237 67.0801 cv
899.867 67.0801 901.207 67.0801 901.207 69.645 cv
901.207 71.6411 900.424 73.7998 899.88 75.2363 cv
896.447 84.5015 895.432 88.1772 895.432 91.6118 cv
895.432 100.239 902.432 101.517 906.095 101.517 cv
919.53 101.517 924.092 75.0625 924.092 70.9058 cv
0 0 0 rgb
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.3%%For: (Kazutoshi Ohta) ()%%Title: (wave3.eps)%%CreationDate: 12/21/09 6:57 PM%AI9_DataStream%Gb"-6$$.oGFr6N0JH#V2":5XoCm`%h)g60$GAmS,C]m%U!/TanGEjYCm_(6n8Y"GpfO\]8Cr`gsbE=C;<*;dQdZ=4r,jSguS=Y-_%1Dh[PT&`N"p\81.HVSdW5(!$lpA6YZEOX?`[PGO'-+t#j8$d3XRtrjA^OO"Hd2Z=Hi5@#sLk=D3f;jrsS))KFTN?%ALY6"32]*mT%fcR5"mr>`=2-"Rkg$/.CpLZJ:qM3+`5);E>g7;iL2u'J7]OI,B17EL6N8'oCanW3n*$i4&K#M3mR6\D'![rSV^STqBDS7iD1sZ/6%ZZ5I@eO-DLT#pHEk%FmmL4R]*`f":q5<NX(PW*R]mH8unmAE2Ip=''?mH;6>^OQ5YhgYE_hgYS'Da48Wa.UpX\bXqI<(BZ7!++TX%EA,ANiNM[Yg_/a;>-T9NiOr]jKc^UjPT"56C4=cPI\69#2lhr#5f-'<0Y2*#(<d@%S<.]J`>@Q0F)]ZHO//bN%n$^Ia1XsK,8ZK/%$_8bB=.1#/rKS:cX+OGo"RFb,N(<8A2sF%5EYT_0<;iLNcoO/R2nS2.2&TkVTgb=R!i(%0p!OPtGT!*gO"c/e@'N3#O&EuM&Fb)O%YQ0T##0V$JBXc^O,SPsBQpan]3*odqih5,SedSQ\NfSPI\mJu'd=grfU@NeJe:<(sW7dGK!T]J.ef[jio_9%'Omb36]h_l9TGE$S%$)7ODkk&%VSbei*_!C$p1a2GfI+!Yum4Q9JS<02Xo3#]7<Q.7Bgct#:p,mnJUK;5WbCaOMRX%\En'1\WkRBX.'\gJh%h-_!^[sZQ%gtLB<T0)sL,7UBtG!G3Cj^fGE0^rZYj5HK:h!9(_\5WWnq5XaTM>n@.)U"]!q!U*>q+b:;MLVp0$,_o,3kns%#7\Z=ImF0"X,c%%%C,NV_Tl,N%A5;A.s*\rE5-6T@!j[RCC35!FmV,`@VA1j8[Z>p0FRtg6c]2.c9rh)o91/1*mKnErFWUJ1*rl7+],Pk#g?GtKK51Fg%?+1dITaZrYLS])Q_EXH6-Slk"R>'W2T=&"'4o@.\kupmSs0Vo&*gh*34Iq,m)ur3d8cVU-j\A9kl'->mKf&JVmXdmf]c=LO9m%YQ%EVjE=H8"0UI0D7^lW^cPPQCCNmkas28HItBY@(7Ce'QHDe-#]84JTEDV!m(NJdX!N"&&0)NM+h3OG06?[lX#AEl66Oou.FTW+rj^%^FN.G:ufl0&Euo\8As0s&u?L'A4Jk+^`8CUFaN"iab)P:6#6A4q=aDEq=`8ZIf&r%^u0YMH=J>Qc_`YfM-[R+b&/\'.IX6k;GC<l%n$WQ,(EP:((m1R2ZiGd_a3s`MUhGmWCdR^MD;(ae_!pgq4<25!G:<=EbB]/^pQ(QJ!N!7A*Wiq3M4IXT-Jg>82[2)As,u'NoX25'%7EAW>"4h(JN;K^=DPU2N&2O.;hssJ4;pO["Z]$q3AK\=\<N/,$=Y7u',"TUsLkDS#.S7i-R/]c2#!f%P)rU:S'e_%<*E>9%kEtfK%FG!BV3r1ec_%2jX/FSR(1ohX8TO2OmJj=Y]B?D1:J1g?r5-)R3WJFT4LAfuMe>`jB=t1.%DsRHb%Q+%LW)U^W-1tSW+I-aD1EUkj%j&+-L;&t8%"&>Eo,#$89#K\sp%bmUcE+<:kl8T&/Cf)43C;&o*iN8mT-e/Ge\5Q8_n(?`8JF5nb,CNB*G<-(/Y/1&<BM^4m0S,kg%?r3,;_E]cDSc.gZhC\EceIM04OOVJB>.91d2?sIII7o!2\Q\;UYu_gam;_@nHrnMAJbOWdg$(hG"AH^!]/C]fLD-6YdNFhU?e;=W%f'Y@!9mK#>MG\-Ycfg.u9G)jKmdU%al<q,u>>]gtn#Dq`dMC#]2XS)[FQucF%E!\]Yu>G%:_`9u3IjNehG4CqVIN0SH:^Lcmi8sQ%Y2,34oBZ&6+3fP0\LB+s[/:<WSp$X;X*&9S5]K0d;ciNKbin`iE7Fd_V-*\7P8$Z=kB_1$e3,8\EcdZg<mbAF,6UDi>B9Y\q#\S,%2eXW>-#i,<p%uM?gA!VN#/a3JrjQ/K-fU*E'A-%NXk@U*\R@%sj_n0$dqkP2dcbdJRFq9$`ot[l]]=g^iFs_NPML=q]b+r-;Y,#V%D)Aekg#P60fh#)jf'EW#ZhiW>4cK`WV#iH<!.X*&AH%Qbq*`e>p;V`2PAH-V`cXIYVVh"W5+A<^"&,@Va!!&pNn&k(mr1Wh]#FjX%'W"9%BZg3%D'LtEh>mr77)!Hf8%jJ_<p`kuFgE>K]i+=+qqcW0/]1q@#L+$'gMe@h@sFb-*d-2mVK^PfPr[3%drIDdoKEu+[i7kf%cl=qKh_i*\n!\kmL=%Ql6$j>?Gh^+W*cgc$E3g5)-aPe/8gB9[*B/alC(Q:kWP$rA!_;`%?1:0h!oB4Who;O`&btU8e;"7Ri;%Vf%NSDIk]JPRSTa=3?Cc&)6L]&]a>Q"dD6G)1sW_p:*+BsJ1dr"g]`RBi'*0[UFalipi[Ae$D;qn;STFD9KVN=._aNU,lZq&YM]@.i"%TWXa#!45geVip'NhGUc9)HU-;mocit/7%350E1U)s7>^ZlX0\i%t=KWr#WlJYIa*^n<q.?<e(N,EK\_.]I,b;"@B']#*!4^''FR8%jc,i'7YYY&OlanAOa%.MPZ9?1oi!&/9T5W7&E?J,W%]jsr&&mJUmIIGOCI[l=qm8)fuYeZbg$!7=!5agdl:r\Zf+Ed?N]Qa&TmA]%d"EhXRlEHWm$TChDJpNgC:N<beUk&j*=aXj.((b&E=.:!pBR87(dqC>Aa$>thEV%`s6X1kk<Jb%?iS7J@R2mJ#pBMB"L:KD]Z%g/%IV64.EtS%/mP=oY@DMc=h/1dh<W>t"pO--6jk[U;:1%/;`5J4d7pa(H@[F+UEUH8a8pW13"!&cK*k3C'FA%61!S/Atm7W&)h&P,^%Rf]KMBR_()#9Q;l?++aB!*bf_VQM_h1=^r6@GnsW,](#&P_go:`G*[X3`"!,qF.`eS"ip*!iW8kAe!)"aU!`!SY8MDAlZl*EVD,M%1QUc=./W8!6=-4N<QoBPO/n`KE1X"jb@[6AnQk`CVt%4_GTGX&mX_M22X#QIXdGWTS7ZO/Y'IaO,H_T0rHpV,I9Wj+n&,m;YHOU\%$h,pmS*t]V%s3TiGqVOTl$;-ud(")((X"tN7YrG;8k'-:91Fc8Cing=nO8eA.V&Lm$ThOr@1)c.agAPE>nn//g\E$omkHlndJZho%O$;l\1[Tc3'hssr%skYK830Ks0DEs"-65`pKmV>1M#&VM8SsHX7P$JFa37g!fr7@;lSAtjOG:?Wf0'*mG1:tX/&iSk`I%[&dbFPW%Z4[rgm+([]pp8PR[QDdgNf<C@fHa'0bRW01FQt+"Bf6p,[UR1d`'LOd"M:IEZiaUJ$_"[:"T!c=7D1EJ::gA(Da41Q*d7AD+*lsh%=LeL_r3tR4qVuKYs-mpks/U'&rs(Z-oA^p?qsg;-qsjF[im7Z#YQ+BiIJ`Parq=fjs6G11J,T3c6Ih^lc.[)#r]\p4c;.?]?iSg:%s7YIpGn'`Oq"oR6+919&s4>#$JFYcd*cthrm8b#Ar7c-SrZT''Vga*hgJ@ji\"A*[#6@&<rhnY&rjUd6qEOX#J,nM7r4da\=9&%+%9E;j+ph/K5r"n7>r:br6rqIkfnumQ+++O1Xn,LA!rXXMSci-Gu:793G@:O]TItD;'I"(o^J,SE"roJY(^J"1up>\C4p>`pcp>\C5%p>b%]8\/6HqOlY'6j_X@(dhQH?7e^tV/!-sD,mtu^$16e:n5s9Y5t3H61q"s5q&eRQfAu6]j>o)JZReH'UA/if#9eL9<QH8[G.Vi%)N+m#l#HmGeF,>e/P\+fl\-_]Zqr8el`B@s:AFIU\(fA`?f#smkdoWTXa&rYqZhkl,J?3"(<Q+]4OXfLbMc=>?TmZuM2Lcf&Aa`i%-=fueAnCX]Ti\FL(."+P8sVa/>12FK]cK*8i2"q3f/D>"<Ir,P/I@X.0\agIk_R.+\B-IiO>F`P,%D`=-1_u;M%GY0671GjL19e"%PFB$OSCDpIjuA:.VU'D1(f@CuqQ-EbD@W=7['"TWd5nP'7X-!%5riFJQ0<"NDJ.:.p!;hL0Xj_3LZ%uPV>NA-+HM8L?k>/l"DL&p%IEBD^``u5Td.LHdS`MTa)$<0*di"0,d73`83pqt';R"!&*5gChp0G-3#'m-(5jWX)Xp<L$-WomRl"#nP#+_tr48o.$g-u<%g/7P"%[$Dq*lbs%D\`H(TH3oIPDHkTS4A-,da0sn"M!Ht$fpet/-1<[HV,VSL)\QR*N$*&j9l6gRA]JuETu=V;9lVN..bYO@[ZQD6?51dB%E^c(fmCt#.`ibU+oKbaN'u<*3l-IbOrV6t\"o&VE>Qh\,YQ!l!S`p^EBuKDCXP1`8(3N6RNAMik1p2'+(W%ja90oLJ2sZ#()U[E7%'m1M/gu^\hQ"Jie=Kcn:$EU5o^2k,OC"2T2=_q!*H?\S+;J7kTig]UFT-)H(T'LTnA8G13drn>&E7+RV?+kDOd720\,aN;%@-Wd=%*SgW*Utp7>Nl+tRTNP,.4#Z=]>9H)CF.2h7Fmb&*a)u(EU$KYKeqF>\G]O]B^1"%N/lZ<5$N6T7F(i",oW<SmO%p/W5T:.#fFJr?%o_N\87tNQ73_Z)$BT2*[]tp2`]K9d8!#+C1h3BN6XfL9\P,Da%gI>B2"gT/loEJtQ:=1WFn.cN4ef4OQ/@o\%&W]9ib=9L%c.8lf%Vop9pSV-h_]\)T1#u#OILW$h.24FA_o+"=M;1#+]%\%k_dM11N)Y?L)@6J_f'5_Ns3HiXO;K-9k6:l5cUUI%;,pf:*MR+<PO`Xu_%k_q!X0;u=EbP$5ibM=+9m4?]`'6gL91N:`dj;8C^[N/$JL_s?c7W"n<qLdC+f?(EDnlX`#E,5dAUJ[+nQI-EY6j'dm`RqS7\T-+q%mRhr^BOV)"\t'O#T-=XPgh`rN,`sPQn3_tU4Rq("R!S`&#DWBb\q[oGS+V>a[*i3'U`bt;.unTF14*u%M!(3T7Bhs04'fT3D;X\r%CfPDkL[=kO,a0,\5MqX+Y4&UQ$O8Sqm:paQ`aA,rq:0$@WjmE"m3PC9)onqo\1SKdb]1KqF5/66%<M!K<g[&`D*:<H;qp:10Jtt%%@NL#6X5k3JN=JIHf)BqD[EUQ^ZgF=>H7g,lBMESKC/gij+]n.\KtH=mp\pQ=mNUW^B<O-c+'ai_6G*0\\<,b%DDL[ON>mpCpIZIW%/:jo0ii@$HIfGK^B;=)PSa+rU+&go9Ku[/5)#Xm)_Z"Nu:i*djqug/VQflh;me-*>aE1=NgZ3/4D3TG^mUu\`?Ij1?](D9AhV5Q&%i4tG0fr*D"%t:X1jUN16^.]gB^6ZKlXELEpgf>A(O'd8FK^/AZr&g'hj.<`gdscI'PW9&bKMpK_X$X6ThV>e.>^bA,f;g"gWu]?t%QJSF/Be!-u#48gbAGbVqOm2Z82Bme#_`1r5>lV\2#?+i^Dlh"*Dd>T)dbXc>B5$IQ.jfX-m'Hp>2LK)bKDGThqFK$a`-UijGR\="%2O_Jl9/Vn"Coe!09-<U*,2m.2,Fj0S1T6Q9WU.Ipl:jGn`eUcN#P\/]Y)r$6Ksn0(pIV6jqFJEiG5X+g?%-i0QfOaQiQo,lVqoQe%OH7JYH/0lGo],4V/lpe70DIkX"71`^MC/IZ2"C@?g<'FdIYW(Sg[_Q8S,ADu4<)S\8ALT"Er`"_98.P5o3iuTf@lAGh!Aiq2;V-#%a@`H7#'d&6\D.HKarID`Gglp_#Bh`(;3N59EF1'e9Mh9q%ehs^Ndn71bIR@DmPT1[Q*44IehVX?l<HIChd3-TZ^J/TlXfrDp%=\g%H2JP_;LXpnH,hl3o$;FA3lBdN:CF`-S*+VbSW@X$Iem9&m->u-#i'h?KSr;qlS!8Rom)cc/SuODEl#bXKGt*B'(*U%O8@8qd,&p<%9:F3[T;\Wqb+k5Dq/A0^S=0bj3]neuEBEY=TIte::9u1+5C_;S\!WNL]c:$s8?mgN[U6HN3M;DWE%'0KT?M(^`2nDrQ%b;JBCB[s%-<Pl1kj`as.]/gKBgOQ/U&NV9+n0dl9iKg.4!qK2Zn2a*L^nl]+Z9^ZomSUl`a=,S6`"H^UJtWO8e35lA\N^0RKBA_>_f;\#.(G@%r(u%G?X9I]46FPq#&!h(CBNpg@QkF-M,m7nIPd+k*e1bKg^&IafbJRr;WYf2[%sP$?*PTd!n63JMCESdPE[ja.g40Z>D6>[NX>(g%?QpQ+2D:FtrO%a5`J"^B3P?a@-VEi7LInDSfLp]Mo0-o:Aiec6?Fp&X]*9C<67RM75285.$L8;_5(2tt[K3QpY%RN+ktR>,_;+@r%4qFFU]h)*UIsnr4LiDS9kcr>I;QZKo'_!cd)Y\E=^@Km2`cg\4Mt29Dn_T+='8`S8!pE(Rmi><\R?'VJ?.^dX!M+&A]@a4ME<<^>%-`h$^2U2PN^2>c%A#]])%ZH&V%'Oq:;4i(>D&j$l6"8GIiu*0u\PHSH*+n;91&[9hhTnZbaicP4J^Sk!^)K;70?7X!X!N`kN^:Ko%C/@^/9<4oPceXrKk#S<)#Y3EFlL:R2UQ0rcRJ_hhcbc;D)ZI*!n>D_LNWQ]%nma@p.?toSG.+*2dRF+t.LGn`r&Hd68e5-+l6uOt%_0Q]$QaYl?C0H'@E5)X-)G9D\F;pZRmD5Fl1kA2_%bfN6.1ps)9)%^.r-:EB?5d\Ejl#e=hYu;c(E3PQeLCnBj]asAG^?MXg&!sU%[$A16f=*P+FRA<+RKWA&kV,AhRHI'<0g5lUeTim\o*Xs#(Ss&#Mo#sTiZW:/L%F]s#JA-M.PmG244q^gs0]-%`=t(ABnS/VdhiUR%>XI[dmm9>G6'9YiTT:mW=)&&o+FB+`#?Z-Q.,V/Ka;=Q2iD97h0o!c4$81&b..KWh;Fg6/bgk\(,N/1-G:d5=3nP7ofu=gA'I!dJ%W.\Ss;+F=ZRQ;F,?f=\^m8cH]=$\fr^p>RCD's?I`1s#--C6d6(YMI!$Lno8R+/t2kSCG5GGhPX@P%D%"R$\gk_R!&Vli2lWl(1^%f+m4joTV_uAT0qn7b,&;/mf]C$`T+t)(_Uc7aH$_\dPg@"WFr@Ea20OI%/MBW`_tA'PSFf"3I248DU@R[Bf1tk>]1pn[1!+!hD<2%O3[+:6+*9(%tZlb@q?47J`^-ui1?`*cOPO;RZ&q&X41nLH6XPEho6IV\YGq'N.+*]BDam575oFZ\pPFG^o[I0NP1"$m?Kf-3mZQC%QU9#')d<X*K+WUhce$(r=G@>B&Y7`PB54PRF#+>kXOBr+_m--`7b2#ZM,W5(og0KhHh7cc:8.Ds"5oJtf-6k<A&fArBcL7YXI].B%,0$1UC$5">dC?M?m6#hZj,Qf-E]FQB_paBQi?^P4_7mPd=8i_5^YBlBL`)jo$1s,[lkd"PLoutZZX;!5K3hO3N&W#=4hCZT43I%3%cp=n%3D\ILB$U@9,@XDu!2'K'4R$]C6MA%h;)ELd/lX._6FR.SqU=8KiOVr;VbaLVp4;@I/b;6oN%t^3]0*j-1-cGQnIFHf2q^uj%")XXlMBDgE0\?+Y3e__O'cn+e.lC04D/gpmYU,Kq#LZKc>h^3ng[o&)'nWo!?Zc6Un!$CLq*`oa05i`L=WcE5Vhqt]=O"QCpl[>h%k@\Z)+/:OKkY^L&3!=ukfdisU8.lB4Vp#CPj3oJW@],BKcOPZPFD1.upe5*Xrt&2(#U#>'*]I..q<n$3nVa"GM6b!6Z292N0-+ZM%cVeCLYk!&`%s2(HVpA-kYL-EK.W4*G)99F59)'7TcDXW*g*mM-Rfh(p85"lTQef!gYNoC9a[0_rGe;sua#A@@K.UhVlNOEN/G1K)%%s5$OqjIBk2pP6AphHc(7Uu\jT@2`M;1qn>EidK57GDOTc\GGOQ,ER;Ah_G[\@M_<0\klDG.K(9SqFa9S10r]Y!$o+2s6n-jBLiR%%E_Io-ZlMTc:/&#XT!YoG<"6&Z)/@FITPNCQ$WtU>]DDn1;g$AAKC!Q^LS6dd)MK#FTXqtp%Z@jm_*5e_`"-6NSK/CQ2f!q+M.'*%FC<FCTXbg*Aa*[tW$AE;5"R,L-\YsiCm7,`cja\,GE,E:\]1Na<erE5!e/E9Q-8U!q?]>14l:-VEhjraFgD`W2IG%)&pZ5/B<b,X%H@atn4fVb128^YaEg:mn5<nu4@IPjUl7;H?:c6gn8p;D#q)-*CG^qiQQ*80pg.!$98F1]_qfr%E`\+ZLUlP>=7boZ('Xl\B1]MQ#%HNr58$O+gk0OG>f%r!X=SqHgM8P$:?gc`9<g>9GFcQ.DAmkaM"gF1;-I.OEC^0%=1oG8U'bQlr@kY2d`U$T^<#PY&h1c?sW'9LMo%QWA`7Ph4M>$dYm>Q/!nJ/(7(kKu&L($j6[$Gp?N+/cQ&PKXe>\\p!m]d4#;moO=0uD=XlVonI84J'L0QY1H,f[:bHlll<E\r2<T)%aMc9LLfOZo)a<QF^:5bI:a7&-_KGeUqO25=S0*AL(JYceQ2OFXWKD?F^X=kYg3W,A5?Kd@RTsb<-hXT?;j4?G;t,FX+d+4TXZ!]L%G;RC[31[dB(ESL,UWj5Y+j"q"_G!eRl4A'ZnXF'9m.%R(lq-nscU8^moQT6*#IF6l!gYh=V6^YCN.I*."U*`T8H@FQ%ALY17m+Ob%ptFWNF\6Yu#aQ:sC"8Ps]mT'UgFI&Z+DgI&h;(6X).TlX'bR05TD%Punb=t2Vb`NPUXW>AYID1+8T"c2K8;KVR@HkWO,]@YX8!=N%h_dpi-@C^>K8hY6qbNK!n*P5G6nG@K6lmGW_8DB.%Wk[U]>LsU"<r;joB!>%?=4HW%*.PdlhU$@&f'tNpK%aUoOFq`9slVIf66A1%Zl&[2>;o,l^8J-W#M$\7DPS3\aPk[7<:Zmm]qc;>_6Yc"UOgKB_+h495Xf=(DJ(F&i/CJprp=1XpbT9-'_bO5G?Yf)R91#bq&tJQ%c[e"2f2L;)jfo<h/q5k+75#RA<:],K6YDq,T/+/Zk[rr'[2affLAa_#V9C<#56La@3jH0Vdu/hC-DsASrolDOs"k_X_R2^Z41OFf%!a;[QANin6j!K'qP^L1H$LHe*o<C^h5gF@u0\+=NghV08c5uZTWT1dHiT!SY?go)4#-1OpghUg>[@hp[Zt:hEZ16R8p2uFM?Ao;G%`drYk/BPg[XPLV".45&aQ7MD"Rp]]]]G/8`?f);mYZlgs6/r0?b6O7D\%1Yp'=nP2&<W&pXA;.a],:l$ie+?PY_n>,ku0X\Jt'IJ%OkS[ZYNgC10n\Cc,GkQ.%E!DfmM2'aa!4+;-n+<$?:Z:rd&-qD[a[l!Ki0j:O*@;\82P"2XGsT+H!Gk7W19]2l.:H.07`knKH5jK%=AMmHGoU9ZPEsgKXuKG89lNPrC@IB)!=P7+Bo:RoS-)X%;#,EK&C73Hqd2tUE"<C=?6Z1S,mDj'fm4gm7;1lRmSJZZcoI/TNf[Eh%Y(XG"`+*aefGpZn\4B(q[g21loc].Or?.BiFS`qsqm<(PS_C7.CXi'4hMRUBnkqof;f,uCG85bd<;N=j)Wei6?OatPqA:`SKgEJ8%?In`@(&ee-);h*K:L*7UNK(.?M\:#o[pD;Nf>2<RkDbdhaT=HA#eZOcg+BdK;f(:N6`1kH5i>SZWSQtsYi3tJoN[2e4Y'A56f0i%%m7nh'\&$>)0$SdA(Hq;LYO"heI$)q#mdO!$BeboIBI@a?XIt>h&o4Zt[q11mBi93D`-@B+Hm^5q[drZNEB(h;_akqi(qIr?=.dC4%Aodh`k'Ratm#*U1?_=VE\Q<\fV<'\-W:a@UPs>K?h0F,bCqUmtof?t#1smgX[@=^omL;!iF`ZO;03Z!kHi(*F8@;>9%!";(dk=Le%?@iFS"-1dZrB`U*$g*do(36+V.u]PuH:'i!cQ?0qJYPm?S:sKDc-sp/@Xm?%6b`7[1<.mh*cfA/m\"P`!Wt2SOETO,\$+Q54]b?J%'-Af;0)?A+@XPJ)\um6*%7G<G$ehc<b]"Y`L.T,Mj7A15=KAL,,UfYJ_bV:IUN7a/fMM8EcIP?EWQ89Fc,F/^/l@)=f?3?I>V!PF%2AmX;?rCNu.`WeH-JKF6A><!TPC9^e6h]nrql>fB9D+Lh_m(Y08/CP9=3jo3EguGu?#fu6?4ZV,YA%*;C/dnT,1..t\r).NLorkP%'?W!*YsN>u`iZ05F&5mVYU82uEUN%h*!@S!*JnmUASrEOk]WR(:sd)L?m,`Thalm5\`i;4[\:FJ8j^HGm]KAW]`@j25BHp,K&b(p%Ft"M^bkU+%k#:G^+gSPoj+fO#D"h`:0NYl'?=_pMGP@#\kPbk9=A`&B&f]&qMk`7Y+R12*<ISo$^PAE>\eam;G2J\Y^^,%+Fdp-,%CW$Lt'`<'GK`i+8*Vs(kr=#LAI@@qMH;,(';=Kp*U^=K`(hg"TIb3k:1%H/*;+NQTX-6>**m/*;`Gr9bPWlYd-FD;NMBH7JY<4++%pXujnL(Ca#cf+2cBeCm*EkVd!1K#q>RL83]I$MPQD?qQt6WO6[q-pr022nBXf'90Da*)%Ej4CD6q^L;mQZL'hjC.`X=I[&Kg3sNT%c#I.oN3[jCJ%7$<T&]*+\pUh"boMO>j8,?/UU>K_(2i'Uq[KkZQ[Z*=j2-F\Vs^u&EUZIA[Ik4OK6&5!KD9AdK52C)JsFb8BS2MA%Y^uFIC?tC>,BOI=FRHF,LpmXqG#C$ufSc+\CB4CB[pd.n5X8bk=R'[W324-0nXAVOgF^,ZWSB4R?R-;3lSbbY@d@V+A).Z+3mA)(%D>Wb;iregSs2n2SOY2L\`-p<5)Jm)_Y\G[i[3C>XrA=E+]BUO`#/<[f4XF6^6Z8!47#Dt1AQ[dOBT0(#cW^OZCeal;mht_f!Um^*%:O:]ac_ZD4p_&QHIn0AS]^a2*GS!LD+us6=.<Q\pK;UB-4:2hWNP>am^$Aj\MM7'L5tm>Ar5EX0k=J^V3*1TlMCj"T4N`1W;Z,0S%^"B<Y8$T,G1816Hrll8OD:?5_apg%_0DtOhq]`;)>G&Z%+8J7rB\!t['Q68aI2k`0;IUX"/W;d`ApU?c9,9YQL@!W1SRULY]A;\;%^TbJ$lih]aDVY-+9]=D9fH5k<Ylal\d.'lg0D>NhhX(QWqgaXC:EZ-n?#%-#Ocb.,*:?*]mNWVh`kMf!0)H<ASt"DAU<kJJ!O8q"%2:h"E:?,;@a5CCY9#re?qUW2#1H\^R-Aq07f'4bJ(-D#'-&5\2daUq-_-h&'2gF+=4/HEAAUo_?heA4%i,7FE@EVCf>FBoo:-n5&%mkLHcXg-@/i$fGQZ0q60'3r69G=ko,%Tf:tN7OuKDsVXspKZog>Be3nDaRb%dppQr<sh`nD5ZU1A<'PGF6-KT\qAq$9rF7(Wpk=T%C#*LN\%PNY5*nj=*l"[YWjpB>D%Y"Im?V*MVa/nB]Fhh9K88u7#s/Tb3q`:,h*?\-n'FAaQKq8HC5Gh"I($:gl80R^I.#a3qE0"M%l]t,?A@ouP8uX9n'\6s@:7q5d0'kXT?Xj1B%p#6Ir.Dhomr>l6f"A5UlS*=M%IS\II?prq%;g6N]/H5NX/fUf4+VM=nP@AoX5$X-%U[9k\:0.dpU7XNhSQg5/'mf77X%kg,dd?o$BsVK4@'7qRMW_$aeh]J"U&6";lV$G@kaRuPU\N&r:/Sl-+p$.tj'Nmp(K.1,LQ@%\%e%8ncF<ImAl/ooXpHQ@p0!iTd3gHNf<Vh)[b&a-?1i]%8WnDOk7%JKr0<I<!g:05%7e)4$X1;,pa/i\'BrT/oEAjBEF&_tn12,qe%HBGf[O"O)EHbm#:CMMA-mBkY2M7qSbH9bb#D.##_F"N4ff)adNSn4fYOm@/E:2eR3X]8;tfSeO%S%9!r4BZlSEmT4.eMdSrSNbV*%NbplV89Qm$M&*Fdlbae:oT\L>4$=%ToJ_=K/N\AhDZck38M>+n/![$WR!#=]52TaE3;^Kd6PE.7b+q?SM=!?GRf"qaUbU]=#-O3%%r=Cn^F8^D#4pRl^An*d(Dq$UVTk&)+a%jO9S6CsK:YWo+ctR5c3X%+4br("!VrUTCHQeS$oM]PO'%8OqUZA+G4If@Gr)EbZNLDmK%N*lKHO+3oB&1Z%D@;H^540ckdeEJ$&'JXaA;EcX)idopt.[BXs18D"5ac>Z=.7H9D#N4.C?F(12\%1m#kk*577dsfI%k6f2m*er"%A&O"$gKLiXf_RnP[N5j]?H8c5Cjf\q9BEW%@9$JH0?r&J<D)Z9.rScj#l)h:q:VIMnPV<r)HQmjf4ipQIE\f^m;#M<+7HYG_#'JM%U1jT#j]aoY?X(8.S_DX)7UbFU_cUJJ4C/>$b1dG=7\d+jfs,tmc.^j>WRcU))u_#=nFliccG'!)INPkt"cPTn"A\@AIL:&'%^iF:%VJRn5pYB*aA!?T@FeidPp.k8Qb.]bYEh!6Ok`];\BE.\i=)uKm2S%]54Zd&q[iW]3Q29ZpRA\YsG<_>Gg2MZ(WSFCgD.oCfjYVp!%e8JV,N,SHI5a"8o/kesW$e=WK2n3J??'EloH=--2mI-9\+*9CS41r\;2@hH^H_JW',2ufK_lr'&.Q6#%(2b3$%F>;03V"'g=P^4N%E`Zc<SQZRq?mUlbprVBH6!Oq$R#RZCM!XP7=3bnDh-FSNLa+?/43?i;72+7Wj$\*DMXB2ZM6d<*GhpsC^:mgu#>*XX;lW*"*ntcD%cAliUI'i/QX`:N7TQP&8'Fa"cCYriGp$Tu2duAu`[&*$c@RiZ7D-p,s.<i>"lSNSsB69\&f%3uGkhQg$2'QV>:5LhLIgZJSmQ8Qr%NLb++8,H%_$Iu(lVo3Z'E@#Ch/,B`/2P!m?*BGdTnQ)21ei<L9<caN7$a<1%G+Dr!T_IO2g7\17F%)#*\>j=H)chGWA7KCr-g%-D%d+F`1;D)-N0:U(jMg!$8e"d/k\\]fDEftQ(#^1C1rO$i9rOZP/2Toq';$Vmoef<;q%HkX?5M=+i<fJc&HfPGEP[8&$"DEc"6^cg#%6lH1*b+\^)-U!rn7aV+a)*G'sP;:uo3Y6CA/hPe0j#L?4.uc/["GA,qW5H.&YPm/A#9%1,hGs\\>%8C]l:Yld8Jjo;E[LM2bk^eT%Wf!?A]f9&i$T#<=dFGXaI2.<Z]^P:NrUQTMER-Fh:kbT$.#T7Ndbu];N.:9gnJZ[XWqT,I^)+j49g^u;;n^Fi5.T5AfX7iVP%f@X%`XFZA58Gb_=MKh1([HkSH)&;1,`g##6\VJa4rodIHMq5(c1gAn/BG+%7Q#rC2ccSZor""cOk>#&rc)%^6!5+3H2KRb[2#5=o1jO[%*[m8c.-@M\D"QR"miMKCA=5h]raC$".!kGrdA+un>76M(eYn-+"pCqn2N"*g=`dq)b,i*.O.Q,t_g%cn)^*mr_^b'U2Rn+V1QUS?%O\'@NF/9SqZ^=p,AYuHKd8;,sj?n:9o4)E4_k5jJi?:9&pJh]5($i`"k)2aqo'0EjHi>0)EB>>>jN5qMBW';1e%*VU#!-,358UcO%7(q#!("qkV">NYT3YNW(j72.o0kKWJ8B;]Ok"\$\#%e7cj#?R8Feop1nm0'8h`5bK9$&r&m(AX/2C;,saAS,d2->r/Fldnf[%*#M%A6;[C[%OuQp&o4HL_R4kN>0n_?,a0jWHu>!#&QhQbh,ZGp=9W=9NkkZe\q^>mj1PkU1$WNe#Y6IU5*Ee7ZlQO]GIXaPEX6N6&QhA%Od0*:R69g3_Vh'+1KdL!!^C*XaiH6[kt,E&l4pN$OI@]n\h^+BB8T8.%EZGZ42$`#5O;-j1l><\SR0B4Z2+&C./KJDM](+7=q]S#%>o!Z'`Sg:1"=uIo,`OmB1,*Hg(o*FS0kQgj@i*%MXHmEa$VrgdXaR4S;9dEt*G].bj8:mjb\b7#Ep*p8CH4<,o1bEY3Wn-*.pMm?%*PVk]NqV%9FHjmbY/O"FDF[S<SL6T_G1PJ1+$/0)N#ep$ID0_>7^+]X@4om2C&Ht"R;?.kdm-l*aa,ABCPU,W+;;3F>WA.gW@IA;%^0u.q<4#J!q]p8HMe<k^Kt%S)8G3+q!O2?I<]AaQ@;@\m#F7Xb@`,i#bii<d1!&DECW1$ZP/la3:h3,'$NLKC'.aBs_A'EE=o^[F%!pd2gqtBVkpTD][[e'+7K(QN$)VH+V:b?qpNPQ#5aHkb)k"!+&I,2rRV7Tj-NDC%k5B7?:oXI=*2^bm>]5KI1An1A(M8f,r:*0s'%#+'HY]-d6le%P26dA>/V,D4`?8=X,qlrl0Kju=:&OK<#HjNq_Z>6b47KOd:XM>]&t\s[[!>u-Ff\-R"tr([9QcU5$BSis^eF>1^5%C3l4eXpKqlXK<EnCGG!#S[;)#27uK8LZfO>b\JtQ2a\"l-=2>WZ&7.8:pMDT%$:ah.34m7V>EbP;d+s(O5GXGX]pFkX3g.u\C8JN%aES]!>u$^T"R_H9)]D-^/YuSb+\XJu35>*HN&ko!3o@R?diQ7[V,+#\UC"Um3?c`@#UduZWq>Ef!%9F_k<>ZTRhINh/Qt8c93#V7%b8sA+\nQI=UpD[#<#ojW):*5k94`9okKJ&^;$@ZNTg^CS$d6JVG"(6O3u_R!(C9Y[>f9hYfZn/=R='@lKM;eY2*7(9guEGVa66(*%*0"r6*8rHkJMIr/-8d2t+*g=81[%!MMqq,3!G:+1S4SR;q\8U8>MS?MQs<67M`Pp>gSgIGO%d)m_s-Fj6#Bf)60CBp>?"pP?(k.N%5:,/Fqr\0?G28XPBM^UF6rVG'>KqZmiHc<d<hb^$'h7Y7IYe9E9(oEE8)$.H,LN1DbdXgQFF1D(M$C"mP\>./5/N^RU=mI;#b323%1k`/f]iP9U.+&H-0B\"9^jj1MX<Urh"`s7-%9nUO2N!0m^7J>2JtYbgrq:Z#%9SgCWV!;4l'X(Y>Y_V1e48G0'!hkfI_4)TA3JD[%/-)1!1qF5SjIFZ9*0-)B2QeD;2;(Qgl#<Mfp9me.?)bVBp]q"R1>u&6m^u>NA))0u)IBl.9d%4eMcC_Ap>??,[3:dZBAZJr.D6?u%guHS0+LuWTXf]`db`+Nf3)AN,1kdpoMnj'8Zd4V&(XB#!@+AiqC"[5UKJSsCDh`kTE+(>QE")HRh,u]RE2IA;B3hI"0K4o'6OR0:%d<)(bQeR4T,:TsK*gh&C;-3#n:V!\5DD=tsD_j"/.OD71GDoX7U!oI:76/?8e]D>)p?$rMh,q5gl=4['<5D/W)DUBogf=)T*Bg.[%JL`p.g-(/#!&I"`6J#.se!Yu%_5%tq:M2>eP?&VtWhnFr8hE'CPAM%52G2`(-**5FcMi90kR[leJ[qRi:M"7<D#om?hMnrr1[X$A%0`%`TS-V]'kUN0?ZSQ!bjD6ZM*P\-Lbf7T:o*"b!&@>hf1biiDA4S=%6H<=8N@_?;bSI]"-,J<A0P&?5YP54em]LMWR>QtZV>T7c%kLl(ckOC2QLX%o4cJr8,%\7YF*B=5:KH*&9$p'd!;KCtfNYur%IT\dgc8gN;A.("5LMjCrI0Q62[btCNFNtbG,[53o3HURXWYoo9%Fg5TiST=uU3=!0L*'3\R$g#up*4o<J%\7YFS^&:GRR:^KODLOt[aR0<gJcG6gLgRf,"8t.EesA)TX)j\rMi0!gZM3=4\Iho4;$g8%$u*.@DpGHO>qXsO*ZoKCBmJ-CAj#b1=Z.$Cc&R/=P//c_dt9'g4['*Y;pJfGR@e61]#^C_4[3H;b(<u*,CSk955gS51EWM_XrN1,%PVo8'R?Qc<b*r7G_8(;9Gch0![mr_@hR?-9WC2+An'/tPe6m;3(W!:(;mS@;NMgZk-+hF6nZS_Kr#u__D*h:X2HF/4Zt-Z!O+L%t%90eHL,;PH%JtU>5(,H"J*l6R#gp*go1nWPUo?iiI._'VId8HFmp/VQ%8Z";?R-O8;^0IHf\dP#/ZAa.`VF[mS9O\et1Bn?"alr[n%@ULr<k2*@p=l%d:3DF"KD178iZtX.(/9uVAc5=1=itJ?Q^EDbF>bn57cT8X//[UGOIu(/6k+K/)magi:D9<`@\#0Lhjp:*[cF`DH%<22E)-cQ@TMD5bukH?#P1p5fXNFQSC/AOq_AMK.3!j%;gb[E#4k"1.m>6&01_!bt2bFCYX\U>AkalIJTbDpbde(cK^F]lK3J?[=c%Z]Z)I!*5t05+^TYjNeP.cJ3lN3BJr:\'EjEHY:[m)\Mtm!l>h.P(r)fBbZWc\C+;RjlTekUu]qkcll3?B[U"h"fAe(kPaZ/QuM'O%aPLNqa$l;a;8(Xc/iY#D:S+Lt7nrE:K,prGm8Q,k5B+o*oh=##2O&SC;g?@D.N,O-m1SJrUlK:]<8O_$kI8JQ7t)6lD%aT6hh/>U%dqmt`Rr_+c@umD3`\R%J)]<j>(^n+,/IBW:OcbDUR?(%ifk-,_3"/AjB"(sf!Db<l1*6>"35_D$MT?WhAH$`W]-`!FN"MJqj[<WA%IWd<RZ=qnMo?]KAj-_&RLH\n61EnX6n&*Z=NJ49BMT?W1GIUF9F*.]Bq0P_hbD=5I&t1g*Fh[c9[h0L5S9I@pg]_/a-g)Jlhb]k,%4ibuQhFjH"9ZAib')ADq)g>dCK.XRt4D-T5M+7rGAC.&irM,(!3pP2re'@TsRG,jifIc_go%`Enkea_!0qFHiPV"jHYKm*?=kaUi%Qrc6>]\YKb"gehuR%>`h2$f)l&R82=bG0B78`TL;dY4DOk.KG\O"?Y/-i%66N4<H^_p/)WZ.\^,lq]o#1EUMn'<85+iEVmL>s^^p%d4Z.NEQcX_Zi)*3;Y/iu:.$HUYf(oKlgKid4!.5,BAla4c'&ZNb2Unkl!%a`S;f16Z`TEKIBe%rI'KN=M7h9^6os(gDU(XV\Mt8e%K(lHq$`DTd(?b03['2PVT\,hEG/(pF_3lqYb@$AC3/cqO'.>3Bg&;EXoFoQ<>\F'G@,i,LG:/t4rCJo#Z71Vi$54=rs05s!oi/j,%?J4^'p9H5-]XId?N4g4;A]&:b8!BiQj,!/Xfar:NfR-G.?8ui;/`Yd&8oU)Y#`74S$aV"nR3%-'BA-"om'g8k]EHE]2/ZND&f=Q[%8lJDt>DLpsOo"RTKS?(#baAhHA>IX(Y*)?3AYda)g`inZP*&pRBf^aTb#M'iE\^O2QB[MXZ]pEuRjDXAhRNRo[-h1k?2iF9B:o\=%(1oR;,b;O"YkSV`An,+,.kl1:^uQ72#<#gj.NHiFDGKgTPR;('/a-cC_NE=3+"k'DTiAPTrQ9C`i?l<*oLl!sfgZ^BRL83p+*6V;%9mf?R;A<5\5M74MC#1M[>M3MoiK?C'7R1DWG^;d*`PiLX]k7$Nq'%^j2EE-HBcES4a@=5;r[BR`WF+i-lpHEJ1ZuH_88^<paUL[`%m#`Tn#L+C.>N79V=^D2N60>E5Mfd:;IGsLi]J#F[TC?T9i"s%rS6T!!_>D0opa:c^MBD]3\Vi$<_$`9B20D4:9gb4r)%s^h6e\`U%F:[PD89X#oR&"DdGIG2jmZd&RNTfWGP[PB^Am4AD;.7Pc_J?RJm?6;nS?@csGL!F>4h7re'X-&igND5Sc,Cn$nRX=qF#>8UiDn?A%VrgY%n>^2FVWR4(.Lm>>JD_IF$p1I3;C=AnnuHOBT?NL9L0_bQ_f!QKG?PEi>haFZ2p&eeho?OUlEmp,gZ`*j[Hk0a<5'C-Q[4UT%%BJ1sQ0uaIGp.dm]>gb<G#./EY5V+u9hTs.lR@=13Yc-%9r:!TF^iM@6eZ(,C0rk/9RbEo0Xe_Bai0BHZNY-L7s(Amp=Xr)WBFl5%L$@JiGB`;<o@]GO1KX:&1)e!8AGPK'fB(d5-YKV#U.b?07;%T4=l1J`7hdT=reRBAGo411D:@(tZ8gJ!FRP^DiG&0;g`2[%g!7qC%hRCRhju;t9!S8d!>>n:_H=e"Ye,=8Bn]TLJlPM16]:(L!/TU*s:?#0Xkn],n\Bh%YncOhJ\7K4"=ln)bIii:ZCc\VaTFJXeOA2XT%\RtUiQMK`f)r'C[FuGlp=t#0pO3O(e2tn+TB$.!W4eoO:Cc\VF)UmR/'!gc'Ep5,u7Ma4FZ\l(_Hl$\ZCc\V!],Vts@Q'dBEMJHa%/h*:8.[SH?m-'&SFB6OTP*X;8VR&>pZeT@XX7artR'WT)3ihq[4Uj8m2OtS]l$!K\RSDsY>:qLsDH;_@QVD+FYpF&3/V()DZK\GQ%/9?j%in8ESM,nA/p!U/1X8o2s3gZ.,B=1rQGm8_kCc\V%3XbD!_/)05oWcM"*uE2!Zc],NdP$Midodj3*#i6IS'ELMc=5sb_/)._%k6eVaNDYRcMD+;r169=V<756E$[=AcVjm$kn`ot0?IIVcFS<prBjE:]^,d5!@`eAp9sZHWib;ngcq.'S04m=@2_83s^mg8Z?7,th%3Mbo6_"I)81Sr*[LSUL/^d1]$!8QSUbfj!2N"_dTgk/gnWRG<GO(`0:p4tE%C>(CXRin*?YI)%-DT83Sa_U;k^2rDa,bOIm4(ejE%?Z`d8e@<;Y9J0D'FOLak9Kf"A''U1Fjpn^WVd=JSn25E-,DqCbF(_^cln5kjS#^(Hc(.&mc0[N!a/I@I3GL7oGHS_:Sao4!pN[P@%hNd"Cq:3FrV'BGi0:9ob;[^10:XAZ$3et%smc_!,,b=+*lneS#H9+P>lZ"5/p9+=2117"jV&_Q;4.PCD)($4rLAi_PH0PiCj:.?9%)\`$8eRqNaYl?VGh0om3#>Xi\o1E2WL-#3:g1_r8[CjsbB:geP6THN-<1iQqlSE*9#0lDGZQDP(.%A[dh^+dQ2J+:2Fs3CF;J)c[%<cuItG&aeqJ[mdWAq'op.Btcj\K>ir?K,#e!SF+_)=(%>QX'qS^$`0pARh9f\QTf_,O&T(ChOo#2Iten*R=?&EeaG%kLOa!b"Mj/%(7X-CYg7`=,sL*pC^rZ\O"AStq\.jMSicO`EH?^sEB;W1$_/Mj-%Nd6m'^X4$D-Fih,Ts/X=Bg=TPQssF6rC6=IcJ.9Y@Gi!b[A*%c[Wj'+f\pia5*8%BY*/?Z$WP-hJbEm)UC&!L-%E%IUP4]q*[$pPW*eMOm/aU`S&W/L-*Sk,T$8"Ze]T`ikF%?DRac`<HHB5\o@1*%T;`-"@-0FpYO3'>Dk,&lO5GYbUB`\m@]ae8it;u?l'7&R]7$:>>S/qO7C-gE&OG>+,G-bY:1-ci`MULlf[`lZerWQX(MQQf?(S\+%Ft8SBN1&AgGqd?p:prVobB34-^$USd$tb$J,c5+&G0j^DBhVPF@4p>Yjm.!:*-VCk^gSc-=$@."KrJ?'0dQr"ZM[<sa_NgOBR?8u%Qu3p%X_YgNN[it[>[A91atR?]\!;b](b34d%qj,PT@JZsJk8+L0k65Z`U.f/qX;3]AV>Ik]1$U\Cc%*!\O]A9FkpQiG%BHIRFd1m%\@q<-gD+k@.<"22*m&hPQo2+D**3u?h%uq8ZCW(X>W%-SO4T\P(B)@P+/UL_2NP:[P+q.0@q+>l0DsTRq_lW3*e0a&\U?uoE@Q//%+ioORVtZn*QkE[[AkiN2o&3-2"hBC?7d2XBaG1^PXS)F97;',c/PoZ`poqBm::bF?-^0O(GYe%DIoIT/TA"D0YHE$$X_1S1aSTur%hNL=p?dT\!n$H1:<7F[f8U.:Cr:iR9?'nR>*:i&$k:-?mK#Z<IcrT>PS:jBXN/Z]>eBMU_mddiE;a+HEZL*l+4RQS?@^$L^h0m5E%CNc7LSZ]MuP,;"IpV%)kXi"/n:43YRr08:K_bN!N=>ui<JlP7jN0"(%?cn(Ij+aUXVlNOmG!q?.>-=C`pfp'(N1W?,hdaJ_:DfW0%j-!`c!E2t:.8G8:@A3(YN_Q+IIpt'cr?,&2FQt;%q[9h.-;/(LOWjUdUm.>nD-@-srLg$ZEhBqj73qn]DE14fE(H;89.+5R/eW:b%dq?C_QHno1QEq%P8'n+Zb*g",3Ib(5aE^=J=m0QM4QlW9;/8jFF*hG=g5r&Xpr.[4S\%g(*Z'(,Nt]j\02C];:9UbF`gXhG-/:?c%.lG=_T?61i>ZJZ7M:&J9YkdC.23))2.DMs#Ue51:C21*Bo&T!3'!3T11#/ZBrGEkBVj[MG3PK:"T09JrF`nJ*!#PV?/YL(*^=ZDg%"bG@!dW-!C1M+g+IOhSZ2J735KW2-0g4#9!7N]1Fn?07K(_c<accg+8$+#'HWo3Y$HumBSj'pV%1jOVE;4RL5"hd&cCeNOL[`!,F%M.D:ZN7#cOY%=s:oYN^N<\n%S8qplEs&-eZS3oB72Ur^)%`rffC#2fS<'b<KoClOg!d<b?<mQ0%Vs#=%a#u.*pDQ-K1,B$:Bt*;"%ACijCX-dhp?3FceEd;76fCNC,(n5]@c:f'jg<,5.FCCqeBY`9E=b(Cl6g:b\H*[M,joB]CaoZ[S""7B%F(PGVXIj&6T^d^#XBC'k%Er^>[lT)6Nc(`K9#LN;eXN_*sIA<BgZ$EVTc1nZ0)jWKbY-S*KI6Z2`kknS6DK>e*Ht7LbPI"HR;SJQ;A=Mm_^<)>`?fFsI];WSe%0BMf8&/pI6b,<=c?hRA]FXQ\q]p-hi$Ff(hq52u/]UVXjB">Zsr_*'GGtBtD6`e4>4%l?:OrA.ZX5C4s%HVu<TDM<bV0s:tJU@>B%Vl%5ZDpHh?'DM@JF&$HCHi5Lo;Ko2!,2\.'hs9GF'ls./e1C@j3TO8!?ZCj>6d9_VT499::WX"#lfT6!1.AA.^=U\B-J+E`!O9Ah%c_t45^XpeWC6l,_3UZRHb.=>`^B)8pYFkE>:l?pc?9d1UErN*7N;*0/1TnX)TT.TlpVY\Fk_[]qSGun[B18_C8W2HkVkdR#hs*/@%(T8nRolG;!aa'7"h!8TsC.c(fD^kGN/Y;S%nm4PIp[Kh[Y@#B@<^5'">3EWOcT-!r3[8e@Hi7bT9ld;l`4:ddn+F"^lr%`oe%S2T%5aL&LF495F7LS)=B=CYM1@Dk.Gd!b2Ja8/Oe2d!jF2$1#s*^9&o,b'iDKL/iFK_;EhI".5Ia5G!c$CJhHscE2]T7!i]SGY1XaY>&%F#595olJt6G!9d/ra%g%94!Ik/pa^nM%*0Q8Fhq0E3Gn?3D]'n=Mhb#cMPjeV[2Fqf?Yp@;IdS_mc/A887Uq5I#EGI8%F\!.JN[!%qpOoHhCs5YTBiQQ-7-k;p\J#=>A,BAoGL#Sh!8SqYDHK^k06MfP.tliF/15>iqN:0RlU7ddq.>#kBs>f9_\)%SV:jjO)OH5r<uLL%>jFE=j-qb2f2>dIhWqX91-FFYkHY&si>ajRG.7<Bq9#,kHi9IQoonBFMr3j`I*ftjVDQ?,I^X,U\^f$NGMufg4?;9`2a)'CmU!Z]%rQ9ERop_%oL0OTl4[#b!lfUqRo')0gn+C`[$k6Rn=l<UNkCcs47\9Wd5HFE2a&AOMh<R!_U:?//rFW<Ck.fMdE[@@&BAf>2g$kp8%?9dV+=;P,1Y3tt(<Xq/`BnLedfW6,8LFrD)DM`?\:OJPD.n.R$0nsl?SO0qe%c//R((3Sl-K.@N@D2Ft#.@$c9g(ip$"b%Y6(QT^%NM#l#Hqp1S_VDX!7)ZPucJN/MHr,">QQ&(HZ\-((PM*WqX9<qMY/'ikP#T9,ft0B@1!.W!crMN^$17-h;PC.d[gag:dV#P2QqpS5%a2`V.(`m%7eQ3A=pJgDVY"g!U%\qP8ejc1@I,<%C=7<O$FhQ1NUTR8^(NnOu>bc31C,tSLo](aR*(=eFkCZ<lHJ,t#;_Qm$_85%T%Z8!2n+8NaW[sg"J-V*pKeUHZ2j,^LB`)t=PD"Z(sq$l6O<Q<>jJa,_rD"[Y-]Xu`8`!Yf=pO'::Eg]V&PRm)B:q:PRZ$X4@j?mZ+%i5U6;+Wh:glgM&'T`V+)7=9a]A'F!-T=0e6Lq.H?pA4^8@(RZ[665LLE!7ND-clNBU$_5<dL'+[)1XH/n2g5_*&tErX#AGR<h4lP%WP)T;:qeAT`RWhu@$nH<OA&P03OBd[M+,KkPUfX,@Qsf%Eu>B.H<XL_C,4Hg0%&<aGGhW+DBtV`EkJe*lM"g9n_iqMK;Dm7I=6J;%5ulK#c`$/1Y(`E]m(+fP.Et^>6.R1WfddN\7lNA&Tj657/d1kY%`#:GHmh)^muMut.rhp@ekg77)u[&\n]2d!DZ!q!"Yj/i`qMFA%?NIg-YCePN]I[]F;p+5+4WMJ^Yl'lJ7e&45^(q+<YAa/T1_1Wlq#:4c[U"m?<,@m/VuqID)M(.OWCUoA'm0F(\ZJi,_HI,AXjX@M%;2As%?s>gTT2J9]M:/Erh%u8@S7tgWF"nEXE2W08=GUW*jR*l?'eP_\P.Zhj:FZ4a>DQPu5=b3f`?=MAO;B-=#'#q<@?WDC&\@IV%&5cuV=@u/:Z;QoD+W\AY"bh"8enFj-^k,bs/A#!O7\ph.Y!mu]fqW#A"1"6>9:"Ft40>#B8M=m,_'ZUZ:VkZL)dbSLF:tV\_hgI\%Zm[=K?tQTAOluf8,3As$'g.Nt`%+H4aC"<[Zg"O`XdACDE7@[Me(kt[,u!HMo1>\6@/[O)g+)n&5[J#&-*J,j]"fuIe8$@i=K9/W%d8)1&La%_nR%=tUIT9IP,NKX`rGkj5Q+:E!ObG;N8D=A]I4"?qBaP:*J[JM13U+c5KUK/JLTQGrRE]s2.N"*2<!$U,@E@[5=ac"1%0)IEo<PS%5?j4dH1G1r37KMSck><DK*%,84``'q&pEh4ulj$*W/]MqS@gH/NdNaPK[kQoj,ZmN2%MLLX+<f=M*CV9`[iJ4uLk#U!%/:V=J^jq+u3Kb.ar?HSZ=3ujZ!3R#f3Yn&A@Ws2q%/EGW->:0S>`PO>3>QN"`,^Xf4c8_e'sAWd7/2Qb9g!m(;).[]"4CDO:j'(C%c7^U%7B/-f*/k#k@:=00<XD0`o:Lm->0B.L_*5FIiT8,CL(o.%6KEqtfrip?7lmDuPkdcL,%5!nB+lDtc!lpl:Oc7OIl@TZ7W24D%B+_I[4!H\8`&qH0@YN?3OHd]Oc`H*7dq'*`oa)1tQjs7)\1Q._[B;8X!I]^l''NGEpF8ri,p\RX6D$m'obVpG;JB\RCS,c9:i:3d%&4.V[U1%B"Zh-Nf0E?ophVS+ATONUf+'./h)L(b)"I^=J$&r:iXCdT2h@J6W0h.gf&CjpE<!3;MpDnku(_:ARF\k:JE,WD")!s[.%1&U=*E"P4;r0"nq$f+l3oVA+@l*BN67,Kh9En`7+gV<.Akq32aT;n#=jG'"uY?.*O&$#\:F;HLg>,blH!0%BgO=Np_d>sdP2./.V%d]'kj(#+G(:JE8O141=`j[,W2&QD"@l&ajK'3,3$1nk$?prspH`,.+n$u"FL9OgoM`GQA'+Hh<F9[b*aoV^/8&k<_,``4d+"i0.W%I'EdP5:hhr0kM[u3h5ku/DHTOa^:cmQG=H!=NL?]DJ\"P;K`VP/g^mh**G@rjfXL<)6GF-e!I3f:_#d&8FNq:cHi'B?AO-,@W=HE%A1I4;8H8JnIn.4%Nt-RDpq;a2P@B:eG?'(bXB?gABfhKsTpXG"9;AnlBPCV)a.jTr0015*<C>>qEIjK'\8uZjdNlO?Q;i"hp)Z&)%4<%:,/AtMQ:[&VV`nRgTbbLh3JakI7<)otcqKGQ*\lo]n=$-d`[3DKOk\"+7"`<H,n@^:8@BFhF.Ss'4T7lkP/ZtdJ7#@m0n#rQ9%aU$U]'Tb4JBZWHjhn-\EF1c'R"&Wif&@^i.&Q)mKP-UGa+8;Qr5s;N+$\'4]3iMKf+PP+PYk@T<!Z&QIZFrkhCA_=oS2C:9GD&><%/aEtc"SYeufZP$IkG*r/-ed9JT@I:A\YB8aV9W>]V'Fq5Mk,Y4'AP6W92W2&iLH6X<%+10k\RA(I(W+Zd[0"%G5eXa-H0E9Zpq*B%VlB7*.\p&+FHar9#qB*56jU)cgj'[gqBi)$p^ItlXZ`D-]V3mSb4lDP'D:i2/,bX4s2&h^nWCr&Tjm=I[=Ii%EEB%*e)mN\I+:n<%\fS'>M3,&_EJf9SpMTP%ab"A1T;/^PM?Y^^Pd&PTNA7ubI>G+lauL&#-%rHUp2hh2Wd#4WGBe\dXEW"N#8BY6cK.c>ALF"X\u<07%-81_0'\ppP4W,qo*V%(1jWs`TaDJQ+omZVr,Mg.'J52uJdOh-=HW0_d81Xat`/CIWW'!:`CJfa*.fkOdDsr"*3%]@g4T(%AN'#;#%l(HjIGJ.G2Q7%t^T]rLpUK89hS)re97_)iRr7UFs]Ld#mI@35X8AoSoHEY`gP#!CD?NepM:g@/Vl!`tl+c.moY@@$3J+[9KRX:k\%]+Z>1h_sk[Y1t;l'4YtL]IsoP\FoZeoT:e+O(Ng&6h(r,1Nk0Ldmt!7#Wl(V;JnOL\WC\fqW0BsD]a>rj4DNCI:9!lkmQhg_t[>r%/0ZOCA)(J@`Vp:>6Ik@M">_?)X.GW;)K5Pk0jR#UWZ?#l&1cFA"YZ`ajH"gNl^<I7N'Zgal'[75N3O0<4gVAY!VW+fB,9&RKO:V@%R>&&-m^$/$iuY#R9&mG/2\tmF2@ueOSs_Erm*a4_H^lsS[Y[7-r]L$jWh,b]Y-_VMAEKriS_!bd^s&emOI:BHX=7"GM%()T:kj2F%P<%t&,G[_=T8$>3@jN%/YFM^f+[mjl*TlZ0?QroeiWbRZ1O.u4`+]Ao3JEO9&>A0/FLLq]>4<9`\OOg3PC8u9VVFRrNhVG-;*9HC%+1'Y,#&DXpBW0Mh!!`^!Cl&X#h%u>,2eD*9p%RPkn"tmt_(FN%02o@r".UHr/jg^G$1482Ul!,f6EUsL-.PoKfi7*X&lKJ$q6]@t%*4N_C\5I]0j]L@8$5p=N8E_;*F.$r+`(@CuDF.O*-!RNlL/:O5I$!l#$amYBbok$6ZS-`#k`.ZnL^EHJ51PJ9eRV(HE^g$W>&6@Y%/!rW,#PT-m9*p7a\;X(]->A+Lo*,m+bQqm+"b8jA'[gVj/usG<U018a5?:+\JoR(&)@"E\9fK-EX*<hS\MG,mGg\K[8F-?^\tT<R%FHMZ8M_GSHk='_i^nYqJ"[&a#dIrtl:fCkM0)T5DFH(:i*kt.:-EIU)&8tkbe,ZfHd?s"AD-0J<rJ>b-I5kIWKRfeedO(c<^sr$D%ChSqg')b]/4R)ss:QI@5A4t>NK&#9=5;C67%uk(\f#<(P-4p$MFZ0d$LLiF2Jp=Gr+lr`#!dHP3/>,ME6bG*\LY50r4#2/N`bYaQ%Uo!Gqh(gU#(+M^BmH6*;C0+\NbFmo(91(1Ae0V(VWWFf2Ria@fJ*^,o9f`jm_aoYd^N!;!<c-NrSmmgep??Os[7dS&ft9d+NUNlN%3^t1<pC,-XhOER=>dEld*)C/+7=Io7,-p6#*_W"3iq4c];H3XHDA,s`WG'pS60gk,_<t&h\&D6NbO-bnfn`E#B'uhqP_t*\DQ@kr%X-H^8A7\G60p.c8e:8UkD3jI5/nW#4$=1us"1#ZZ!X<lT&L.Q\a86]'/njgsmToYHnLOh\dl\Z(coETf,@V="[@&19$'0`b:j449%Ytr213BN3l)lWPn(jN]fV>X;+=8)!PN?)ATT_L$mLriBR!_0Z+Pu/uELj;jDH%C\4mio;EFaH:)l>BiA[e&;OKXi4NrG";WM$[jf%)C^Ls`bor[&>^DpNSTki!\\f^nL)W$7'Vj-BU3]E%Ja5C0WSD][AXtV/(&WKQ-$()j`F_'3qB;A8pd>=<D^;bWIAFGQD//kK-:*'%Ve$7Ep;H<T#G<6V->(@Qj]IPU?kTB[L@=*!r*&&>..LYejcD0;8.-@;UO`R[7Je-+\T0_s[;+h%6uZ`a,8f6dK/7krakW*hHn!j8%MTDD(7rAFX2gdbb2C\l5?3'TQ>@p"45,B=MR*`EjN]`6fDp6)i%7t_`80.8rlsTu88iEr:"4[iT8f-nM*a=_93D<!Ega$RPZN+Vs%+mjPIr_<6uG<K0G7gCmLSF8B.JK0a.%jdRedC>5Him4$)X5,@-IqT<SZrd*bK)b>D+F7`KiFV"gG_fjDWTFM7qt],tqrr=>r=&`'%:L6*G/Tj5Uk?*$ab-gQ1G->*jr8::YdHtr<l6,7aH4@&?_^esJ!/un`L6nQ%&7\;X0]$FQj\<YmDnl$oGpmq\nG!)J*5[b\./MfD%H&oZ5O-I,)/MB6=imU9$>QVqnrCFjEpdpTt4/><eoB*URFQ)sCr4aO8iu"B#b-4a3:P`>;9ggu[ArC&!.a$3HL,:CE)prIYSqmJR%'h6=:$:&SZ71TbNUabae4=K.<<gTD!O6@#U]sfpS6$Y)(:4No[;Z#]e&mUYo0VUMBn55>2=_LHC=XY)2m$OWfBUfiOX[u"d?o`J5%`)16./j5\6G`2_12Ter49km,a&Y!1A+NC/b758hrqP`!:HrLZrKMo!9WqES%X9^\(^%/,Oo*JUX^\Xn[a'!ijlD%P/E;KRa8#8C%%o(r@98%"p'p&1qPC->;Wqc=l)H<;YFs6?@_+6W:pX,fk9.gj\6..VDlqP`!:U:u-M;6B"0IK/T->#-qONhSM0??oN85oSta=!,t=%7aUn54t?64R*bT25-"8WV=.c><9o\H[/STGV*8<1^P%I?iWeD#RqRjSkdsle#k;7noZqge)B"0]'us\0Rk-fsaJJZ).?u.YQ7;q9%97^O5;Z*AUdMsKui\.i<.s\t8YTb%jUalN2a&uH*!Ar#!/LtOH!Z-pg%"fh*^8mQB/Dqt_#%jro)e:1Ek?u_[1r1mLK=h2[.0,:G%UR]EbTGaC\?3FE,2Cj%[0_1`hiOC9hE.C.[(d^cT;01*?MW:X\&66*qAUp6uR`5tjag82W!'CkV78h"@Bl>!rbXHO%Y_3c)p_N?i%S;CI9YgESH/$Gp`*!JY?90aob1Q4XCI5)%/cq<dZTO1l1orZ.\a,6[CiAobQe)32/Tp<E/*:umFqF2St(e,$k97Va/N4j3bIuY?<%Xi..d#]\$#+rWH:4h1tTOJ&CM/Bb&,_qkYCFEljLBM7rmL_W5E0cXYni^enS&27jU&/Ftn1cMfNB#)h$dOHD<#TRdc?'4B7ob/b3%?^@#76fetW80f>;ikbsL(7%39M:5=aB!;Cd$+VBULe=JaHZBu8/VjRf'<s)#V9'PW)Xp*0%l=KlLV?.V@OHEKMJs'0AqYtK*#bPr%S.!7#&]Jh=6pfsWD)e1EL9iAVkY5D2XW2kg=IM+5cpF6[ci=S4U>n;G^erRTT"l0D@'fEN$HWUYAkZIe.KR'B3.6:LD&AQtp'5.k%cg)O$8-K!Z-(MoPpmPA5irJ!_BSt@U!.,***g)$S`5(W+kR3&'-^#)H-;,++_8^Kn"TZcc;38Ub7@#1a%r.:0#Qi'^RRh4B$-,jd%5oZ/HF';/+cje/*SA#_7;B,rJKG0Fg?k$Za0If8=G%(a=RY;P]9d][0JWp8fMc)eiTU(+jj$6Y;"Ap/bEEZL:=!k.KJ;:F/HWMZ^%=MUE1!uV:H1UI-J7>Xp'@$<;h6<D;H"t'CQ[44auD9.kde]NF&OD/j!e.T/R\KhQXKQTk:9rsZ>a?c6`U95N^KdaOS!d+WLOZZ;=%7USW4M;"A&Op)SQauKrX9GF=#`"<?V-pF)-W.^N"JQcb[OED8^$!K,Z7027Ba+;]l_E1Ll'GX@35QioO6KCDq0ecc<8-hg)TU,f/%,"S[-/-(#1V#cR$Q6Ts'P<_"F7Tg):Vc=&M'JD%g<X.@]"^lm<I44"VQ7'A^9KB3X?fQ]M3)8?<C_sl".06UU76;6D;fWgTJn3-!%?tK#55V0d13_1Bf"bAK'#J,S^.=H]=D<NsGYUi(5!1#mu;K<YM-k9@*1jKej@<\He#R5+>l3'j-AViC#^q",`+DUt)`3P+1PUq2K%k$#<SQZWF)O.ln*:dqIen_taP."I?<][@lrO\s4]PEZ>(X"+367>*Kq+X7&c,sB5ag1k1>;AQ/97>$-Nj#iG_+B)DudKD'IN$U=?%<K^:$)6=DP'S)tf<ZA6['dsU0/36a]c2l`Dl5Kc_F8AqK&rlCf11gE/ZlVZ`=;'eB,:.m6KE]o@#6X-8<%0X-if&pSXF]pF=oE*;%'!ajU+JJYiH,7iL0L&2bN4p#WBi(iCZm@!1BOqMd&npqb"FUT9*$Q<j.0,nMRA..<8jG5]BX0m[+GeJ:Z!^;L.Z<E@"E@c]:a)kj%L'$+q`ZG7&pDQZ`4D64_Sqq!B>#H^nPTY$J>9QkkTS9X=[Ne%##Y9uKo2q(bZ3b7[B/W?i>rW`i*@qb$S7dZ597Yrr5u4Ll-*7SC%+Gi)J?.=(@Ac&-n:(5DM>$WgM!!YKTU*SnF+_cD5N6iB0jlj!j!no:iMF4V[=937oRGn2Q!`0%NTN*CjN)WGXHkcAA\e5U2$Ao8\%JI05%9LDk_/gr=Sp.+n=UDTt?M5+0.B@'>b+INIB5p]&n!Xk7G.0W7#5T:,.Mq/(`:nSYU%)rI*Ohcj))N6%@?t=8IA=UHHE\.(^%i3\D11oM]SC-#cOdH7<lJ]fDfd)FL,cidl=WBZi'&g19&L5J!G:'sWB9U*anMP9)$U<'2ZKiXdKP#\k8\CNqEYW)rJ0X)fFU6`W7%j)LSKN/4ug3$j^LAB%!m#g-+EXjR@)KRd#iqu@os7#E*)<eABB_L[M_7OsUs&![.Ke6;At7j6m>jCdI;9,OhLhI*#`6cHn&7pP&@%#j6fV!5*<GDVSu`1-9kZ/H_Iu_-ec)oPoI^YhA(#;F5k$J$C[0$7(@"H=Wb+6_6qi`9@gE.3R)B$1Wg`OG@QW+pG&&NhZ3K@(]$2%#Y:W9bp'SXLE$@G#PKm7FUH9":uKeiGM5s"P'8doGZeh8^s[4ZO9@D;j(M_=ERn5kdY\ZFGOVhm(ir[5e<NUg5nOJUnI`TG8V$0#%3>*fm+osM@'Z#1V?jR]CkQD3"kt61q5^f@W"%`N&)-XucD1d<GH48mD=9HJO;+pC9J16'`TPF]uM)/$[M%r"7\cPAebD_<i*/hW[%(kTP"J85X;NIW=R.-)")%Q'^VRKeR!Gn5OYcjaq5k^HhJ^B)O]\?V9K$N^KJ*$\OL*&,H[^tOJ0&f=i,),p$.LQmot#LG,#3_&Bg%^6-3oKIG4L`is.aSS=o'L;73@$V4<6"XOl*5s^/aJ54U\E7/-ipZ+(qP(,#b9JfQ*A8!F=`%i0N!!SX\TIM!Q,7MW.`Y!W0b,eYO%XFi/0dKk(,X>4&f/]E%3fAn]GcQ^hh(5nsD%4VWO+m<q^9t^\).tRH1:SPZUd'\IZ'I[3((_eXoV@jI7KRgEbTS,:""otl@Ri4mY%6.E<YpOMcgNi$Rq-*R_Y&18u#UQ#Yo9a6-F5@P;5#o[kUq>pjb=L;o_6Cqj=Z4*-BkXAN&_=rJZ(fo.qih\&d<=)J+0?B&!(P0E<%JsD7E^d=;eJL-P:TJ?(l$Uoo(oH#Ld/3rb.[ILcjYXB=L&jU/OE<8]`M'Msj_c4d/aPpT\B`.tR!YS>0!O9EaM-:4g3grdYoi`j]%"`bT>)O*'V&!,um=TPKL+h`S#_,sNcO<%!N6EUqthSj3i";jAD+t$3s=i/9+`aP\DEfu8,,`3?@=;;Z-co=W0n;'M<EjZ#t#GMM.%K!#hJ""[gg945-:#,%JXZku1hPot5i[\<n.=2kjT25)Zg+qT#t,+0(R"C-NoV3).=b:rY-i,mAt9@3MJOB(iYW(!4EF9iiP-rQ-<%!JB#dd3`Ub9U?/s5]&rb?kR^9b63S/XHfH=AU'UPUbXVQ=O<*3"!WM_@*hSTV[3tg;'`1g\-B>$b\O?%IZFUo_4c,5E(I?(!=UP8%_u]sT6/kW?9jiiJRoNMo7)O"XMk^.P4ofM(L-&qY>bj'c<KTN`)N'&A=FoJ6MUZWR1kEX8.8h%((G$V^,1J@^fV!^K8>7W0csHe6%@UKUVW\8qN-K;TL:^Cf=!b7d3PE;'(ILIY-EK!@(O#rUN.7*5s!i,=-h8<)(M?@066!KS,DcIVo'aIMt+_X#M4^+7/U(3E=B&c/Q%W+?5rc<(k'o?V`I+u!*6_@_"o81js87:\4J7WUu(aoW&iBU4rAZ7Hj?rSSM^=2prI^^:]"#3N$<Tb:6W#Y(JOkuL5SV@9"\f<548%JP)U-dT/dedoHV]>!T<0<=h3`:`"[Mb6&tAg7k5A+jrbr_9c(.5Q_$B6/X0OU8VY770-u@MQ$Q_M1@0)ka,%GU+M:$VI(.I9O/J>%]e`-UGrS9T>]BYY!/JUKKWY`^"DiHOe1HV_U0AJ29YW8bR50'iS_#M0=sY"1eh;tcVHXm,PTnd!<`qnt1_dS9e\a)PQ,,F!+`aC_%3--Xil!WG0(("",<^n[iXUH`7"M1"OF$X6e=^R>"OaT[j7S-iN/PAp1AB&b6AKYf>hIs*qKP^$IF!3_uC/3`(=ELQWZ8*VXV\B-#%5XUKH4Ri`09bE=@XT[J_7D]ALG#;Gj\-L:lK7gu_4q\5N&mGgi>OiOd#'EX5VD_TZkd5mS,jO<\M+I6.Tf4)['):%c!j.k%,h%hi%E/tuL`rF*1]-PR_,Y</0a?ASkMTeaYVE2WuUDWYbYl?HE*#A2d%<N0sd7Xtame0WmART#XVoKhS3%IWfr)n)05HCZ:?qL<(&0d#1%etW*(615ohYN<DEXT._sI'WDEqqp/$`.r9;7-3A&GJs8D:8I]K&44G;!VogD3e-jQKRTWX?[K,/Kqn[MM@@E&r:_O*@`,#4A09O?%^jl=e^>,Reo=$sFs7u\CgL#*_J,SQBZHrMfnpd>u(<P0>OmibHh`m.0kPtD)G<SN?;I;As:%\1q>KTJD4=5X%](hKc%EJp&#r:\>%[/Xu1^-.k)QHL;q!UTHn4)L69d&&,o1e1b8/Y!6rG?6^7Ck4J@miV:6>p#re$;>Y.)p%a^BYWo@`gk.Ps7m2d/624YoD"%3[Y;Fp%X9[J:7U0U;W.6U(2B`%tk?DI4+_/<?&^u9mc!GG'(NmJoLqQubojrq$Pi);>f!dC6Y$n!l`Op`8.l"NSG>NJp9?.#0kKBnOVZoi^%l;MB_Wr[2`Y!Dm@*GC+_q<(!>>7SbZJ_od::;.5qAbJEul11LQGBn[_:##En!U]4,J\I&V5DYs*fQjk_Ig6kR<JDM<@g/mua6&gZ%HB=)gBXb_KG&`8ta'U/&oV>mb--'B\DU%?s#)O\R3tAV'c%G:$f9Z.RQ.N:@i$pRnPX&+U6:@b*g%ruS7g`DhXd`fp=Gn:(AI$;&%]qT^H7QnIbF,Z%#GE:74#K^ik0R/WZ9TXs/]D/r*@T.RKT^Pt%pTf6,NNGk^oI[CBaE!c340F.]j2rIXf##FUc84`4QZm(,8`5:2%*WrG$<Y8i%_SZ@,ao*!<f)s_i2\g2UK;Rp\o(.(_pAA.6PuTu36\N15o.+AM>3NS:*'6GRk5'YO=<.3^@Cioh_S7Z7<b[,/nrE/J%Z_.R.f'n$QjqeP=?A-$tXpO3@@3bEHW?5"QJ.MLJ'/&Z_j#bbq&GC!`!LJ\G(?k\ugBY,#g/6KfqlLCo8HslJDumYnN.e.p:%G@:%\)`\?\j'l6jK1\1U-R2:'!9k^p&=eoV3Rke;JL<Im9QRr_%(aR9_Ee^TQn;HJ!^2[[JG@7g[>J$8rc6qG4n">nq]1oTF!h@^N\tC%._tpGk_sC;DJoP_YkX4u')'Vm]]=s2:d'0O[m@ZgdI@"^]id$"hkBYIAGuJ"D^cbpmi(kSH[f]./V$?O"jQZ^iddf9'*C-MVBo3^%\_1h?kV$)9X8A5dTn)*Imcp<MR@mY0%r_3Z1b(2KA%1Is87b]ECI1pF6M(!g[J=(d%YVQh1PEK,_B4/g]$BImV&qI<i?f)fYjUCn%cbAQZBQg#8L=hCHK,R[tC/#k=!!<qK!&`nn<9cckE;Ok:b=Eg8T;lr>%9??!mkoIpm;I"@+P%mYE<r2N[pJ8kVr'a?8#H$iX[)/j%J?2=kd*0J"Y]KWtK3S1O4\EXD'BiZY9uOb-o)7Hq^YChRHQf!g+Ar3%[1F35G#28KjPN%XKTf(-j?>g9IS]E#`:b3MTJ_k&1t4$9%L@;D)?g7phh>J_JGeU$N>Hu%]$*bP%]Ib#P\*,Bm.9mt#D5$DX+/.5K%M4.fG/6oK%"0#nrM'98WW.-0J];j&mGIcOk8d+!B;-en%n`VM^lP1:?4CFTodN?c.>m5WolkZ%nq*>OB52f+O+,(7$P4VuBm4LFjd]W%iT!6R=otl3Z''!)3f/.S(<)2TM1Mo\;GP2GP$j&2i%P%]=1pr+n\V9;Gk]L"m5l9nsgN9PP4$SAK1-O)u='r^^Z;i/7mIH[5c@u#^2D+5pCc2mQkm5n-o&3'.:ntMjY(p+1ffmh@@M.lI@%f/0J5=[Vo6]up!s2pW09h9K<^A-tu."MRFlp-M\O0J\*#.PaY-qKr_$7#20^#[G'9mh'u$I#!D^aQ[Wf$J5,?2q<U7U`r+']e,E0%CDHE:R8[Y/L*aR-&VC:pUrPKoL(T%BHNj#'JS7M5oO%pa++@RC#I0XId`<\b:3qfsKGZPEebEVE4-XH1//JT6qgXOaGA1@Z501ST%cq4@"ODT$9a#\/2TOR?^qd/!s]CS>GL#TUc,_8;:_tl"ZQQLh'KUOp)E.UF6$h4Ko<![njrHG%NIWc'lb[B9+TJ+2sJ\G^a]?9$V%i2Wj>Y'15$O0f/lXZ_Srg\lcj`B_2[_G-HPL$_6$R6[![I*cISs,`gUKueJ-DP?Od]`[Xk<+V+VD>$WkM(?1EI?37ooL0[YS_3?,%40MVSJGSmMR1OAZq2ddWmfhms@Q`1%HBg_9/cW0jl!h\>WM+)rJ!`*\$9<>,6bYpZ5o,F-6u_()4"5:cL=iVMmj_e05o??!4D$n:%HM/BV[p+,ah\<6772S?GZJ95h!,.$/MnRsfUmDcMJGcJ:$>j8!HRBX:NJA@(kTZu7)`+'U1kD5NOcCRVm;OTe$&tDsoKgV0KYH!N%$%3am5=Lis..lnZl=lc,A7e*7>G=%T&;AaT]gcWeiZJT%FRc%kn?<0bL`)A)9PX,$Tl77_mJ]D-dtUC/P_^K#O]jIkf+WcZgS;;u%?UtV%TXW_\ogo^h2LW,n^/miM+N^et6H;J*66FP_3L"Y``_89sQT+&ZhNoXDY$d\l^!M9t+nfB+bJ6bNo_U++I*#6qrf\bKm]?4^%;A\4Y+^"M-lkai1.)^ilW<Nu+<,T-gCh"G"mR7h!&(aeY^HJqC:g8\$Qf(RP>!L_mRt;FDHU#5oA.sp[R4uQSn&iIr_<PIf?:CZ=%&:+s)mT%5KTse(5&_H496iM`5%d6W]q;$]3(?XA5I_R9=_l\5f\^sA/&:3"?"22>R+,%(aPoD0qj82N$@G'f7rH-@-/f&MjD`Mj-%O)1C6nq/i/?`8*JT#G#E(A'aY9k\&B^D)fP+h3q*Xml\&"hjh$mb[T](2YLrc2hTa/s2HpfKUp%YTq4*)7N/umL/S\5UGk(.(-U>%^*J%1qApE@!*Ce"E^+55<VTSfq]M]6lAs'%mM0E`X[X\Ur>;30!"t&NW*`$<eW7lQ%`K_NBlsOS5(3ajSN+R=3"HYH,k_U.-\YbL%\H1&=I6n]!CuQ#cl,ZN4S)U;M@J8"BbbQ:F,PqIYh*%fMiV&u(ekm__G't[/iRY]bebfBRYRfSOiXk+7,R(IY"JRJ<;39,pY.$]-%mHOsjq53V7J$+1?3i8"U5R#lrVgE7e4hEW-6iQ[!DU`7p_2LuYBJa;^1RYGnRL7dsM\HH6G/=f;Ioja?Vne;i>6[O;=7/HP,qJRm%m<]G!'_]//J'^aHaF!-TNGP+=[(j(bRYksNpi\\79#jX^a<h<md,+2F\,d+KM#N-G,lFh*4_C,jG+o.<pncbpUDd?fekIFD]<3RL%(p"0#&pGtYTLP)FM)Stf#:]-E;NL]@.TW&+'A(OobTtS$cSE^a*U-5$aWdj9>W.CMTNW>FDR?;A=bmW8&TORY=5NU97#;e8qdiae%K!^[&N4.MfTTle&#ZD?rqBf]iOiG.m@CpbW+H+<-hm,(&kW(0Qc)E:Eni>).bj>P#j@?G`;%ig]'ae@<&QF@b-e(Vi<e":F`7ndj%S-$h#(%.3T2s$F-V*km=p]8sORXr-d%`#fZ((@>%1W4#3"`*Qi`Eok.@,KL``KpD9qs$bc?iCXh#HY`UJDE@.h*kA,O4Ds.;ZaMs%P3HTs"Z%'INSHh(M9$F5[bA34;X\(5&hgJ-dl54rg.u/+@KJb0%Ld/@W.Wp*?@:Ao>B[.q(4m0!$e5rQf"uPr7_OA!%r6JCP-\B:%'d_M>d)qK3idk/l<5IE2Y5E2S=hUC5H8L_7I+Yo%pVQWseB^.aoMiU_PBMT7:MqB)^`1tGKl"I7),$*/2LND"kO2SV=.!TUkuX_-%*/3eKqo)%i'/s1fTNoYd]lH7YRhsn%?n4/SDN&1;0]*<npn"'UW;X48Ni:ULP2q.1Jf.Z&%/9]`0Fa_sGO_j>Bs?RVs$8H%-DWH"%>%%)GkPRhn;.=JB`/(]<m!G.5@I$AX!qq?f^*d(#&8S8QJ;o;@"Dm3TJUF&F%ka1<(<jAV$<DA53[*:A=R$Q-CHOUh=*ZK1<d0RL%oXlT]jl7?PGXKa5jL%(i4EfQ'%H3[aT'%$YD"Y`Hl2/B4NCf0+gG+RO7$!I?QK/J*&Vc/h>IB+DcHj3JT$a<'KERU0,hVi^k;6-N%#$]^8$Ho8q*pB6m^+.1>8<5nDFr0ib*.kS+aI;"qIQ(%,Z6Eib@YK2rqj`=Rd>a%IWp@#%U22ohJ+(7Um#-ic4tr)bi5F=[lVCe"%hnWXgW1WikOaQ&F(/eu8=kFPgEt0Dt#2&ZZeDla03c,l!pgQ%?-k'^9?*==I_poVbNCq6RaibocL"ZWEX4:FYlY!sTGX(j:N4P#@%D;I:4kM5K2dNI)%Gmb`\pWdK#EBU.!ZskP`EFfT9BJKrnD>M&tN;u+e=5"Gon!PJ9NV?ff%pW.YQ5/';['(X:2%BA)Mr-#3C.T?:%I2#bT/4h's)46K!=Ir;*l[@kk^5\TuL!HNAB16QLqurR<eZq70_=j@Zh/E7+-g'PBY*JPqV=6AV)8=Ah?.b_nO[5rLfZ8Y]Cq0$Y%2p/3RZ/JDRJ[lg:h9MGtFhK99'`e:mmtu#]Wf'3E:rTo<!,V.mJL$$RNEu)A4-3I04>h[JgcN2ec^9R:71n5QAtS)5Iqq<EghJ+u%HuC&?lE*O-*_miF3BpWHi(/LVFXO<dP(1ddB"0.@\5q#]W9edU3SKbV^h'^?j@C^(fUZp]P7.lnV12's7a'3^L]#FC7o_[d4*pge%j@EH(f_<rB3NCjMCsA7cmfYKE0;$DWlGE92%GCCo4oo?5;hOb.$jU+.b(aWkF1&mO`-O$"eS/t9<\i2L,AsIIM,9B%ouSrh\%QF[%j#Q0.^t+,n(&@IDU(=r^Il:l@4;**i[H-&\i.J/Sma\3:;2I0M;8q=cYl5R$/j2]+Xm=-%g<TbR#'nhGi2T"Il$I@OES!YY(9Zc5%L:EP7L6fL,NQkLo:tV,BXm5%D,_5*-CMT-^cRfNr^!65/"81g=#!Out*Njb#]34BL!JB:AZSh(#&*m#6Pq2J;B(:IYh0p"D+hSDO%fo\JhW6kBd]kJCN5n*HFpbi9@GEO%-ml@\c]QR<1H!7OsrEbF`ON]9.XK"Ll2]HnQ$EgI8nD;?[IX5c&0'p:?C8#Qk8KlpeQ1"S=%s'&oK<_mu_F_^j;<?9Pfj*\JaFG@#b06\5:(/G'^C`R>p:^+f@Ih2@!lXA[e*_P?0`jX5-HY.ta!In>KM3FtKlF#0ThS\o:I5a(n%Klh(63MGB>h6=Mq]klYV;O%F?aUZ.EWWTTc$214&#Q'[k>:/L6O7R_JY8MD>Oc;KU9EY3p>c+_gh/+C/Re^/,MM<ZZZ0braQGICt%#e'9B#!9X>7XSKMX1m-K@.W*GZqcKM8Y?65hP=5Wi_r0]7J%Sd90aT(=dSTp^6Q!\q'^gAi@?9W4X%WU6GV('NZ1Y01YB1Dk'&98%9$=o_71OeE]gF:#rZ=hm%G5?>&LOnj&Y"W0W$?nf>W^p`89.]/?mDK24c`+QZE8Tjp-$s"7?=MPT)=;7>Q'nHcP=.pbY&_q<Y)]B%gN8'"RVTa@T7Bej]gLgDO[t#-<Ik,Jr@DN9.p0nbkf^?S!EOLZYX+fhdeTCcl72F<?q*8_D]qVj#,XF0fXF\2r&tqmXT/FRGM!.6%o)W"'Xsdt8C#B,Zrh\Pd0QoB?rQ^g.]:b2lm#$Gtbbfn>-X;G^U/(gehRS"S/dZK?.'?1r"FE<TmG9cGg0cRPdo<E6h=3SLO5c^e%GemW"^j<t8(j%T&@+S*?5dMUJh"T^?RktN<NB?cmF@c^aVl.]oSW24d'&CJqWk`$@hC6L8=:1&EXWtZse=fi'!a+d__>7^h8\mhK%ltodeT'.N;./[++kt^+S=S$1o`0<OTYJ=>"SdRH)=AqQaR.VCZI9BO\IXB[hL&(m5]7B?QZDp4<ls)"WF`Mr8B?l-(]g-fc.cI-H%69Ya"Fu]!VQ7uUcG<lm7Q(m/\P:TWG6'_^u(MC*Y'ZcLMh`L@X[:g#b^<K:L[RXgg;f3P.Gr<D6]acqtVc!!>Q(cm18j$Kml\3/B%'+[:nG?G,)_M[X3>/IM=:]l'MFAX")88'L84.$s_0\[t-l,u?fpM?3>fcfInW^:[ZIY:+>OO=eaU"RhmJLS\@K1;`0JNibKZcD?[%XVA"?<X&cS!H^h)E"ae"630W]j:fHGeS61LLLHo,U0<O!]lO2gq=U!,90WNU(6GQogN.:1ri'#sYU[6@KM*V,A!G=EBII".,t[%r%CoLPV4f(lWa35(8'I&Xh)"\*sH:#4o>9gDA;0#S0:q63FA_%?C%@(_M'ipV8R!5rRKAY!95k:Xo%66h.22)OZCBKFW4P3QFL>:cr%,OM%83*)Vf.N=F6gURp#n*8MD86WP9jDt[\3pf):TV6mq%"-XbU9gK>RhYH%s/ps5'Yj2T#^@Y3H9g#GUL[W8QZ_E?-Lk*SenJs%%HaqN'Kja%+Jk=,)\'Xkdq)Z[<KK,G"n#T>rmjd#C8?HF#nF0''YgSrB=q=MV[;<pF*^9lVa,)LkUa;Cs4Kp%7A5AtlNQkul!FT2!%)uJ!dhdEXF2U&LR@8FI5;*.e2"0="fUCD%r#CBIY+ULdcs0-WFf&f`_jTs'F#Lugc`F,md[RPumO_@N8.gdn59S6Km"hUM!#.'hX%*c,(WI[8tr=%B\tW!7#%gL*9ISC\l),&hmh7/2>gLr-:hiF)%dh!EN#p)]@N?,)7iQ6Ng(<*^Q5<H^LNYAF'2_0(S`:^:4XS5#PI%AhT+=$E.VUTW-?Kl"14dLNY#@DR@_8(BA5ch4F(XGcjor<:*/9B@N;-AS!b^Lf$\APX\U5DUO7!?rOnro2FV!D&$tb9D]X[pZa8S%_[U1DN;$?f$ZpKad.*"MShcT6A+_4biHB7DJu5P,bX\B3!SbcRkhI`f/Sr)22n7fs:CfUr$K'd,YNK:tjVs`^cE2e[=8QUe9.huj%?]*b/q*3h$J9EAE>=@E\AA%1d)Q'7j#.*(fp>tG3Yc[m6P!=Z_#;TTdgg,p=_1i:V:T'2h9X>;oc4Kd^3a"=ZoE^Mh;X!>#D`=0W%/-D"(Wo27e7g&C2-a&Eo^1+D]BIJPOHSe_aYb_tm,#@:Chkd_T)lQ/]@(*R=q;eFg[a`1a1>FM(&)(7<E-[Lf@7*$pmpM2*+]Q+#%39[s;p)^a=<MJj>M8</__0q$MGVh'OQE>^3FPudXX367=Wm<ie&<W'X=p8U%<>A"q21j7H(Km>5)4^l_.tq_d[q?Jb\=d6U>?Z)?%d!$2nf"Q`UFQhe02Z5nPYRP<-aKZiC*ZcX$<G)Dt-U=09;tgKC;9+6Q;!^InN'%SQs-K)nXJ:iO+X#X;5ju"BTS5`;UDBsu^K`7?%FX2#"+;D'g`q9I4f*t,*RMMB@*Hi@&UQVD@TfQ8jCu,/-oe=8%UQ_Ha69.T@N_ka:MrGPh?78CL'1:^;Oie+:)L6)^'1X98HcM.K%#jau2#PL;f*]%X1D"`Ps,mn/bk-0-b*#.a.0F)d!W.Y?;Kjp'S'[&eY)Nm,7=Pa\fe"VXr#jeQk"dq/,$6:gcpuirWC5tcOpStuF%E)0-n8s]ls@b4Oa2^P#Q9kN+%A3'c`=O>R(U\;YWo0PYHp-cRsk&-*+TQ,F4U,8u2DuVC*d.'Zj^qS#Tha_SV*<Al*eSt^M&^f",%<"_L$NJrlEVu=&3143<mR<e$9A\;GuPV*W#2RGK(<@a>LN7.'p"M=9Xi`C_tNg?bqmADYk1-2m$3!J%KL"#WnU+<I)S.=n4oZlVX%H90d!/;sM&Xdi?&NFq:s"K&`ME;Phdm[%*l>1<uTs(Ikt&3f>hX$YoXQ=aX[IC_Zt,XGB7FKaIAfQ^A<1s]/h$&f/W7;-JkF[!3q%Jdcn:49/^mq4OhiEn:q?TN(\eq62`m(5;c#B3ek#Z;b@5@,Li9$6,q+L'$<05/[_6,T*JG=7-QT0O3+HIo21\jXUFVf)nVXNOj!U%I9nq"R<Gofm/"hNd>RB1C`HL0H:ZNtfR_k\rq<a8CUd*;92+T<[2.NJINWjmUDjhOUu:7[fT#mb:WMOV=/u;5UgqHfo8+&tYHt&V%c/%M[j=Q"A7qN!JpH7hZB$bXJ=5aO6=]@A((A:%#hm,^;`q-2,Cq2eH>!"FmYe[20cpro^9Lqp_NnQ,Jf"I^m[G@Lh,.g&J(N7l+%YisR/@"c`FX`Pc'?M&Dnk)b_Pc+QJ`2mC7oD$R/;\-'&[)@W?Lf\)F(C\6te^LuuUnA%)Z]>4Q:gBnHep,)-Z8_4\>4K:KI.PZHr%p=b.14p3d2<dV`UPscO^?A*NT7/@-k#oJM"Z`k8-h4Wt::Gt<t%m)fCa9i1^O7mH&Emm5XB(^(MPd0Q<BFQ-!4oK3i_&>7S=MrHg%1obnEcpT_^S:%NIjppGIb=SAcft;p-S/rRi&`/l#VhY(WneoA)Ej:qZJ;37cUoQ.[DkMpuDqlZ^q9qD@c<tjP/?jjCDqqeBN5?oF%]Q&uH?%["4GQX5R;jPjrn;)!>?aoBN=Se->%0\OjH=>d[ishI67q#AnHX,3!"p1",P+jg<.qBmH"&b9T:MepE<Wi$BWXD'hRdbJD%($l1[]HST#M&\8)GCfgkqK2F]9dE\GhoYT/2T!,C*jUA.E<Be/\Ek$&Ks=W"f5GR<[*e#q.jh(lBSNDa#LIm3%h$d?3,_WS]^&X9%hVs>7,kF&`_Sb,P7>^[N<2K+AfIP6a_2SD%hZblLp0Ag%H(BW[F:pogI;tq'RcO,gkk_2%#$Lt>EquA4l+8%2TZ3>>o>%L9"-E$%%N4N=,Gq96oBP@5p4+^j4JNCs1S-9lplF`/PFC[PcG4Bmtc;"TG(g0FcQOBdemkF=FNkIff0g``uZKnD.!cke;f,l_%oHiDlhYFn*%M4mbsm#?P`dlQ/lb1`O`J'^NPfC;q6okfqh^G+`QJ1U+"n8+dZK'JZ2N5bqM>d3f&5eqU,$s`%r%n>6S;d3@,\"WLmkB6%qOnIWB%W!uA>-?(5kIP!E7Z)cDNI-VRE]P\NQEaa8(fV<PK1MSSIN]sXfek&Ejhi[)E\GKDfOc&f*8GDj+"T[#G*\9'M^$tea$LKX/U6+W/%F!0s`%L/17"F;(hrV&%i`a&X/,`_-][gIb9lWu6g@3C!4nIuE*U<i.-o"ESZ8j3$_Y^MP\qQIp_<-"nWVhN+KhP&9]/2rhpg6$=^%<=6ECLriE^EF-[:qF."-@Ap4]([`;h?D"58O5YRUT%?QrC<`J%!I8!!R@Dn+d?Qs<$?fLV!;?uNhT+MX%/16Kh$J2(cGGl0k#*>T%XG]2.nh@+R[:EuEU#R@uDu4#,rWN<r.dhVA0j16VdRi5?&mS`pe9SQ3I.:h`[S_9l)XWD2UL]6CYP2CL(2T_j"$;5LQ=+\Y_7',2%?spVAI7o@*X^<C(A(aG6=F>fAc#52tF>?<FpL)=!33SgTk&8qK,0g;>[4mt^7jiM0Ec\?_05P*h,MiFLRLPaR0:tFq4_C8Ic'5RV%47pSEFJ]c9@&so)<sj1;WXa!83K[0O.%PS=\/Y^Zrsc0!,+7*-,:r0AA78s*hM8j2>qYH1>m>Y5SHTpK!pVm1AY)a8$A%]Yo[Tq8%'\G[AVf0n!#?uWt3g!r4gNG!BB%RrEY^nhGXGTAQ-8lkkZX3)p/c+]d,AR0b"*IqJT=kLQ#l%IW,r2\d)#PC/M@;&D#-^BKg=8O(%]s*2Q%h#0\"ks7dSgsd]fq/?UjEW^EQ#?_kjl)5&5roPq"?c6;Hus,B"1&p^m(U.P@&n!c\kX)Y&Fbbeq!7QCM81Z$j"3,%#J_+c%?&)G(g<`A)\g*2\]WZsMP3@JY=b*HPlerA.)Z>oj@dR;t^cLaC*3WtS#[m,h1!_G$OG;7*FWP-ZHbK_`@1QCuRUEEB?/^%^\CI8d%i7%u*=]fU2!9')K%KT$/Km-@1XrI!pS1?e-Hc6Ldq'#j"@iAnaJ/FaULPY>sC])2D%pRu7qnT;Vj$m"T(taa1YC!&8ZP9,?"P7ce%(U/o^&,Y&/H@@G-@UdaYk%&]4H(FGgAItpdcbnIRmPMmi44Og'M,qRGNC4Pe!a)jfJi2V7=p`5JJD5Z:&+;KKPec]tg!/5WX8k(3%_t%mKH9Atg6Ej;7lOiKg.9(*B[uR8qa>KD\>nUtJc>2K@:EH.siOVkK[Ig?0KuH](c-s;Oib=7S1!0$#Kl,=b?mTN*GXJ0)^oR36%-[&pUpTVL$ToQo>T/;GcAP[9C+0$IdH0/&P7%FR+-(tLsW:TKl]MgW&7^O>b_k"AuqRW(A-+j::*"'-rJJuX/&oR&)+67],1me+C%Cu2a/Zi-sE$&/2WVmp1Pa+XJe^@1gspJudUgq;Z8r-cUacpjYZB[#9%RXfrZT@Y@<nsluN6_Dtp\ib1FqsjQdT-8kGVDWI1V#Ch#%iEO4Ikg&#'$rV:>'L57^Z(HEj;Li%k<[el1oQaO[5B1n)QfuePr/9i[bb,TNG;q[i1=g]u8CqI3,?M+'W!]V`3_e@P9s5X4+^/;h%&/tGqe^*CoqRf;PFZms%!;(Pr"=p_aD!9YJJlN14*'F'[Yj1Pj!;5KSOC+:A#EAIbPl"?5HJWsVEP7$WLh%%f<eh3m@?c0IZR4@9%6g>Jd39++'*86M_:H9=H8;N\!eXO@QXVo&Z2X"OA95H#N=p\RofI)3?B+GIn63_e@C/4n8n/Dh]l&:JAZX]?oXX(:f"*3H/?Hr=N%"a_[iJQ7>[VT#M*E,[FfTX&<\2/t7J)q^'0&'O);h-gHVB3t,Y!Fo:HcrlQ?i8OR@@h/<d60q%2)nXKq&N:@>%"k7i,-Cuo&a/+O%>.t1M"s-nb=OGf0*H<,ac*d!AHP,FL@U#-+37Y#Ea2I\RA\$LV'h@F-rN2*g0t+dEqqOrGR]gSg3g^\q*+lbTqo-$oHQVJp#B1j3%j!*o-!TU7CL0.$^^g=s)/bKdN2rd]DmEY2,k26UhUV:>K'5_'&hS3:<mcrAs=<Fn8\ub`d7&L0b%ik%8[4?2(FFn;R@EH^@G.c`g%RkZY-mC9uHGJ!#5>Q!E$]WF:iRr,NXbt0Dj_@S?^]uf9Mm([M)9R2f!#)RrGc?0rnqF2sSg8kH^YcV7cCOIKi&Fe'+?r\W[;g;#!%q4<VU0Po_IRuin(O*q/Z4MkB<@smp2k(-ODLAQiThF??:XN0.th7p<9$rI0g5jd6Tn:hT,!FK/"cBcu?l>L+@_u7(/0U6&@@G&Kr%f-I;8;]'bDGpZ?`Sih0t)FDmdP*?sqMn&dF4#+mdk`&$$H/PXYGU'.2YM?mR/Uu<j\X^Wr8Xubr>YMqD?:fd!pLhIhL9u9Yd`AH.%!s82'+/VmTWI$K.2g:e9RA1o`C_<_D@Sh4`41mD;??,C*`dn]K\=]aR&.0Ia*a>>1qpHLs33Xo"$S[Pbgm4cdbdsrcS/]$N115FJ%Yo.Yj7PIQs^e27,SBs.]Z1+1s)%mur*rFQolYg!Tj4Fm/T8.EA0iIZ?B2os8`c:FiCLnJs4.8<\=\Xk]?_Ia?EsJRd*8"D@,#B6(%.QGQLR&O:\CEuZ9)>cB2Oc#lC`]rn=,9Te)G[hj$%o_IX0G56Nc%P!VdR+MG\.PIF-??C`H1An3M&\A%gkj-lnAt0.[<CaH&d<^E%^s:uc8.&mQ&8*B.-D=guQ&(?7N5S(63B=`"L15,kgM(<C.gn\[!HFKE-aFT&j;d?FMf*"AYS8FJUsgAY2`\Fp<PS@J:/9ZQQ;7d2%7!XfdX*e>Vg[ufCQE*cDeS5rG=TY[/13mU%@^ps\P_2YI+]-8?Y/dda7IG]i.OW]YF1]Ne:ushM`(3R5U`QhS&F=ZTkD6C5jErt_%nXn4j3?]i1*15;tR=:BRM6BC$i6[Kf52kDHjal7VF$?M8*$pN,=CJDNCoDV"98lRB\:TFE"O^]'d3Q-SLOVg[B,rAE5@@[==TdC(%.SPo6-Up`q4!&HDSn\Rbm.B\PBQ^f$PcS$WMI*;s`l#,MYq3%4@%(%XqFP67qd-OrHgI#c_<uQm=l)5iHcKq4ljB*@Xo_Up7E+as%loqeGUEKAeU]T"`%]m5A_=[N-%/Q4IHAgf'("B]J:`+HF2oXB10B6:!`Y<.%9ZKe[LC^[Q9>5WKBoheS,JIX#"K(j^V<698ghU1j%84.#.$TV/rkjhX2/g%\;pGpFWBq]Y.%_=bQla8aj*YhtP2>IqOh=ipnN$blID;jF#jai]`#tt^f_uV02!n2c3Z,*nMk%@b#keO43%`[rUU49rg,\n`f[FQas`0U1JIEM@OPl-g->mMQ>NW&48)nY/t1&P""R_n9!L6'=\t]7:1]B+tcO*?Ed\-*"K='&d"UV$Sgbkn(V2%2nOE]Ga*K7@`geal\Qo.!h3?9ZpVQ`E+j;:eH43b:0gXT9aCc:koPUX,hbQtYRiqoFS#WK9S_u5RPNh<FJ_FE<.ZGNXm$lgO.Z#(%X/7ACP0q+`UWcYH'fR*dc06;J)KV&2#==jQB^;$mQuT$&!EOP6BR#2UWlOP=T[S4sEu^+JJVH[^pGdgZlgLi+ki_bUs1n9*6NcM=%*j?BC3[Jpr:Oq\-#M(BZ?s!ZV4CieW]c#%`6(%sY;?ehGl;S/2i!)lU3eW5L@tc4nmQfs$Bp2;R_cS&0.PMf@eNp@nmdu*ZVZH=5%BCR>+60%Um2-V2j'k/GV+iKi_2'.=\`aXK^ENDP"H)ONngcW741a[ilO,ge@DBgDGJimSD`HP^gM_G\*HR2m)CAARaXua'6gH)Re%W.6=46%=5:20aA!H"qORU;=aBbX:D0#n<!AFXVtp)*e@]QJf<&(4M@(d%cZA'A%eO^/DP4*dKHqlQ5<A]KG>g9\,qPqG!(#ba7Qq%V"@(ZOt3<NHYc^--:s!Ma[rjH3WKPK0(72pAJV'[%t/]eTU_L+/5L,.0nHRugjb.6@S.d%Ol_.j((WX1N?'MC.`46'!`^:D%:>CS%7?rXk55cmi^*'lc.c1glqbV4S#GW*$H%u)+L!YNNf$<]LjRiZ[e'AN*ltsA+2Z2jaW)TF)_?@KrT=1-@g#d7&U;b[NFsg/$VEMA2%eOf9FQLUpghYVk?rj^udQ(K'O[KA$U.PS!llj$[q+Kb$]me@U8d)3lP>iK^p5^'Gc'iP=6]cI&%F64J!f\6G_iOu>o+N^BIVM]G&%)Vj"OdfZ]hgsLcGB%$mKfoN4?8Hci9\>.BJ3"3tB..V9-a,E'k[O-4,&uDT3UnAa0B;\PE6^p0AEZP;2kDg%Lmk()aBljS\I\B_;%FLk-*<$&@BNn#.P\[$eNFa"dkl8P<eHeH?&+Q.?(aBfe#ZCj1(!Hf#O<QV3.BQlt)=f'n]qV?^^pbm\;GR*s([!K6f66aRI[;CXu%m>bh(C<l:Le*YPXdQU_F9I`r/hVIF=]F33]NXib.+pFGdd"mI(f)YYOAoHl$jgfnn8!R^s@/9Ra_5#-TCZTVa^TkMb't)>>l$[3.%ic442USn5E8+1o!.CJk,k-;U$m-h`)a`D,&Z97t5c]r-a-r?oYVmN,>]:ImsMcuXJ;<?V;o&&VOHJj@&gHe%/!KSeXIaJG%^m$uD%0/Q-`@+sPlJ!u(RWh_h'GIe\s@2e)b7s)]/Q75hto&te`YFCpI'^/b7P[?'-KMusF<Q#0A41pj[&VtqZ/X]Rk7H2nOni<(\G]r_F%ZgQ<%LI^Orn*kW3n\Ej_VpXO\GMD@aVqY^<GJ!mt)T&j@P^.F&Vh5T*-XJf5XtgDJaul/c_\5j)eecXJl(h0aR@$Y=@pSjIV553a%WJ46'eeo"bNeA9DCHOYfcV*b,<uG,t3JeJl4J4b]+IMkI[oJH30ON6'bF,>lCQJdEO*NGV:MEm;:S$-u7Gb/oD1&+^=QJ:UG3'(I%oZ4X]S'5?uY*e:$<>Pd<I9lF1\j&C.GAQj6cEF5`Qp,f)QF=>`:2&r[cRcir-WYM]!mEtd$?tjc)1pp7X#qs<;EG'2.hA`P+>D(2%YU?B/1(jeNc+nZ%4MeDJ"$:9*gD5R9j(988%$cJRnp$3E!K`=e@&46-9S"b`G'[hf*p@fYH!kP).:AV,JX)cfR*K)IG>]D;*,60B%Mc_bfhWR"^jae/1"/]k*7M?LBi89[Y`K29r9:WK2T5og7Aj8gJ.Bj_ZY/CHG*a$s4_6e6u04V2sH99\Yn^,@OhljQPJQ77,9\2D2%k>%sFm=Hr$l].O-*)nZHk%X!us"J<][/J(k"O+)/SteS=A><u_/gAh!U@8@mT$ANWepqJ(VZTLsK&5LU#?89E0O=9,06t\j]u;j)%PEXKp_0!p(4)q:pW1h&M*QdP/r1#r#@4f8'eFoqTg$0frH+*m$jsj'^4IoYf+e"%6PjAVuPJ2<ds3"(49^`O!0NBD&dl.eRhW5.F%`]$[8R>BD/FR?Zi;8!-IS-N$a#$"_%iHn*L&=rF\rZ7(09]nN$DXO%F:1GQr[rWUEBq,EOV03?GELndDi@C"DBq,Eo@N\LE^MCWK%VfQ,5bl]JG*`QbJk%WZciJPc6?2uTnKJD;Cj==?;Ru#Yfblb"I;Qrh_f+3?P9]*M;`niJtDt2*$D^ZeMV`,dC_j;eK1*CH*Zms5d%)G-L.H+/i2QIO;lRg7Mg*F=eD*a#J$%/Z&;:Q)#f%UB<aU&abl9V;C72@k/2dP)mJe2@i=AhPSB7$n4FZ3$,jGsFfXU+4YM&$1aO%j>X5e[gK[7(m'U(5f\Z;)EL^qp+.,'0\`DqNJ\JP9\2D2WZ!(7e27c<KO<Pld-PfnX\^ria#+CoHa14$0X_8YoWUrW/=<Sc@+F'6%VJdMX>prlofS*-'N3"td9f>&>A$c>PRg2p4Tr:/_bl]J:##*daQu9<`FNjpQEFi'9MD"@@H)tLkEQutM.j?o+?1YkGh+=glf0$=L%:6*-4f:=&n3n=u%.#[d[PS)M0Xi&TT%q[=K=IBAGl'`t8;aXNk]&qh7??7W/Fi%lh<j<&7*aP@>bYD$sg*?`#">?.NH"*&ecWCtb%[Eq=!I.*KPW+$%"[Wu>iJAT*sb6,@dgOtShgH;b4"RNKXMHtM;eJmC+NM=h:oZ\&MSbQDP(\_:C4I@]d@REo%RsWc-,+4>\RJ=e[%Oq`ScoZ\&-Rh_=)H"*a)Tqg0t:[H@ZSgHO`H!kP9;eiO6k)"dhlY\omE+!C[k\?'Z*1oUsJn^`&Q6Id+DsF#_ouOm2`d)#2Ns)>"%?EdrPWh!c!s'e%P"^@`USb)Ck=lJ3TkI_d,hA7#R\Bu::+o:?_`+1II\Pl0;MGs^Lhn33l<fjb8\XYO^AApG[Qb=32LQKl-&#O-6%=L:S(j8G*=fQTIY40Ej<p$TLTY'FJp:*91X5C!L:'JI8AP@sbB)@,sV?(P0#[-Zu'jnTmOAH^I>:FsIL0O=9Z.[U5nYj^fH`%!mP%-a%a/HS#aB'El!0Z'qm%qi3;Tf="^9fQVF_^@IPAdR8HF:s+'@^'S*:>X9Qm!RipPPpR)aosj,j<L0[fE9AdtV?ZaBXIR7<GLhRc%SdSs@.Wg"#RO=CQ(Yhe.[B/NT<4:GcWi#VggW4eS.;tW_!2O8!CO,Oo@!^tGj;3j^pV-)'%@(`t5ah'kXW<e#Gt+7LZ/&RO/*BaC%!*rD"MJq*,iZ3Lnj'*-RW:sHRmG)NfpPPW?"RO08c)@'=#P1,_K(QT\0^n=!OKJTa?omEfbTk`9WCOukK78MNW;!idC7HRbl@#ks%)Y^D0CN7QSf;Lhfh#!J\20rhUORF],2pt')cd?T[CVR8jQedWjPA^m3l>b$(@nL$n^*XllbcF;)H2?`o!NmLV1RQH<AnpL*7ND$D%k_bMZ1QHaic7ei01QH`-Lae"-l'Osbq<\U^I;^+s9K;'M#,Yn%M.m,`I04d.e+)"c>-Wo<dB-tab5oJ118!p(pPNH%H1R;%H.p;\%bQBBo-CB5Bk2F!kdFL%uCct.1i8:HeS9b$OCf&l(F69G)JSCLL?flB7TXde7]\@<6kl`]BhX:BtSqCaEG<70%j*C-cn$QMZlki:.%4FK*ITkBkN<?%K$Y%YlI8R?m2d,LCidq7#[0`CRXapE$_fTFun-/nRpopOXipKg%;l'LSin&`U>m./pUAg[ms"#`6_lQ"''>om+Q%?+(dua`D*`.KYuA"=s#g;in]D@)_jLNPTi4c.,/`VHoejk$D]o`\%eg9OWO(LW=T\?IPV7THqCJ?^c,\<p]D:juN!7m+CEN(#]7l%?(Nmhou#S8-u$!:9f&^@D6aXo6"/^!jFNS2J(U6pMo>tl6G'1>H*A;(ot[rX"07D%R!*c:qO,*H@[@=#DJ-DR,0GO_Gn-QOSs7Ju%=OShi<r"Rr6(6okBg7%Rdk!.1TIkZIA!X#%BGAj%RcVXReTJWRbjo;C;F[>Z<jOomC2Xq!>9q"XLPkL39X?jp6,QXMc`:3?hOnd;%aGhFYAe?9hl'8/&kaRnSqL''CpUkbVT\igJH/nh>)m;B.b)baOegh9:n@V!4mj@mMMA]e%VH9AEA(k:(B\"^&FspHsKt6S_P8:VO%+MI?]8nLD>ZsJ$e]/4RUH`#3Oae367#1G(5X9tNj>O.Pu]1l4>#GtRob\]M:&FaB(^tu0J@!^p#"CH(qh\31Uq;SJ4R3*mKNgfh<%`$u;k\XKCMA)#]$.&bJ2HWn)Q^tr@Q:3f[mV)Ymg*CV#O.4`5Vb0q06f/;f4b.I[7-g>^(.8O<t;+FMrggK:GeO+(Cjqgr_gUs*k%?q'549##!G$WSDTdjbm0XW!5o`[VM#A>EU:jllf7jULS]P.XnI55Eig;k=bt.=ZtaQ$5asoG4<(*a$sdnI:S=@1%2c!C0iMl1UO8%*_`UsX#H@o#W;fhj_=IWN!;tV4Ku-0!n/V0lmsq$._RB5oeZC\9WpR\4d5_ol'80SB<BVOn(U_TH`EtdSeF"]W@NM_Pt*F-KOEFd%k`pAH6_(!N[@$&QDl^0-Qj.)/ZfUnr^J@L&#YWabFN`.;1L(ugDL#X?FGWYDDL%[lhK8igh"#RMbl/66&d).TC1Y5;6FT(]P"pPl%QDY=-/]dGMaR[-h;?127h=>GX@PcXJrZ,.5VOKH_Ye>&""+*uF`$[p]4GpI@rToDESd(Z!i7a&kSd(ZA*>/etZ95A>.Y;B#VjV-K%ghpE$e<j$r@Z-!m:Zoqms1gJ7dlK:<gi-6VS(dT1mKL5_QD[Gh/^nN8OQD%aX"9#p+B\>6qY[S&i.eF8Fo5\*.tI]RE'4;slQ3=j%k\rH-/FVH1es!V7W*-XU>[oJ4nrOAe:E<#f>FrQpoe)GW:IPZcOlh8[QA7f##UIVrFN_9:IU-S@FN[&?:mH&a>F):CFp?pbm@mf+%nqiqiQ@:Jmfg7nK.[Y+!a>'\"(p=eDo(8[#lr5\+nrS(&YWH7Hj_6jQLM<*1>,4(+=O_#NVorVaVI`tQs#I4al!&6[V5^fWZ-1TZ%nr3.pn]M$8IM=L7noTbj-pjr5.Sj:G<KMBLRR3n.%AmFfUZm4K>LH,4GpM9kII<,$Sn=%#S^4:V,1@%XN9-+LGoAcA+*fh5'i?$9%O>?;A9YW\88L=5M6:el(a3dI=1IuajH&`-0!Mh;rH+Gfo072LF*_12t-H!YMas.:CI[G"uRP'=9`Ul\-R4`a1JTT(&\<TY55apfR%9X0Uf`[q_&UuPjoje3hJmM8L*4A?GUX:@$M20i.Q'$mq&;Npja83t'^PLkh!.CN#r1jSJTKT5Xh&\\.>_bfjMjSe4:@k;amPP=YV%#92(Oc(k+9>LDNV%&C_8lAd(W4_d0?X!5Z,,g[rU7?RlpP(5i=Q_W;jZl(@$DkW;A16?*nO&LIANpIFc4L!fP_)0>&$X&\qQtCVO%eWttbQY(O,-r2<eEi17FdI=o3BpK!'DB"slBpOOKZaS.e)Z2^3.-uY53UuQ2]-4mtRcU4fXniKoApIca,6H=F%pA02OYAt1RcQ]@%DC*kqhC6UBg[G'[N*2b?H?$J42K"OGA8Ba9QtCWBCWgc99X?jcP=`U,o)p0HaP[LMc12G=(6&g$=e<o_.6?J<VHKKCGG,bf1s6!U%'rae#d,cE)*Yh'sgd[Wc34ZUb_)0>^bS9ce1s88Pgr$R0/uMhnRcs(N%d$,o[p*b<HcI[5CUm%Aa90iOkp'7SL7`_PU!>:e8Xm=n%iV@V<-=E9.4k<\t&S$st-p0^/CETbMd$*?9*"=^Ad[c`V!02D0je5JRhJ4fI"(^bR5(J05eX`>8&j6,7b'OPQGo2Z.U!#edJ(?$r%7<Ef_V-_Uq&7$>lr8PQ.[*!`+?<0?QjZWQ$.Kg\WSattFG\/iD=qdVkn,(J=?pmcD#L^%8Cq2iR:2l'J"&,IPYS)A8l'+]i65AkW%8CT)LNed2n"Oek3m%dJe^I8=s\G#*0f+kVS3\?rW'X'$!H!n7mH;O*1qruNG&Hq.[W*(/N*`)&L@%-2.m1@3DRcVp:Efqar)'GWH%Z/k8B<r(H68n`5i<<3^<Y`@ti?qj/u"S6P__gi"u*c3Q1gt0RZ?(MO2&RsaD8YVm2<ZPJ,=5Gb5SgZ"3A9j6jdlOfIZb5I.>L><;%QM7oZ9W2Ct"L:.o'3NkF=e6[9&SHa\QD^A*>sl29h"(*?$?\?KNaW=Dr]Oo@nB69Xnj!H-/W[WD,'gF-eL_<u^$Fl_h!uM1FpHGI%:V3S%rZ/=-XeD>tgH0:uqEW"T'MPtu3kVI(M$^2"H!k9-@s/0Y4M&E[El5`blo8c?M%Hsr7!\EsQ)>mpApIc1d/_WIO++P&7E;f9%[liC$MF7Zt/J"ou1.L/qaeNA6jA8\BYO-m*F(R,^nn?1HCVm_%,^GIEW#<tMW8#@9^7)5,Ufeb0JE>kmVHI46M=Q88^a$r'X7`&0%)bJoHmCgidoZEq+YuGJU;7;-:b^sTC-h0ZhV_q;82]CnSaeM#)/@I:eeLU)c_jkP4A=V6b+8qoXi8;rCl.QgHo2#`gGdBRG>$25p%.p\a%Z[mTrPR$n$/AL20Vl@tA6eV"PUV$0ZDXd+No&rBAVC\j(&`r8/PFWbT`-UP0GZ1rh)'[7]_Y<1a!R`O&.>i<uT2*#(^%OK$%!17ADbu(`e(8b4UXgu48HX`:2$h&4ep5)pYEsc&7QtCV#"P5,_.C3W31_/.%Jn]Jf0KH<DOCicGV74D:=gu';2\pEpC9=>9\YVCr%VHY,?cR%&V7U!8`Yf^UoFN^G'HD\;c3i<I_"fUH4qH-b`Q:H;qS^\0D[lglEG(Jo*E;rB_9a>[`gSXJ/hEIKl3$+R0T-UIF]&h=M%?EP*UCEq").i%uhHi"[=XcG=;J8(A%<&80M4V!:ho&tY>G2:sp]=b!opN7:L>ort9ji!o;3+r-D-eeXL/rpM@l@IPZ**HU3Y]Q(g%jg]bbFSAkP!7NSsf8]DSJ8(C+K0Y:hYqXc`&#Y!DSHRCr:S3U?Hq_F?4:5[M4h.;'R&AJ'GNf1X#X_e!Nip>T&%@5Gl<qQ5@@l$a%=WP=8beniPZl5$TGtj(W>WWjd*\AYk.3=**Qe.`c:`!lb0J@kd1Y@Xp*_m4l3sO.f:KN<*hpYf5+iSl]H+e4A"5@h["4Ju#(P[!X%C=4"q$:XmPFg#@_Zf"(:_R.O&QGq1jFNeOSd([%;4-"Si+/FlX(Agn_4A$=uVINs1$Ok23oCEI-e0G8(dPA#j!hASuh@4%&PA\Kp%#6g/DY@Xfl>F:_%\d!iE!n/oc0)q[2))@jrSt5n<X^G>pdF)Cie6lJBdAu.Lk@'C%Q?i,\5Plm#a#mPkMr=ce0s?S/if:8L>37^.%96D.9Q?c3XhO9.4R7HFeFn/=6AD]Al<$LE`#,HNP($<<=bY.t^gP'@0f:695q!^s/o5$^B&#*WARm/2:R$N"L<j"c-*:mh^00t2"%-4o=m%K<_d1sD`>]3Gi::pKX*)Ps),dP$Xkm.(kldk;65ghW:.TjOBCfF`%Q9l5?.c5hqkBNb`0ZWgq`L44F?4kI%E7rKNoZPRq"%h/6:&oB:0XM^fE'auoQhld#(dUWfJ^3A)dH)Wo_:*"(64+:.T&+g-!pWK.E!mQFh[c4nrOM)shM>5[s>)Osn;"ck9sp>4LLKB\_h%p>.oh3%LcI"04J7'2L#+V+3Ht,8<8O4F1pY*d7;)"KAc]5)!^;8$?_H"G(9R=1tp8\uAsV:^J#:XuO)Kp:D[6[2N1<,O:3_XbKg0%[CY\t]WoXqk&gJP9Y3DK:ICO+<^s\`Y\GKhdk8u?d9?'ZpHb*8%qt(BN3:P\cQ:F=L)ajD/Rp!a>BbG7099_hR\W+^<"\$3hc`>B%jgF;<T#1-CUSY8"3Moj5KK&'S\F#lf4pc-E(5CTFdkB%]aI&GWcj*RB%?GWRdHAG$mlLG2@.DF8dl5TrDoXMl7I)S)m./lp+`cAb%Z-+Zl/&i3e?(Mg\Xg#+S)oo,2M+4bnRn#[s?.PW-r11ku]aDcY#RRXU7M6&-m^H+&.@a>?T.JB@9Bbq[ZR]*;0`CQYW=*"Qr$MC5%HA8mN9YW^eiZ^bodkD<6A=/=3dP0#([`VMki">,!ZPGG#8A@95d6`+6KSlkA4*bBPU0Cq_\gEZX^8&iWF"DDf1TkiCUF3.?S2g6M%<F4:-D&c6Y4F4M4"q(<h.aK0=Ghb8^$WS6B=65SKVH]XO=HslAR\7fu_5\tLNpjgqeR#7u+PlVPLhcGa"OesKNi;_A3$A]5*\C'^%kQ93bcaK_C$\@Q.8&*KAc2a`'l'BpAMNfeSHJJ)&F#U7Sl'=j.ckBPAK?eS^UF59,[.r<`iT_=A%]!=#m6@9X*2SBFO1q3c6@nBe%f<ruJ@YX%)nb_1\[QCW$AY+<0fr[NT,Kp7iFFhet0$dReX6"f6Gid<s1KsbAMH?D:0QS4MkrJV\_(m7uoZFM<jf)Imj-A5eSQsck%a",KMPaJ!reP<<\Xq?D9,a_n`h;Xas#r''`kQe)Y0rF4"Q.PnO!$R_9H/7]i:I/1GdFE6&5oBA3YMZYnc6lqDZsfJ)OE:P4*pj[i%9LHT?bj.H1\_FX++O%0Y+tXL:HKEO!1$`=4<dD&9<3[65X#t\HMGfp=m(a058"o8^kD3+ZfNF9n[%Lp?Gu`FV3F\7D_a,iXV_m"]%On6%U4b[U87uKX;O3V3&Q=l,kf_L@_<dA(1\dhE74E^YTJTT%%^HYnm`JRZe>5_;7DeYJlh#7F4pig7o+_R00WCn;4qJ%)Rdj7f#%r4*7u/pU"EX1%;pbG?N[hhD1+TNb(YqfaXL.kZ,4en]\gJU>QR]^/A.FNNj[^Z:N]P?!8*Z>jE2V_38;a6RSoH:O-Ri4F@W^i[]a%miP'hIBbDMaLeL1k!2chH0D]_536X$a]#[>``r_4C6PP:4+5pmg>mgUU^-<.9cg%ol;hLNWe],9DmRI!^=0fH#eF$Ur)V3C'm,1/%3I@#<fU`,5XY@`68=@d3:okfYj^LK+oIX"(r8_RD8q^;4<ICB+Y6K0hk#L(g^qN`KmokBU-%Du+^>$]#^kKILGGkN7i9Msg;-;H0%\dj!u2QUBE-sj\92HX?;Q#8:m\q8^0h-_`^a<IXdf`PW*[OJ59]/c5_ZA;oW\cgCKY<rKMR\Ks1_2dCF9j@5=F5NYmqb4hIN\ETu%-raEa)QSh):nHN.aBPhb[4X561@mH-?fMc\!]VL&onY@3f`>#Q5==fYRbYjF,"mHA3HauAob6YCl+;h_o*mGf%O:#X("S^:C`VCi%7mFn2+gJ\'*Ul`r;g,_:=(hHocr1\hm(hj7G"7]+p4i6+!GNeg-?1cI+K-ee6O1D-BQXMgheQabLtfsXC0?fQB&G5-?""!LD570d%iS2.kL<hltqoY^tP"%Is)`u!3,E51uq`arq%E:sKG(h9MIc\fYVT9<bLDuh?&m!U#2:qKJG:lP]2[<QRdq.74q`#>(3L>H-,g3W"%(!"MEd?#aV!Uki3O^:VPb0\PS\`<n"R#BVA)FgqiIp2t60^P0obJI#dG4fNPRc@sqSh'#qN+HG,SB4WeX`o8M^eD.G0\tWAp7jiG%VEoo=YJ6W3Yoj]AD^`4?'&K<RC0gTPS[+E_H7X6iA!)(?(CXp7@@38/c$7\_UkYoe&K#bu8$L3B!n'(C*S)bocBk0&A*kY%RCfnm%kb_+fKIH"EAT$*Ja>=B`eBA<m_O]/<47&7ek^tnc'N%dlZsYrQJF+J']OR$V<Bi=-YlS-nHcf`[@mY+0Se16[C]N3eeq(6Kkd:=1%_dP6._pH`=m=LSfN8p!+<r*B85f8ch;oOL4kDf*Ibh+W!M>-p9O(Jo&:(9Pk1H%Y#Z_,*XL5`N>5eq,P38,:_)hX9m+e#t=6$sB3%dF;0gnSgo<A*H"@OTF-.j[!9XbbA`!a,fsEq3r:h/A>LQ$E7[[N&`RZ"0.Su4ZS@fZT9(cFM3AS1nZL>CDB<q/o$T]NUa8N=L.7u%mn@L%g\3*EO[23JT>^K<'!R,t?EP9[?mC<(&%@m5##c6X=n?"UW/M28<oZ4GAs!'b7V)X/M%0:ojtUIN(YWN]&l:ms`RSqC@+shD%W`\r#X[3-PP?4pWh;Y%`1c+rU/tmhk`2H>d]7g$<*jV7>95#Hi8nU)MbD(%lQEqDC)9A@(lO%G6S9o=<M@3+naZBOlcLQL9i'(5U%L`<SK`qc-JC^LGG[!8!uAR$?^H0R>(Vu`94a'a`3X,L2s<j\&)o#h4N/9-7=,-<V.W!]KVQ\EYAopTlO;)*,TKh:,uAZtMeYf$^D%\<\X=Ua&=;b$Kkt@>PBc[H0??hQcGPX1=KKe@TXo[IQZ.0s-?m;[BU\L%Xc+Hm.@W`Wk3L=bKMe!l9$G[kP3n@&pin^N(3FL&I8+%)3C:[.aN;j-^9sV$G2i8aY+6mRO)P-HENstN=$(/T<fXt!'iCerPbMWTHJqi#<2"/TE8@M_a"M8qe),^;QFiN(_Y)]2pD%Kp+&@Z%9m6>?DsU#%9XY68P\5>+rp]>(\gY0kp]NB(J5mEZqil:,,utJEJf,?&SR2%OQp!6k=C[U&AmD!(>/Hm"LlqaB4&+N<bd``ql.gta%3*R&Ug?EHUie$jLCidB=h5D#Gobn*J>bGJM2sHSDl5b!I=>e<RnLnX@$BG:gTqLV:H)*+CcuQeiFbW/39h[@B01lu`1GDpPgacK"%D2Me3Aa3Y-L(k;n].gY!o<dt:o`U#K<S$GhNTH8c*d?=G"9tlUeK+Fn&IBOZ4cScZ)&^4VY5h]uZE+k&okcJm\0\e(0>Z/e:*$D3%_2JfPiAC-.HXj5\Ad^mY,6LBD)PmjSREVD[bb6Qi_`SqlJK-:5fusr??j6h>no]=ghP%:<;^3K=)&TH;eZ.><o/TTJb(lP%ASPCW%CgUD(R1]DqL/3C=(G'W-N3\Y6):9/+Ag,';k`rOW/?21(T[*E@q*nVn<#'!!Hb:\'QE%]J&f7Dt9M&)p@td:<RZib/QuTrge&k[B%\:`/;[PW$.krU1D:a,ZU992^l=Nu-l,;*(U$CC<)%h^B\f6]43!gTCDGn"/!PbsWNjFglV;htgGH$Yq+_43hYrT;lTG^&/!Fe1_6%d-bG_Q?6;9JKc2O:=ujZP9\2:EKFa6R-eMf$m^<l!Ce5*0Z/K2RB/*(ma0J4#4s0gNd34XI)*O>)6hakaYL7#&:<\l8i'=/.:*J-%Qs]q@Eg@NZ+PoC&NE=CF)O'L.4\IFeO;Tk,8`K5:k)63_S59IJ:-Jn`)f78r!l^-\3n0ME1:^Tr*XO2*mY1irG&je-X<EWUDY.J;%%W,_Omkkq;(^UjPd@!7V#\l./']IdYoR`o@m<-K'Ma%XPDr*Fna*gM^fNZNLI(KDfgnu"hNZr;TC'N%#O!=Zkl$mU:W%AJ2)\:(-%^>4<iLpQPIR-Pac<:0Fb"9_=('o,7QfU=8%pVIOTfOX>lYg'Igq&iRif7la=!e*/)*UF0c;f#LI)V%P:-'J402@YnC;A[D)X@F00%J_eC<<]i&"W>Q/Z-O*Re5i@`5CBLHpId23B</eE$:Er(GIu&;LC]@(FIh\3)0X$9cKA#euC]Do@A%%7#Ch.9@d8-=sm#7M%jC$c&%#`c#^1-RLN$9#V_DQaa3+i3Wg@L(pgJHMuCe\<g+L'6$.8QrLWit:A`hDP^68=6E0KP&4]!S&ck23:6bIatom'0k-N9dPJ)&HV-C%9$1PtO1g;[IV$QV$B@2?ScI^ZLCC$9C))A??\PJB$)Zbm%_[Uc]_o)P(.."Dk)!#8RJ2([5s\[;:D=EGSi8?GYe^qd?ELC<H=<u>%qsthShjP`=LYfAY6FrB/Jb=uZH<!0D[_e*=Db9`_`_1XfQCrb/^";4+EKUZ9Sr4$EDH+Cr1Bdb4:%?$AgD\;7+L>E>dBg$In';7M%/9(^\m+]hKI/Bb[CY'*_DI@G8Qe.^$,5kI0gEi9i943"f^C"eSN]8&EqY%c=*St/Qig\nCVD@ds<!K>m3kjqD9&@$n$t-Orb6CU]%J-@UC"ALO=FAUXl7TP*e3afK>'bQg_1*(e3K^[_3*Lmjk+&%-)*m=4aM%8k7-M"<S8:o(:mkL3W@K#n'X&sio^$1.q31p;Ti4eW`%flGr[!,Qff%a*%C5s!dpe`Q\LVa?#VoBZjPil1sa$1E0Ufb,5Bei8i9GL_L#0T??i\_t;K`tA\L""'E%)GKom\JlI>#EPZ[)"jV<%!.31j!1(u^iHg`e0;L\lQ;d$?Sc>Y8Y^R7]_,U9KA8>'N2Cg[n>("k=bk)!iBsJ>pfW]g!I4r:']S*NDLK]@P2`<pQ(SI6!^fu;t%.PB)&\IPDp(e?TO?jR2TH><&e02X;%.nqNr_?+dTmf[!?33Q/^ASb_1$N'g>De]#XN8`8&Af`L#!BEn#N\?=kOa1\0r>mLe@I'UM%$I_"3U:aB8kk8"YNE(4IO\T9oGRBbH?l>tn(HMSqrusXKq[QTJ$R"U=K%[4-egi<(,+?aXJ$R_"5rI.BJT/]7@,#?]2#ituF0JeC%-Zlt?!DXj-`3-*^h"b4q')sd>luG`/#.G+bEY$fG_npR\FM@0;V+KB(9ab>8$i%H60-9K!"'$g7#$<O)-,Tfan]JHGgHiq$XSb#m%&f13;YsZn*mXk0onggqt"Z>U;8@E\J1A:7#?.W(R6"uQR%-H>ukn$UrBWsl.=St8^$gr]-10AZ.JgDm;^s)C1q%U'(;V-M=-RqCA%f5)$Q]a:M3e%c6$=9.qu?a)0?q[-.N%?NjVX?)0'#5R/WC/nZlJb0'KY\2PEp?:2G'Rp9B-s.q>;t8u+EKUPWO%V0Z!n^6X\a5W!%SA]KKNpE\TYZF-j[0i\O!EA+^OAWh<_c><0-ERAs;eQ+gTns+W*[6LBqfX'OL1@P[@E&JT.SMB@`m-#63drbi&[69*h\'u,&lZjY%[M'LnhXL8I:f.u`mbJ7+0MnFhrp[g5gsLq.PoLR`^lX/'Hn^r*Ku'eTBgFN!_Fd8)*7jht@STT(AmbU39NcS!5d=@Q+ZWrM"f`\F%U'J"Cr9E3)o=<#hXJsG<0$JU-?s1!j$k9C0s7oVieaL23_@=T5?nl8Qo<G^S.s@L4=qq;P@*VXUk0Rtg2T_]0QD^b'N6$tR&<P`Z%_$geAl)Y0Q5]EsM[24c`T`M5-,;:Q.YuQ"BL>[TAk\M#n4)9N"U@8k)L'Fk@0bnLJZk1EXG!W[bI&uUu5aol#BM&p^R'Aqn)B5#;%adpn*O,XF4Z/Nr(idt^a?`,.d\\Cg&Tg:4c1r,>\=NcR3)9g_U(?ru908#EG=Rojm4plT,AAbo%ZZmK-;HV+_+?'(%Ql?46\A<b7%)Sei!0rJfrS4%M.K,GQFQ7G.der2&l"W@[U6E.qVl,Fq`7MkF9&#b<fR5$H0$TeQ)?kD)\5/;!C!4-eVlqLk!9AstU,tJeulGVO1%iPG)T^pnHG_</Q`0YB,C%ArDT=P^5fTqTKt"O^HrLKCroT@!(k^FrbjG`6[SdaDM<)W#3R"B#5eCR;B(TV'<pQ<k%lrEnt\4!1N=%n/_\0`FRLL#;Y:T&!XTn<lPZEqCbW9?4#9XIB[_Q7pC#I4E\t$XMVi$l5*k*SN1"n1r/qo$Z@BO"IlOFoA=StiAP=WB,ubFhlU4i%/09TVSpED\/cdDQc3rt*Dt=*c)8hD@'8;-U_G3(.o)sab*s=9\WAdJ4._K.('P<jGK@pD[<]=Z^TJ1l!'5[QG"Y`ss5SXr]IQh+V%M^)P/U>f%d.ONAK%"N/GFtJa@DtWE!Kc.Ap@*3OrfqTkoqaH5(fNEH0At^2a7LSpJ$<jeA9A8sCP?9eC-7k*#.U,fV5%EWOA&0WG%BI2uhei30fM2KE@H94u4*8bilM\-0H47<=-D5'?]Q#eWLDA]^dMZTrXcqc%Ml7!pG!ecj@Wi49?=VkltYqW#1Y]`>&-7\Yt-O8s.%/5/njU7<BNAhoVXUX+X>1#khoI+\sO,r9SU>Hi=TA4G:BJZTS$g9FBQ95`CVT+=n@iApc%L!AR>.`&1,K?[ia_Ga@b-"CbIY//:'%L,j_B_NSm:@(dGPT2Tk:X13,@)1-.`[(pd,^9b$N%/60n#57b<XJ`#%+PmbLmaC5N>mY-VCM0gSX2)LaSRi#^I2W6M^q9hN>e!PA%F$.=']g3%>\mX>a@J::Q-fVRDA8OEA?uA1qFY<q[1cK1HCkTS4$Z9TT9*J6Al*_s[l\2b),IWVmB8pqcEZ9-4UOl^PHL+*1W,bOs%+i7WA"h/An?/RY"-Z8IWA?nR*\<(kOJc$:-N3u\Q]$L5CXpW"0[^lRSZN`,]K>=-F/:K]hqSg"?*C%c`0[h34pVD/#Z;?1^A_=g-%%.9l8BE`H.L&:7:D3dk?bI5&mc_T\3IE2?"nr\2F19f#)Ae4TGMQ_+eAX/A;KEe[OYQL(TO^4oP(=o$(=qW#4*eZNl$b;.!EY6O:%0]RYPcV\e=^"_o[3l/fcMBq"A5^&VfV:;u66j=cn!.t_K(,@[;.;$,L8`7PdE&fl_qX./R$YEpG,e9*D5e<_rO>_uNEoA2ZFp0\$%G8I+aRP\!IlhMG:,caDjfbMoDS5sK]C&Vm"`0WgoK'BBMQ0=^Ph2)Q?8QU)$nF+LNTYXZ8!_43s&8kYkIb7k^5WHHp3+sllJ+ptE%-($/*q7r6Df,Oa'Bu=@V&P+i(l,DB:TTOPHd?"qQ03EEu(=8>SB7b7R1e`>!'7J_P`0C4Z4Fc<h6"l?+%FkX5<EZDPqXD<0%:CP^%Hb2b)EjHWg$5=u#SONW&X[K)DhV$1^5^4)gV^_i3[TMPacDpGqKEeYegEX_<Wj6U7B.q?I!*``d?81]1ZJ(EU/kG_:=BV&D.0+lD%YP]?f]a(Q,m02[U`W?c8VBB89#.aQ>c[mV/O-2Y%$Cj2?6*C4oD$&n'aMOogG<prf+KaE`N*fLnnbsF[^_.SGnt)\?K.fat%\UF#%K+4T4mr7]P/Da`\3*8KLFcrOBlUf9]jcl\P^_.NpFg[96,qbR29]d'lX^Zq-(^Z2o/pN?fks`\rQInH&-u6"TQl;%Fs/`Gt94i(-%POY=7GeAqD3unj_X!7IKX+h]nf5_'iY_7`)Dr#t`=(>Y^/@Q@,7)OV^`Olei9;o+gm$:B'RM?Q>*"n4ggUZ;p+\uD`?@%5*V7nH1%&W;8K$dDGQ&nMYh.302/,.WcOJeDS:+q)#$:nSGH:3NNT4rmp0[r>DJR.L&UYFX5H$_UX\iS4kLXRQPc!^!/.c`_+>+i2PKfmH0K%X0<_rFDD"eM$`FZg4`+a>O/D965VF*)"eN\Lc.jVk&Vl9JL)^@@SRH[g,1e2;KPsD>uSD8=P&;Okh&ebcK!(n<?oB5l":L'I)@^b%4\We.,=3mX3<s0ZYkgG1-MR!<g9`o58e%.gC0'lRXg`KH<.W#4)9Bf*qZg4$l)]DcFs'\d"lZW,K&j')M-X0,F8X5j_,b(^rCCiC%8_>HXY5JWZHXmmD]gomO&KFH.4GFR?a=K13&!i%0kbG5s]>fOQdE(`p?a80^ammRWouJ\ebao6/OFT+II.#:eC'>mGlg>)db0U#h%0`).jUu_%=fat)d\a"+d9^HG!WWcm*2",*aMZ)H!@FSF>6>@4qElF?FHf9NT3N0Y`$d*'+AkZ#jotu)D5GdNNQC&5Y2'Ik&'HPkK%`o@[_+TVmHjPjS$hq>_L+.EuXR-B_#HSD"_'J6jMg<u0hBiARt)g4Q-7DI.9%P/4.p@\D!-?TGlQA#-='bVK!G9'@!EkCYpfa:AC%5fT(bFjiXPb/,$>pF%R9!EE5Y<+&XiKgWi8\aK?P^asAAhuAX>6eN+-KdA'2o]2L7g(d^Dr%HnB?WL;QTsYP?_.I5%cgPP@g*=4V%NmYdWP3S1cp%m<>&YZ0EHOAM)h,R5U=A)>\KfS*'B\nG+GF_j:R..1%P1Xa@$7p"WmKFm^4RcqB@.&E-.pbAG2_$(8o5pg[%J:GI%U<u5W,pYV50^B[dSTbaNSTFcd6/a8=/WfWC4\a?a]kqGtU>_%a#*<teWU%kk+%o9m&t6i>I3Y%crRWa:n%o\N+MY+k:+Jf0$;n!u%n(SQjpr@M!CoDhhR3`HdT\pC5gb?aHWij^"hIINU;*j*04?HC,W[mL_.XE&6h5J,3NBR_D7=l^iH"EWO"gl#<c;-RegJeiVh%Nnb%K!kc`TV^rK3VEk#VVRW4qiUe7Qr]Y*Q9u+6,pqE^Bj)IU?$4,o%j_OJR)&UOh!T&abh/On29d.X<(p[?8:*(Y!_N(<=XBZ.@%`H?%`o`a6pJ7%0.2RL[,/E;OX;@7H,/iNqhh&NV&MWU09FB",@f3t.K-_^<1X)'()l'op\ng@W?jR*<50lrVk$W7BIoW&XY(0nm<gH>R%hrsJOk,#+#aG9h>Kk8mjm?!N(q6/SZ<e;;:s)3kp^g7-ZHH;q5]A&m<?jB!Y:]'o)kZo"D,FAkC%1.=H=K)j6%/]^@5t2!jp7eDa%Hi:i_]#0L<!YI_J^D-X^,Yn":S98-i&HSu'>W0iPkUUJsGj6)k,(a]eI>u+no+$NfAVk+G&V7ZX;Dit^oG.(\h",p=L]CI-3ag^'%r=$n/]m`?Qg/d>rfpU^an^e<]Alu8H-GCm81(Du$dOl40"O+)X=&#2D_(8Dt[ooaZ:9W95/tLDU2Qd<K[J>dJ"O+A0oV0*A)V$W=%G>J`)"Z%jZ79%e(G3mhMcCui/L`=),(&Lup^udN&]N!b)>?S9L!EI]h_m`F2UOK%H0I$Z/;ou_('P5Wm<Q_c;5f?0k#35ibNYq$_%T7\"!L0aV/[9U)+kro7g)=.jVFrsE8Ek9>LV;7Mh&K,7?.gc`%5kTZ`Q*`id072j<j%?ZrK7q+Y-F]A'J.W[cKo6huej,2f.!@m<%7kt_qBWWce,-V+47gE@WbdOiKl'g-(3pVnQMWg(hci7O/#*=Ce[_M*?"S5i2);Mn8DC%'j7X.-&Z_*e3_nLTPWij9!9+"oc!XkJ6%mr^</K-&sMI"Btk)#s(n#0:t*W(iJ\K`k?)&*>-f?q,mE-JVnL*d8<=qPRu(%;'.DUU)kb@#foIo/#*_bs,A$<5nSu3r00mj=AJe%)mWZD:!98B1[jM8Bm-+'-")H3D=HR!!9T38Kmp%%)nLIP2EQ%U$02B#@E*d>,D1%;.[G-)Q;+]mXPO1<1@XL>63WH7<aaJ7Yg4:2%7j4\S"ADI;4+uqQ@5>3P6/-%_k3^ai8p>8,gp$/M#+?TZ<\6f7TW]1Jr'l.0>((4.N`5(`ABucJc%?iM-sH&(j(3Bf00@EIXo<9@%AAB!/WuY/$l3^b'ZfV3f\dAj&R\Z_cekfGpq5n@KYQP01a(\l4FNU>\(j`:^YQP/"PfKnGq\h'`db@C:;oWmeYK(`noDTo9TZt0o%4hq[H/EGu#_mCYkE9'^B&0"\\ir\W@+oK-GoJ6D^OMDJFaGi\V-p.h$$F#u*Z>Iu8#%/Miq&gMtOdZF.Fg@dZ!\%cn'#>Q"i#naj%9je88pHBXT)mUK0"Wdk:["9STi,ql<S5\n@R5KcGdCg80mWnZo^bdI[@A+Zj^_.CorPSk__d^TgTgf?=,V$#AHL%$$\E,e"X"MMs%TQ&e$SRgPH?(mb+<Hk?q@V==p:),E"e.oPnUe_RR6%Qc9W9:TFI-?tE8'M<tNV_J(TW0C:-"oX%=:3NFcNoc.TU*`5iiTYDObE@7%#ms`qb'5UM-I*Yi\S)X5%1:^8%/7TF<rsmt.p/MIPO[(&Z/;P_j#^/AoO(,lBCod5&/Yd$/gfZq]Obl`jANC"4WLOJYeV!M/@iP)%$XMYEA7)P47uthcN8MDZ$_"?UGm3%Ch5=s[N+Y)dH,>0q/hmJ/Zg-I*aBDK8g'J-mhD'p(r:^ksR@:erA6cp2VCW.k[$_"Hb&Cj0%G`08UZNI9RZ0856A&4*3:AN*Bl4)@*`'Oj&e=aSc%"8(JRC?pW%(Hk4B1CU0CgUYtWH3W56l''2qg1M>BQ+GsA76FcrUkQA,PTpg%B7mnpfSG*lW%>.qWXcJNWnYbVZmf[=2,k>n)V$fO0Oo`6EhbeQS.Z>Q=LtYd#Rq\$AJcZ=MoYt3V/k\OFGt8a*?CZ>!TD=1$2:;M%$_)hf*4e^KEi<!h9=dE#+))p[X,ce`P%h_@CN22_O+^mO5]"5hWdH#,@WB>T((i8<#N_37SRhuE?&KqAmQ=B`4U;P-A+`N"#)gH_%p7r!34E4"mY320Wn$U?uLnGFQ9JG?kVh!CZ#ii),d>s+?'J>4O>(OYBB3X<4iJ=LXL0K6A)k;jngDi1s*KEYrl?_k[YsG:nU(S;d%Ur1S>9$XQX'#n2#.nK+^=<*@N,igsorXkj?dIm0k6+QS(JR("c!])ambBA%r]>`c#s0bIB2miJ/j=U='!'[=:G/>L59&T7$@Nn34%RX:)4*-HTsPIeWAoD@>mUY-)<3=0maA2LEke'.ZlV-O[G]C\p%hjm1>d[f<HD;NPdS%["R:Fj-4%dqs,JDo@1hcXC8=S.%_e%!),%!YtuhR8F*__%ASTeSu"0E53W9caj0>#"RL(fIRCY3X?5,$c]jfb`6+:#j(+Hq9OK*\JlP'[2E-O0egu*0Q47aiM$4o[[@^=4UBsd%s)PpY#l'0C>X<4e0OF*kk!/@7&:s8RS(.dZFJP13R^N>4,d87l]tbCN*l'j9cib"/j=[VX#c!41A?A0?ee9FpqT]HrVV=t7!Addi%9VfI94B#lVE5_2NYTtrTM%pNuEBP%97YJ[V;D#^fdGj"qUo9q[Fha!bTif/8D>.+[ma^q8#LIh/b_RQM0M"">]n4rZBdam'oE/.u%N4VT'=eNc)rQdDq0HoKUPnZE$a82`M7DF:ZJd/bfdM"p7(i<7@HA_-*3l>mD$mPpYC%,[cdR,RJ_qIE"*P_&Vlh^:GAm3"RO)#fU%P+Wjeh(cB]e*a-N#IcP5SR=SN(`VuDJVbLaeEX5ARH,M@b6/*eKTPL`dMkJhnp$/RN?VsG_,[tU1Hr#jMI=2'Z8Y(e#[jd%K%_A*%'i"?,hrS.IoC#rq+a+B\!89U])9%O[3!iYTK8Nb(CMgO:%nFuSde9lV<Y3uf)$fG\^2&<<?H8>A$5u\s7D@*/^Bl=Uf-9osAXqWV%1,;-_$K.I)L7lfaqDK^4r4nkrd[]-6:4.hu`X-s_a)*3([+52JCO#`j@P"&[5VXJk%b/6@$VNBE$Wbe(j^=Tf@S?Tnm0*)QC?t`.%]9)bT(JV3=H8(sHPQe,m5=+<;[bK-,Po0WFV+/orB]ZNa/J1GsmgpXo=s`/%>r.!7%5Q2-9Q0lTO'**'m=ke(1H:B'<XXf&_a[dl%5IFldj=e@Hmfd`iM_W!$V-6]eO]V_\H\`j:+W%CXJ&[%q1i68X=(/ZeBu5=j,1cPR-g,KG(A.=\oY.YE'f=D?hViN?E5ajETD11M%&iA+F[#P)LBk[k5q<I2B^n";s6%'/-"Ec?Eao5JY:D.Cr]RTXE%miF`");jq'l+).6g+Gk#/pj_U"#U1=8/WKM)Bfj$98VFkDjif%;bMHf`@<57eN3AS:Io],!L-tgcqqX4J=;HCki1NJJZ%@G8:E1gV>FFA>)S`1o*Xo3L+/E$C`I81eK*7oO&6%.s4oPE[1[<03U@e?%-,qC`C_,%-M)3@]BP2%4jX8)]5f6-!-YT#YP!c';+#q_acP20R(FePo6\E'fa^SF(21J(dPaMCOho$CE9oSE?">.eXPi?m>DrQ_n%/$=2OE,%l!iKT8t5XlWH@@U!&@]SS:N9=HcSLDrjf`;ecYu5APICLEC*5ah/hL:i)b>aN@8pt%\lq(e+s"W^8"8,](:<5*T62;I2%g*n7qfUWotK1B`u.kj6n-^j:+#Lm)%8L@6p$delB).t;GI:S!9b8mcdC&qd-VR3_K39J+nO5)L=q-\O;3KYVUXe6V38%77g[N#8k%3<!Ba=Zu;.iak:!4<qi_-S&4m"8e/5_s&r.3QQ4HE"#ICk^D[$`3bsKa5[]"#r.1"],aS?-)TSLTGKnjpQ!@@C/Mo^"j%#@FO%Km%%DW7EiS48,TOph,kd`1P7)`Vg+mT*1pkml?i-c)U<Ic5%fsQ:&Pn@fPE^VJK7K:'X%d46'praAM"W1T;b%g<S[N=E=L)c2^13/6Q%L6lZt/$fc!j15A<Sb76_'j`$F<^$??:,mG/do0DcW8U:lcBn-nh]&)r:@S?!8U.M6UZ01i#s&KPWg7Zk[gVT'[B2^'-&eVQBheK?%?K$UnYg"8gi/;#ErG5XSm:pmNDtni--;9IF[f/P0$fKod%TR8)Eielm1Z@H#7U.GEjalBPYZW2N`/H<VcUe5"+h89&:6n-$7$gE]%eoPoiP`_Lkp=/t-NI^bh@:[]aoa7Z;>B-O+<LHD)nD\]!],l)E"\cqjpR.HpApATcC"F:fG&DkPeKXn&08]oq;%-i:J!^c<@i"ma%!ubX=k]YQm8%E"e^29H=4G&;)`l?QY4@/q6S0dpZbD2oT+i^3sQ%Msj@&P0+fisSt4G!h@Gb+4%JjppmZgM#Q15Z8=(h_ja[GntJ%;.k1pr)cNF','a8Ijkkq%=9b*nb(e%pV`FhBlQ9iF!OdHhs[Pb%BGsFp`@h8T\EE-"ci2;PAG*PEN3%]=L7$/Vo/Oc"rTlFrYPm]%2AcF+)A^6cJb>dg2'>Xj8qIq;P'dEOAJh<>,7URqOSCSfZ,dbJU't/K6ko6q53d$$M'3mNARX<Q3nm`64;N1&8u<0h&n`6po4u2(%qq2`>B_$@6b^q.d4AHlr_rU$[,;?^7eaH=2+O2\#Z92:nec.e$([Zil7oHc[>33@MdelkkX='BgSQCZISGQiJ%"q&>!a)d$5-W%k%1=L<7\*pFBfaRoYm7H1j:NoFp?-+QpL^<U2'/_rfBV9Xp?s>^c2GSesWiaJaCHVojAk[lF7SZW>/U'9B,7WT"BrAVJSRpN9@Cr2[%J75MEYTOVs7`tqcqlPrLKjd";of5F?TS?4&iMAI(B]f[ZO3spJ6Ac1B9,npu;J!fA:7(o@n!+m<0si;l4%>&aO-k;1a1$3rO!4I,%opnn]pe1-XNL+t8JSRnOV1DI\R,&c/KqN]@i%K/h\]7NV'tPGFXa@PorE"di1t;0k[prTQ''O;m],m_'a9h?^.s=g/?j1Z+nCbL\%\Mi#8T0Be)N?+fDJG8ti0VO4BdT-[=<>;/7DN?/PTqUNrn2Wda3E.@.Q4KlbfjP']O]ce3^md$^\Rn&3CB)=bkOP_O^j:nZ!I\9[%C(H%;lo3689XbIg'8B,_Z_=TTVnea%+R"kMp+]WF;SQ2hFm&u;I<s/O5.b>T&7"+9S_ai2rLTOSI@pDH@gD55mAoG.C(T1M7k`G9%Y_3omn6J7G?PFalUV:M*CKMp\4TB_s@=6Fn0KOT_+q]!8MO6J3W_#KS6a/%.M'^G0^TL[)q,W9?f,_c;LU2+/qH_bs[0X2Q%SM:d%lU`hJ0S9hNGlW'a`%ujjSVTVuRpcM9k<)(m@LuHHFT2r<'I4)CcYl"&T^1^Qs&)^O&r%:fX'UV_<=*nU^im.kFp0WkRM,K@%/.cb%m1B/m\1Ee$_ot:D(i(T7Cet.*$RhAr"7LTH)i-isrWaqCKJ&,q`Yl5c'gQMm`H/NKMYpn`!mTR#3'[fb7[fgsT[mNI6%)l(k7"1t%AkY=\T)1]gs+6(ad(5uQ",[eg3=i`U:i852C]fY$.aJX4('W?om,e<^BV:N$;Q-(&>lU8?,4?%8TXi3aW5&P)o_$g;el8HchYHZ-%JD*@Rf2'gFQp>`k=tW"C4Nd_?BVSr:NQ*R5OBUr;J6.HRRjs,C`]nb*"*Qp(*-%]T6I#0C7GnE2$8km"oa4BkZ#fa0PP49))?l\<%X<rA2o;^Xc!IP,mn)#*h5sroa."cTqhP`a.^!7185sro19E/@lN_qa#Z.+7@6'k[UpgkoC!KArqjgRhn!0&l1r_8aU^`D%*gW#]X%*me!kGV[Frd;P"smmjL)h\7OG2LpRD!7X$o[RFjNN*(/i.\)FQnW(1`KSoR/1t_`@V4Gf4-HC+ZTAY3SZPc#78Ed)=mcmtJ!spk>%[X8b,SM<)B;[1O/p5h&'[s*=aOk'CDUQl!Z*6.W#lUsZXAn5H"3,IInV$,Hc(:u!(SlcH-!=Tit0VtZSV;5g'&1F[^bY:n_*`!!M%[&#&sXsp`$D*GjnDI<ddjiDAIMJL@S-)HKhVU%ICM'[Nk0t@e".>MtP!k0R1".k1P,q-&J1:k(_D0H"DJbK<A@%2b=?F1a]PSsXC%NL=eg`A[t67BQs9D/JAAahXPg+?0'&'B'^;]?=:i'\rc#>ZEW-Gi@i8RFa*4]3\NhSk15)Q;Zfmf.G55([.`lR_tdlV$aqk/qj@a%D?+`V==@.QDZ_P9/`<DqC_bYn8*"-pA1RmtUZ`@B5rYWI;,*0Tm!KKJf6W"B)aI&8:9]J`<+/iJduX`jD?.$>#:Q-aO^uCC:*XIJ%\g]DXoKu'@!hi8LOMn1.d^QLigK*4LeIj=H/-Q's]VEQ(F0l)CKE8NI-Z0='.D;Qc7A-0J!4T@s"@Y7<Z=MkG#l2iZ'H)o,WjAm3%%CSB=]?I,ZTpa)#Kh6tk@$q3(PBI59k&!MW@Maiha*/kQ$Hc.5G,tM&T\'HfnWk7n4.*n;[#u5B"PWpbH-JjH:6jZ0W'RZtTP&&3%s1cWu$EQ]-^9CVXoh\0uPOB4Djoe"b<j!/4h=edOq'o?\*4,d)CB0oW/J8WE?!,4t7[6;>6d+`&cQa/c!+sWbd$5oW+gnSEc7)\2%ZgDP.["JV3m*dHC"P42""59DLT\Kj37cI-9Rg$%Yoq-b"4@;_R^3GQqH6N)_ni(IKRCup+6(rm'$>;l-^u-*`,M/A,bN3'imf[e)%N%.XNe(2EpWfZjn7Li7#>Cc-.4[BmO!UUdV0SkJY5I<cZ[JU&/!H`q26pjj[c'OJNY=1%IF\OQGAt*hYP<Ka2,JdQhh!1d$,3cA)%k1*C]$44ed%9BOH!9\u$Xb*qbE%Xr9.RZ,JSeL$WY_G"MTVj"?%&2-7Cu>722pOkm&U#cG1g,]LaN&Tg$qMiY/;5-Q_)+grbpT,u%KpW)!o?AY#omAY_:XB`Q**89BgfL%eKrBa-ZZk%*TfEIJ6L&'*,I,t^'6"JEX?\dG!R=2cJq^.X,Y@V`$:IZeaI)]cZ(N#jj)^DW%IR7"dc2?N($IQMbL:ho:R#&,2a:qN'c>s[L(;%DAC]NR"<E*Kk&dtSY8qFbiY#U/n[E89nN#Ct:g0()-WrQ3OH2)GW%=^qB,-<)i%_7\YNbM.qhe-+`)SJ5n%$Bn$P$)D+:)mgqhT^8]Z1Q,8-+o8heX.+JF8m"nVjd):$7QD\H1?uG7K1s))P62$>:eZ$"6hc847]5,P%^tg68ObJ:a#qDPNR/'UpTGhRM\S"u!DKLFc"CesTW.s%PQ^Q+(BY]'VYb>a8a+9F$WEJ`K!7&Z=VcI&tR[P<jSo6G@J;\28=p[ST%FQDL-5T5gA-(ph$$EHh(%J@ANT:j-3HBaq6#7S$aLK=#f&JdN[F3WQNaISpJ$qDaM+He1B=rkA5[8pg*)q&C5P_]Mt/,*5^`ASDc%]iiL3*m=h'!eY@@R4T1qOGb`[f'<tXa,"QY0fk:%.!$n(>PJP9a^g9"m[rDr,ViQd>Ta"TZCtL!q`09`$(nV!DLQcf<fmiFhRpAh%KO?<\bF353_:ObX9<U.S,'G4eJD9L=O>OPiL'Dk"=gV<s,,=8Td/lmaSoLdX+]]=)VlM#Hk&m>KHkF;[B?3i::rs./W*"jkehV<7%J4^RXVEfml<,`:?[!9j5d%=,L0["@fMfjY.6tCZt&L-;e**T\^COt$k+7,SQ$ohre7fN\!^fJr@#HOq!Lsc\9eH#H7;6N5-;`*^X%pZf;E%An]C1YC%W!(^[l,Q%ZKdi^P^Af=8Wn2;&3Y)@geBY^]J"I&Wr?jb-1V99]Q)hhO"]7W(o:0;5n0;;=UUQZs&/4f7:F<(lG%Ldi$qI1%9gi[,Dmns=9,)R_8.RGd5V2Kp_.1K4P?`U/"W.s=:THR5CqJJqHp55<@O7<'G(\%',@C%,:sN[6S.RMV?\2(BAN)SkK:%+&TKZQ4GVP$P<jF1I(X;M`j8#GOOnq0[Tmgq/]"b@L:7ok1YTpN6hi:8Iksf*T>tgM83jq;Hq&k%=5:U?m2+UF,[^ra\LhYQO*lB%#]pVC`FARG\qC,#49Oe.3+267IUmnP1X?%BNfrHk<W.Q)2oA`uM.^p^o;Ac(]aDtX$l'0?$t*\5W*&Oi!hFZch[r!"7S;D=C6.)g%9]Ho!FS5Dp1D%ON.u7e\L'TW`TZ_CYIdH$WV40Ws+WAYXiW1NuQUf3]XnVp#nq26dc'!)^&k2B6dPI;l,BNd7BpS,"(>-;iA7]*C%W1]S*)e&r=C6g=5"Z4a\@9E_(ibMo]X(PiEcr@>^2m5KWAncfhrh4)3-0Qb<U;aCU=.e_(HJF-eb*?\Yd]SF-8ot^a1tUY,[8,(R%6`)2;hCbu$YXO+(?fD6-b,AJheSIg_-o2FXLh]rq&S*SZC@!)d:lX>+YKT0aMUuC$<=<A1TcGlI<p,%rRS3ViBWe=9(2E3X2>)hb%:/KhC]PY%cTZO(.;.<Dj(V'r^b%1QI2YC8HL)V>D^W<c#AW%->&Pn9#VSm(D>IgL<\QG0Ma'>NjKWUP`7a&_D2Jq"\!L:=J^<4"t%P3+*\Q@oUB]<oZ'-fRUlgk0BCG;U+Uo2=d#/G/WF0W9`mjus<?]p:uR?O:HI5rIsJHm;JYX,%j-M,=RF<.bQUZniJ4%C4X7VUp-'%'d,n%RMT3U.$H5ORLU:9?NetOO?&=('t>[i%'Oi*+r`C7mlh[pQnSP!pL$t"pfdk%RHOiS=[=cq96;Z)Li)A%FsR2dITs`?Mtd*K%hWc>[Rad*hq2ot,E,GE9]%Mh"etP,hR;N%_3!:;=2QI:JN6-38@BLgdeYi1^J8=rK(FiSQ@fbBJ`Gj]u@#>T^@MU>Yb_M@==g6.3%ZGT8,PW+-GGQSe!6e!%!e)ZkW^(jN9O\k++QL'eO-MK+-AhfrnIDt.,SIqNH#=)'L()U;/cgI*ke&$Z/iNtIkJAF*re(.V$W[87D%`Hd?-5rSA&q3%(E=T_+Fc:rkHC@DP6G`EE9p;KJ']R>D&Acte53M9Cq`SE+Q^7/la$BG%S4c64hI@F=m%0cmj&lRRdi=iH86pcGj%28nK/.Rd`(Q97SR3LE8_$`,-t9.n#G[gNoYA=7sN26ToJ&mc3Ca&jL9_))arNs'%;V#]=cHV33^2;<5n&D6!LUU'BA7`@\nKC;'M%<1dRGIqN>Dg3_2jG3,-mVLCl-"RHnh!NPEf/jm<=O^J)mJ3D4hFTXL@psNA@:mhVTkA\fX"O#^oi.t;=K;M?)QpOTa?lA5+%tDi(%`ZJTV9!?cNc[[&g/ML:=^Z%.n&A^-6dmaP<EWjVB^/Pf@RGH`]!o;--\9S`3&VbOBT,nmP[>Q:o:Yc3nNZ]6d+R1^JSbB`kIK^+R%g".2R;,E,Qd:`SgIe[?Gd6tZO&sR!`n6CEH!f)VEhekZ,6r'W#'%i*UjU)S/2?iN1$'bl/["duD`4*]RK?hhtE/A+OPU:3[<Y3^_%d3r]&'8`;d6po==ntBA5StS`pW?(%[1@P@h-l=X_Afii)#,q)3?u"fN!<pg-:XDh+Xb@OM\3'AoOqBR(PC0<2m&H,3.;T1sU*2if%]Nerh-_f#(4[0d#1XYhfUB)cp!6cE-?k<e+Gk8i(p@rb5fe'1aRY?P%=f4'YJ8.V!Sh@SCd&+rXfKEs)Qo(iN]LucK!J>-SW9<"j%FC%6j1crt.3D;<O!pcGF;Y,dN>CQ9"dh$#mGqDP=3tOE]Hs.4'67S?2`*C]A6r!)U74u3q"L[Cb@ht9EjR5N.]NDsM1C$jSco"t1%V,tLHhsLVjlJ``KH7b2E]M>;1R`pqpfN*oGLm)nrB!\Q_j=rgg8l[VVZ8q4"QUone?q)kjpO^(J`="4:5)P#Ek[fQkk:'kY.]tec%`CfJadE<*L3Z:D:(fZ+in&TF]75A"SY*Ffn5rC[\:8#jt#ZS-b%iA8u0gcSR>W@Qojfe!>K8'8k%NbOlFQW^;5mT0C#$meceUXt'%!mH+$A=GkB39Q_GfW^Kt<BRkUR5iDIpuFIXJJ,>D;MN%V6:!G1R_/+m3'nukZC;H2WHa/kF1GSRgSu+7H48^;Pt[[Hc)UTL;TZ<3%e5C8ucO`)Xq/T7u.-e;9SW[K('dRt+Tp.#n-0+E>K>B?'j6s_ZfJIH=gR0QT[0f\)kZ9IF[7GQDAtBfuD[huU0s_W.re=&-aIsXV%K4`-u<H?.Be3-n`Ac]k+6sj(XQ0MJ/biS+s7@u,s+k4Y6TL?t=BW-*4_ndH5@]Ioq,C#N*$(u]W"\R:E5g.\dl(t5t<3o0dB-4rF%MQ,Bd+h>!+R2R7.n8,GPK;^2FcV\K$&8[(n#/r>tj'0aq'RQrp)pOF3<eUj&1(+2_dMWY@grJj6TE9!KNl]<D<@6Na@E0]k,QjF!%?pH`).>#ZA'e<pr1'pu^#I`,3Urk7-?>IE"(;M[s?"KtC8VG`Nf48V2+j-lBFU$JcP_m3$"NM9*7%*[#RQ>VYAcOtR;.'o3k*Ab"%"a0hXU<IJO&cpSqAa\4i<MaJm-BjClT2TJ>TulZQrYDJd1muB86EAob1mql2][*<Q&Xpq+6bNZ+Tuih%3!,A*eYYK.$uC9da[B%f%8g0i7@Vi_j,duIMQOS'e2X%0&A!j^]UJ4Q)_rfX4jT<&#IC10FW$.=4T=jUKs%oeY.$KKnmX><Ra_7=5jCFNQN0M<J&PHRW))+MV%#.;We:V/Zm6]['pVJ=DB<sc5tdU_>Fk/qe2D[i/Zl8Ea:6O/Wb],&uW;.TQl4aV]')RbpSiCcbM6CLSOGaJ=tCRBp_K5=sI-W!J=%30M\=if2BY*Mc-a1ua=*@^EQjVEH2,[r`'U<21IA/t1U.Ao-Gg#"D>M#-ZL\#MH=eX0+D.6mT&=*$qe,O89YsZYc6<MJKRTZQ03t%8MV!\ns/nNV")JRrDaF"R]E+fA\>t<b0(k!$KV6RU2kPHT#@T;;oUZMobG7nK[E^EZDk;A+/$]0mEPQkC<>0gJKp@<7gZV4/!E[b%J8uH9K9@u$^gJ+XWo=s@.7>W&f#-pa!_#$50agrg1)R&IF7bB[a[Xj@?Ao__bVk/L6#jY=eVIbW-;>?]Y$j(djhU's/&ro:WAr+:%3@>]K]<e;J:blQK.V)=GffEg"iajeu%2OflV0hureSU<^&K"2/.\^cC6)B`4[^e,i<$A-$!l0!a4$HV!i_Wi"!!^ng@=]lo#dZ5t%A+ASQWBs"Z03>MRWIh<)^<8s'i@caL].^EDR6n_afm*uC9XE>Rc(W*R707]^Hi="tBpcKlScD#iB)uX?8rgJ:%?5\%+@.lD8d9l<%0fEE9c/,Wu)79fN1?&@ZKiQ6YGP/Yo+D'%Vc!oAOAiMh8j[rZsR#OCWO0M*NO;0IJ7a5h"b;IMa^rFqP(ehgcRhq&*e=qu<2@X!V%<Xkp7HM]lQf[T8t?>90Hj!n0mdX-QE=1-FWFcft&$nAZXjYBB'!ZohEAI0u;[Qu`pWVP5B:k;)j2.`2j]:3L1<E#]9=!9ZK8%&S&%c,()qE\>$jh1LY@T/TI9lgXi@X-YP/pOqKfelfWce.Q';2J#(qraJ%,mY.;I3I'\r'Y&\ITCKj20aBCW-It3rRoS8(\a!4B!sZg0%)-TL][(P^=nMXL_d\7S<(5[/P:qe:3modt5X#9RK3m'9nTIF*JADE]ol@L?mDs1_VI5E?Z1@E&=d$o4.E/_qLEVBMa6I>,]4Ef20%>W@I5K%Oj,n$j:82g;nlc*UcN%D1.GNuQL)HpoY>L<_].G0C]"#c_4KfE@(?iYpoYkeSE:1Z^5cb>4>N<gfUCauFqi9W='oMW(p!%(P`!9f%[K*4Va>Z@8h*dk"@F\A)c\6#p-o;9s^=MOeB97p_LF?`reRHUT\8JQ8&@@)*ZG#g&f5J]T:Tq\-co1TXSo,!`1-ER-L1g%L\iPC!^Co('Sp;pK*htj75FWYV"][]%NlWS:S01!!;aVc+_;(4,+0d5Xcf(F/=83:-g,l>8-\qq5Mfcl40WOWf=SpTGX'-"_]mE]%)BKKYHN=f!?njD)ro/4F/Y.e&mQiQE<-V`O5Zs@\A2,1Siq<e.0Trm:KosD`R#uP`181WN1B[lG<uHH+o;Nj?3<\cZ07QAO"MPp+%mfsQI!04::0=&QIA$?,V#RVo9_*0-R3AT,uZ7/r)Up4kWoRO<Ua#>F>2.4iJTK!.BP<EinC1C91:f<?&Rh(pqX>>nH-F5ID=$1u,%E+VNoJEce/.$DESATPUmb?tX'Qf\uiX#ApNRZC>o.$eR&L!O\e_Q9ipj>jeTYY<LoeSTnY.r,biq[oK!+o@cjpP3/8<d'lM(+sC4%Q'!/19s#iE_l\lloK!KsbM^Ij/:5e;QW]`6^%p?.YRFp>`<!lYD!e^Xks71$$J7J1T&#@=:ik*FDBEaUq3$(bTM?Z>122F9P$keb%;+mGBmBBe4W@`<,E2/8)E(4Ta.b0F6VC>)^bD`)4^iB/2glernPC#eo9MEn\5kcLRDmerSfZ5[j,^Ulk6rg^AaE:!jAJDT>_uU]m%A]j+Z&T7:e_2i??eIJ7N#32^7jTC6AR3kTc+5'=FLd)EBFb3;tPu/TCE^_lQU)Gd2DEX"m"?.4`4-guiMJDk`\iH]eaK1?W&b#UA%DIeS1R$%Kc0InCJi9gfbTUPgoETRS6=kPR<o6Tak2=*_:`!*MN=e-uGT#KV+r0T-2DIpcU<q48/M'_msc-R[cZSH!/mhdHMaK(7_%kB;F8<Q:WZRLC7t@%+G]2Afb3rPjs;*]LVD7gReD=HpSV'$_*oK59O*>SE=Q(u%]M[9+862<oBArCD#5jV(6I1BJsj>a+KW&$.Z=%4+-,u#1LZ+2n$>KiD`9/QOb\P$8INP?+(uoE%5@BAg0MsoW[MeK_bhLN-NM8$!=Ej=sii&Y-odsKdK7h("Oh1ZuJ(L)B3):PS)>g%WC>2YQD"uIq%M>^YUX.[MR2]#_(s]eD(r'6`mk@:.MjWl4Jgf*XNL&.#t&Q<_(rnK%g%g!`*@cQ4r,h6@P4?A2/#M(16ms&Rs)`O%TgL[s*AQ1-!ptfS7W7+<a1je:jY:(jnTQYDr:0;AO7MkjbPLdjTk.3FHBij2q1m;1feC[@i.i8-EI<MtoAqq#miR%,r6o/$q>L-8%[uZX#'H)4434D(;OrDmbgpZ1bd(Y053T:,*:[3a+3]3V_LHrs^n&KQBXmV!lAFUSQ?J-Rh[*#Fp`!7\T-XZCrR`,`1hsJ(Vr_.s?%kpYK>i]3f:K+EppXldFS3$GtW"BXH?X'Xq6\%5Ig^-P7?-bOPQZl>2C$l+W3NTK$0QMVIn8=s)6]6ta0*22h-V:VO&0*)aj7p2cX%-bP\BJ6Yh$\a*0O?`u\B.No9@rqiUZ&W?+#R.R+]gtnbpF,(b4]KVq':^9QXM?WbgU;!Q4]nRq7riW`jaN-3>\-^LO/JKIG2gm(r%oP4&r4CSiuQ:R@@;XWpQP34SBE5)_@8?b54KUUGo)bpiN';4@,#$ET8,\MulcE(b8X"7hR5Au<(:-*k6c(_j+<ooP)-gb?l.q<VM%nteH[^H*NF'PRU9a-CWD\j=J_iBBrLM^[jJ,d["kl(G*`/Tf9/i2dh8MLOpsmEqc!k;L+#k/HWAeo54sfoiKPMa/K#'i[<-*QFj&%QYB&:^!nEC$\EhUgd*87`s&kk>.3e2D=N&):,&Bn'Vo4$4HG^(F47VQU@]d'R3A4ZaR4=,KV^bA/;j9><Na[:k-j4FVt01PZbIM-%TpC3,?9,b:`/Nn9/rd8IK&fj&M`";MbYLbhIOCr;F@#JHS1RLQd=3mHGnE;V=.;jdmP!YF7kEA7(XnqN.oR8=g.Y'#BT$0>rO=^1%)r+#B]^O2g>&?J[#*112o4G#/EfQ/#BoCgiT*7\#/G2.%rSr)SV3*dX$=:-_cVNJB8]@Wmb#A1QTE^euVi10.Ifl2C,uc-jbje\P%I\dSOVVOFOE5FnFf]P>pd4XTgmHk3rERgf]ZfilD:^J<1K\er]TMmXb=j?5OC#g0GV&p-*=8D/*Hr<B;EP[<7UF*:LbBcD@#fk*B%RiV<Wo0_D"m\%>O>?"22I/WmZLF71m(%OqAs1!XDEYpM'FpI+uXiCfb-W4_`\)U4RZ9dP3U"@@2lY"u_gVY:m2q,M!%^GFSn]N8(%^Le9AItg-qN$jF/C#>Mcf`g68)1G*O3;GD;+5Orc2.M<`fUf:7ZG<QAf5W&@APk\L/;uXUo/4.2f/4dSWU?>CB./+#M=IXnFj2Q.%G0MXY?8H.<R@AP/$mc7K^N$krb+,03\KA7M\am=D2s@hb(O3Q(2fSbTiag+N.a]tj^LfFo\n9)Ad\_ITc,DiM[qejXEVSd]i=2N<%*nOgXH9Z<9Q.%L\0%gEb/m3$UJ'=/U_Fa/*Q0@(21E5i_E<@ZD6A09$:sDb3hd=TKI\<_#LIhWa#-$%&p)7)P#]m@3f_.;F/Z'2d%DkW^oel9jV0qu8sjWI=to-gUKE"Y7rm81-X@OKG\CMKtA]Q3OE*YflB4XZ`nMtpsb>MnQ,,HF4Ijn=fdergbYs*1Is>c$KKO44G;%02;Q5Q!)AW[938ZMd@`$KTbZm*d<:24&l])m[r-!IU8a5+u[sp-38O</kZ;Y/lK9bMpdhR.@LqD(%=t^q<G.nPNAsNo0e"&;(87[%UgRbkMW2eM)e4;tAu#`^\:]PP^,ZKD?Cp*0fA?,:j3M@oqV;m\b.jIgG>.;dj8942/:poK;&P,+g*+@N7B!9JQfUY"fFl*(X%,Ol%53-XaaY$8BOmf4kBeJl$(,G([]mn*J>2sT8HOGf*+*0lhg[^K0/Ijg[VfIPnQWd];ceo\ipn]H[C6m+qar`$L\^e$ho[5lLIPD)j%]JoR$60e5D8g(j^b^-dd#OfsiQg;-_IC:AJH*l?8En$X/R3Issg@#Uk.0,;u#PEi@*E]2Ydm5kHr;Qu>#Yi!M@U"(1nP3lh2#2gD%OS&,XdOVf*Mlq)m,T+uAKV=LaUMXLM62(Yg&M#\Z">kprq-*&YP/D`kSE/SP`8#bMd[!T`B<8V6K@;4Lcs)$_]hlb?:4KOp#gb>7%[i89jg>JH*i*onGbnr`c[VEg/]QB4!k_/S+4%A+gbD_2PV:RRIea;@Fl*8^O*oar):Xm-CjCM7cp0P7,kI^;?P6'!0S3lcA^]&hJ%ZOdX^ORf8ua5;:9lc8kme"brsLuuH2Blg\0l138`4[DtMIu.h6s7`K7abi5<^5*5C7mhX;Tg#lo;.Y4Ag[2ef`Lthl=I.H5r7(o@%*T%q<H%$M:cf1[$VmEIp\&mf85G\1'HB2gOnad_"r8kT_+6LQ;_g,G2?`8Igq<RhukJ.#gf]RQ"J$[)N*f&QDqW:cLB+5-u8?Ret%\7)`RLY1s>D.7EjH,#uT]=2uN)0;r(pJ3oQD]<F73]@?ckO4Vp?So6_i--BKRMN+!iH5hPaVA4&[.=dW0\L]!>Yk_2f;s>mT-0,m%lPa3H/USBk5`SPl)^-p$?"Sr`Q$1aVhEB]mL0,`"qRBtp(A@>JM,)AS8,!3koRUQuHa\d$Y?Sl_lup_gif?hn)+8[97Z8#CAVhjB%?TG,Uo4=i5L$[20QmUDM4m(_oZ7T7N4,*q%ZDI"8hfsURKJaQd9ZFVO.#?/!5LbF6DR/Fo3RCE\Lq?s(@sB?:Fd,dgkHF.kiR%B[%h%6*C<mJhsCLM#`U*fgH+ofG%-GnphUDs+%;)4F>Oh(BEm)R00am5#>[A_%6qp`K,%/VPtc&k+1nO)04]j1oIoC.Hj%@`l:"d%S<%-SlA,^;nS(Q?P+95at]c0*Q%FF/WUDX?F3r3Z3cohQ;QV[jT(4'5/206W@<oH<ju0YF\Ao[u(dk$?c-4HSH)k-\2ujF]>c#M/T3p%\-pF!r0]<(r9!P;fDi)Ra)A`idta!6rUf3<^O3\@pWjqrrUfPc55s0gV_=*LJ,&fRT3a^1pYGR.If/`bJ"M5^o'Mc>5Q(<TQVT8!%r;$5^5gG_WiU>Y%p@l=Kr#b/Y37@~>%AI9_PrivateDataEnd