%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Japanese
%%Title: wave1.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Kazutoshi Ohta
%%CreationDate: 12/21/09
%%BoundingBox: 0 0 1446 849
%%HiResBoundingBox: 0 0 1445.6690 849
%%CropBox: 0 0 1445.6690 849
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.3%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.3 x483 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=400 GradRes=200 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-12-21T18:35:03+09:00</xap:CreateDate>
         <xap:ModifyDate>2009-12-21T19:07:31+09:00</xap:ModifyDate>
         <xap:MetadataDate>2009-12-21T19:07:31+09:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>152</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAmAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYqlfmjzDa+XdCvNZuoZZ7ayjM0yQhSwjQcnf42RQqKCzEt0HjirENf+red9b0uwstQv8A&#xA;SpNBms9WZo0jVXuLmCaW2il5Fmb00iPrRUFQ6/F4KvQ8VdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirHfzC0e41rybqekwWzXhvo1glgjlWCQxO6i&#xA;UxO4MfqLHyZFf4Gagb4ScVSjyF5b1zSLd73zBObjXNb1aa/u2cxs8cf1VoLaBmiVIyY4IUDcF48q&#xA;0r1KrOcVdirTsVRmClyASEFKmnYVIH3nFXzcPzu/M9/zG0Hy5F9XGjyX36Pvb2a3hjncJcw28r3C&#xA;pcTRpIsnJB6bKrlvhH2aKvTtC81ecLz8wWsZmhby7MLjg0VtdzRrLaBYjFHevb2cILvyfrN9ll22&#xA;OKom/wDOmvxea9Y0aAWfpWX6H+qs4kMhbUbpopImAYcm9GJ3DAAJUV5ANirO8VdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQt7/vTYf8AGdv+TEuKorFXYqkM1h51&#xA;kV0Oq6Z6TgqVOm3B+E7UJF+O2KsPi/JW2gktntX06zW0AW3gtLbU7aBQChP7mHVUiPNoUZ6r8ZAL&#xA;VOKp/ZeTtZsNVvNXspdCtdU1AAX17Do8qSzcTUeq63wLn54qrv5b8xyalHqkl1oj6nChihvm0eUz&#xA;pGa1RZTfcwp5HYHFUD5rsPzMbSwdMvLG9vklRoYYbe4sVqDuZpv0gT6XGoYBHPgtdwpTfyvbedok&#xA;5eY7uzlZh/vPao78W9p2EFV9jFX3xQn+KuxV2KuxV2KuxV2KuxV2KuxV2KuxVpw5X4CFao3YVFK7&#xA;7Ajtiqlwvaf3sdaf77brT/X8cVY35m8w+aNL8weW9PsdOjvbDWLqS1v7yqobfjbyzIVRpVZ/7rm3&#xA;+SrAfEy0VTbXbzUrDSbm6t2ikuVXjaxNGxDzyNwhQ0kB+J2VTTFWtBvNUvtLgnu2hW6UvDeJHG4T&#xA;1oJDFN6fJyePON+Na7U+lVHhL2grLHXv+7bwH+X41xVxS9oaSx17fu28D/l+NMVcVvKmksYH7NY2&#xA;NBU9fj8Kf5nZV3G8r/ex02/3W3Sor+34VxV3C8/37H0Ff3bdaCv7fz/Dw3Vdwvaf3sdaf77brT/X&#xA;8cVQt6t39Zsf3kf9+1P3bf75mp+38vx8dlUUFvKissdO/wC7bpX/AF/DFUq8yX2v2WnoNL+rT6rc&#xA;ypBZxTRuImagd+XGTkAI45D93gaqo3T7qe+0+2vYJY/RuokniJib7MiBlqPU98VRBS8oaSx17fu2&#xA;/wAr/L/1fuPjsq4reVNJY6dv3bdK/wCv4Yq4Led5Y+3+629q/t/634eG6ruF7T+9jrT/AH23Wn+v&#xA;44q7hef79j6Gn7tutDT9v5fj47Ku43lf72Om/wDutulTT9vwpirgt5UVljI/apGwqKjp8fhX/Mbq&#xA;uCXtBWWOvf8Adt4D/L8a4qkPmnXdW0kWxtmt3A53V+ZYpDwsLen1iROMgq6+qlK7dfoVT4reVNJY&#xA;wP2axsaCp6/H4U/zOyruN5X+9jpt/utulRX9vwriruF5/v2PoK/u260Ff2/n+Hhuq7he0/vY60/3&#xA;23Wn+v44q4redpY+/wDutven7f8Aq/j47KuC3lRWWOnf923Sv+v4YqujW4BHqujCm/FCu9B4s3ev&#xA;4eG6qpirsVdirH/M3/Ha8p/9tWX/ALpV9iqJ8zfHZ2kA2eW/suB2p+6uY52rX/JiOKu0AenPrFqu&#xA;0Vvfv6Q3/wCPiGK6f/krcPiqb4q7FXYq7FXYq7FULe/702H/ABnb/kxLiqKxVKdW/eazocI+3HPN&#xA;dHx4JbSQnb/WuF3xVrymOGhQ2w+xZSXFlFX/AH3aXElun/CxjFU3xV2KuxV2KuxV2KuxV2KpBq1j&#xA;HqmtS2LnjGNKuIJiATQX8iKCen/LM1PHFUx0K+kv9E0++kFJLu2hncClKyRhj0+eKo7FXYq7FXYq&#xA;7FXYq7FWhIh5AMDwNH3+yaA0Phsa4q2CCKjcHocVY3rtzb3Wp+T7i2lSeCTVJWjljYOjD9FX26st&#xA;QcVR2tf8dLQP+Y9/+oG6xVq2pF5rvkPwrdWdtLGP53ikmSVv9irRD7sVTfFXYq7FXYq7FXYqhb3/&#xA;AHpsP+M7f8mJcVRWKpTc1/xXp3h9Qvvl/fWmKtaGfT1HW7U/CEvFmhT/AIrnt4nLf7Kb1cVTfFXY&#xA;q7FXYq7FXYq7FXYqlNt/yleo/wDMBY/8nrvFWvK3w6U1t0+p3N1bInThHFcOsK0/4w8Ke2Kpvirs&#xA;VdirsVdirsVfFlxp2p6n5p8wtb6Pb6pbTy3gubiRdZ1WO2ZNUuRI0c1tKiuixXAkYsnF1SgQyEh1&#xA;Ur806X59k85+ZodW028vrS6v776i7FkVBK0EayRozhkWO2lgYKTQLxB+zsq+of8AEbX/AJX8u+W9&#xA;OSGx1nWNJtrq6sDK1sLPTxEn1gK4R2RqH0o6LyBq3RDiqTflfc20nkzyBbQPGw07WtQsWWNlcL6F&#xA;pqaxiq02aLg6mgqpDU3xV6TqP7zX9Hh6+n9ZuqdAPTjEPL6PrNKe+Krde0nU7uW3utKu0sr6FZbc&#xA;zSR+qBBcBfU4rUD1FeJHWu3w0OxxVQ0W0TR9ZuNJiZzZXFvHd2YldpG9RD6N1RmJNP7l28XdmO5x&#xA;VP8AFUPqF/bafZTXt0xWCBS7lQWY06BVUFmYnYACpO2Kr7O7t7y0gu7Z/Ut7mNZYZKEckdQymhod&#xA;we+KquKuxVC3v+9Nh/xnb/kxLiqKxVKV/eea5P8Al1sE69vrMz/Z+f1b4voxVR1jQL29v2ltrz6p&#xA;b3kKWuphQwmaGKRnQQSqy+kxEsiM3WjVUhlGKrvLqfU5b/RqkRWMoeyViSwtLheadf2UlEsaDsqA&#xA;YqnWKoLWNZ07R7I3uoSGK3VlUsqs5+I9eKBmooqzGmygk7DFUbirsVdirsVdiqU6TR9Z1yXaqTw2&#xA;9P8AUto5ak/89+mKoa88sy3Wo3HqXIGj3sqXV7ZgMsks0cSwhDIrD9yVjjYrSpK0JKsRiqJ8sSzH&#xA;S/qlxI0tzp8slnK7kmRhCxETyE9Xkh4SH/WxVNsVQWo6zp+nTWcN3IUkvpRBbgKzfE1AC3EHivJl&#xA;Xk23JlHUjFUbirsVdirsVdirsVY/5m/47XlP/tqy/wDdKvsVRVzT/FeneP1C++X99aYqm2KpPrZF&#xA;tqekaj9lVnayuJD0EV4tFHza5jgUYqnGKpR5i/ejTbMdbq/t6NStPqpN4fvFtTFXeVfh0gwj7Ftd&#xA;XlvEu3wxQ3UscS7fyxqoHtiqb4q7FULe/wC9Nh/xnb/kxLiqKxVKbYf87XqJp/x4WO/f++u8VTbF&#xA;UnnP1XzVbS/Zj1K1e2kY9DNat60CDwJjluG/2OKpxiqRa9ZwalqumaZcKGgMd5dSV7qsP1Qr3G63&#xA;x+7FUZ5aup7vy5pV1cHlPPZ28srbmrvErMd9+pxVMcVdirsVdiqVaLX9Ja9/zHJT/pBtcVTXFUns&#xA;aWvmbU7bot9HDfx16tIq/Vp+PsiRQV9298VTjFWIebVE11qdx0l0XSTd2x/4tkmM6HoT8MmmpirL&#xA;8VdirsVdirsVdirH/M3/AB2vKf8A21Zf+6VfYqij+881r3+q2DdOi/WZh1/1vq23yOKptiqG1HT7&#xA;fULKWzuAfTlA+JTR0ZSGR0P7LowDKexFcVSRNMj0XW9PuIp5p31N5bS/lncs0shjaeKZ6UReHoMi&#xA;qiqo50AoAMVR2o/vvMOj256Qi5vgfeJFt6fdeHFXaH8N9rkY2SO/HAb7c7S3lbr4u7HFUn1Z5j5i&#xA;fVUmcQ6RNY2QiDMqcrxyt1zA2K+lcwSb9Cg6b4qy7FULe/702H/Gdv8AkxLiqKxVKdM/ea7rM3X0&#xA;2t7bkf8AIi9biPYfWK/TiqbYqg9U0uHUYY0eSSCWCRZra5hKiSKRajkvIOu6sVIZSCCQcVSvTbGL&#xA;RvMH1G3Zza6hatccZHaQi4tZFSWVmckl5luE5f6le+Kopf33myTl/wAeNgnp/wDR5M3P/qDX/Pqq&#xA;7yttpBjH2Ybq9hjp2SG7ljQfQqjFUntJJh5mGreq7Q399caUkZZuCxW8FQeNeNVubSYLt/uw4qy7&#xA;FXYq7FUp8uDlBezUoJr+7oO/7qZoTX5mKuKptiqX6tosOpNBIbie0mg5qs9q4jkMcoAkiLUY8X4q&#xA;dqEEAggjFUJoUKafqWo6PFtaQiC7s46kiKK4DxmIciT/AHtu7/7Kg6Yq60t4r/UfMKz7qzRaew2P&#xA;7oWyzd6jrdt2xVFeWrmS68uaVcyGsk9nbyOf8p4lY+PjiqR+VpZ11KO5kkaRPMNtNqKhmJCCK4Bh&#xA;oCSKm2u4kNP99jFWAWfmHStX89zW1p5t1R7A2UHOS3mmiM+qS39VitreUFF+rwUWWNEpwcGSpHIK&#xA;vbMVWyiUxkRMqSfss6lgN+4BX9eKof09V/5aIP8AkQ//AFWxVINe8kfpvXNC1m6vOFzoE73FtHEk&#xA;iRyM8bJSZRN8YUtyXwPsSCqibaPU/wDFWoj6xBy+o2Nf3L9PWu/+LcVTb09V/wCWiD/kQ/8A1WxV&#xA;3p6r/wAtEH/Ih/8AqtiqUeao9Uj0Z7s3EHGxlgvHb0XBEdtMkspB9U/7qRh79MVcsepzebHBuIOV&#xA;jYLxPoP0vZm5f7t/5ch3xVuyi1SPzJqkKzwASQWl0x9BqF39aE7er/Lbrv8A0xVALp+r6povmP0L&#xA;iAyalNdxRAxMKSQRiyBB9b4fjtq/PfFUxn117fyzJ5jnu4U02GyOoyv6DkrAsXrMaet2QYqx3RvO&#xA;ms6prukaVqEFtp97fWa6zYxoWuOVs8bo6yfFFxkjaRAwXkvxbMcVZt6eq/8ALRB/yIf/AKrYqk+i&#xA;Lqp1PzAPrEPw36DeB/8AlgtTt+998VTj09V/5aIP+RD/APVbFXenqv8Ay0Qf8iH/AOq2KpRrsepw&#xA;3OkXjXEISC9WOVhC/wBm5ie3RT+93BmljxV2lx6nNrmtXBuIPUhkgsv7hvsRQLcL0l/mu264q3oM&#xA;eqJLq1qtxCFtr6Sn7lyD9Yjjump+9/muDiqUCPUx5Ig1M3EIQSx61ITC/JI3uhfTU/edo2ZafRXv&#xA;irLfT1X/AJaIP+RD/wDVbFXenqv/AC0Qf8iH/wCq2Ku9PVf+WiD/AJEP/wBVsVSjysmqNpkxE8C/&#xA;6fqQp6Ddr+cV2l79cVTf09V/5aIP+RD/APVbFXenqv8Ay0Qf8iH/AOq2KpReR6nB5m02Y3EKrcwX&#xA;NpyEL0aUGOeNSPV7JFKRv44q35cj1SSC+ujcQiS4v7r1KwP/AMe8ptV/3b/JbriqCsLrVtP8lXE6&#xA;Twt+iYbuFB6LGosGkiUA+p/xT3HzxVdc6ZqGk2vlxFuYRBps0NoziF/sSwNaxg/vRUGV48VVfLGk&#xA;edLPWtYuda1iG80i6mZ9K0xITztk23+sMQxDmp9MqeFaK1BirJsVQ+oHUBZyHTlha9AHorcFliJq&#xA;KhmQMw2r0BxVbpWoR6jpttfRo0a3EauYnpzjYj4o3p0ZGqrDxGKorFUqsqv5k1SToEgtIKePAzSc&#xA;v+S1PoxVNcVdiqje2cF7Zz2dwOUFzG8Mq9KpIpVh9xxVKfK1nrEaXF3rShdQm9GEkMGrHbxKlRx2&#xA;AeYyyKOvFhWhqAqrbQ+bPe+sPb/jym+//j9/2u6rvKnx6Ba3P/Ld6l8B4C8la5p36erirFfNOl+Y&#xA;W8ia/wCW47RfqBsr+3F6XG9lOkixRW0ScnMkML8f3gUEoAK8qqqhPLflzWn83eXNfv7YWUWmaKNF&#xA;jUSxTCeWVfVlljaMn90otl4FqMeR+FabqvS8VSXy5V7jW5z1m1F9+x9GGGDbYdPSoeu9fkFU6xV2&#xA;Kpf5gsZ73R7mC24/XAoms+ZoouYGEsBY7/CJUWvtiqn5dtbuGwklvIvRvLy4muZoiysyCSQ+kjMh&#xA;ZSyQhEPEkbbE9cVQE982lzeaJgOTwwpqijqaG2MIH32RxVM7XRraPy/Dosqh7VLRbKRezRiMREdu&#xA;oxVKLfV/M9jBa/pSxjFpbmC0vrxpgZZpJHEP1mKNOSrDyKufUYNxJ2HD41WT4q7FUl8m/F5dtpqH&#xA;/SXnuuRBBb6xO83OhC/b58unfFU6xV2KpV5it717W3urCE3F7p9xHcw24ZVMi7xTIC5VOTQSyBeR&#xA;A5U3xVX0Gwl0/RrKzmYPcQwotxIvR5qVlff+ZyTirH7oAeXNX0t/926k9jMT/Jql0jd6/wC673/a&#xA;7Kp/rthLfaTcW8BVbriJLR2rxW4iYSQs1K7LKik4qp6Xd69czvJe2EdhZlaRRNKJLnmKVLiMNEFN&#xA;Wpxc9Af2uKqpnirsVSfy+PQuNW0/otvevNCOhMd4Bcs3y9aWVR8sVTjFUp0Yf7k9eJG/16MA96Cx&#xA;tj+snFU2xV2KuxV2KsZ85ag+kPaavH8UqQ3lpGh6FpIDcp16s0lmqL7tTFU90yxjsNNtLGM1jtIY&#xA;4EPSqxqFH6sVROKsc8vD0tL0uy6fo26nsFHQ+napPDESOxaJFb6cVZHiqR+UKfU78+Op6hUgD/lq&#xA;kHh/X+GKp5irsVdirsVYh5scRao9kSP+dhtYbHjuTwiu1jm4jx9G/ZvkpOwFcVZfiqF1bT49R0q8&#xA;0+Q8UvIJIGYdQJEK1HyriqzQ799Q0axvpFCS3MEcssY/ZdlBdf8AYtUYqjcVSPyKB/g7R6f8ssfU&#xA;AH7PgAv6sVTzFXYq7FXYqxC7anmptIry+u31rqcoHUQx2zqp27LPp8dT/lDFWX4q7FXYq7FUh1mD&#xA;XLbUmv8ARrdLia8thZy+oyqkUkcha3mcFlJjT1pfUCVY/CAO+KojQpr5Jr7Tb65a7nspEMVzIsay&#xA;SwTRqyu6xLGg/eCRBRRsvjirtCHK61malBNfnb/jFbww7/P0q4qm2KuxV2KuxVbLDFKoWVFkVWVw&#xA;GAIDIQytv3BFRiq7FXYqxPV7PX4ddWLTVEdtq1zHNJqVY2NtIlq8M/7tz8TNDFH6XwsoepfYUZVO&#xA;vL93cz2DR3b+peWc0trcSEBWcxORHIyqAoaWLhIQu3xbYqhfJxD6VJMDX6zcz3NRSn+kP63w0J2/&#xA;ebe334qnmKuxV2KuxVa8MTujuis8RLRMQCVYgqSpPQ8WIxVdirsVYwNM8yIbjSbGZtPs2uZ7uPWE&#xA;9GWQJcMZvRSKUOOQnkYEslPTAAPI1VVH22tSS+UxrEwWGdbNp7hBUrHNHGTKm+/wOpH0Yqq+WrX6&#xA;poNla0I+rx+lRiCR6ZK0NCelP9rFUzxV2KuxV2KrTDEZVmKKZVUoslByCsQWUHrQlRX5YquxV2Ku&#xA;xV2KuxVKNoPNw7nUNP38R9Rm/j9e/DFW/LH/ABzZ/e/1Gu1P+P6bFU2xV2KuxV2KuxV2KuxVC3v+&#xA;9Nh/xnb/AJMS4qgtM/c6/rVsdzM1tfBqbUli+rcfoNmT9OKqXkok+WdNBJNLS1FD2/0WI06kfdT+&#xA;JVTzFXYq7FXYq7FXYq7FXYqxK7/d+UPNdmft2p1IMdhX60jXi9P8m5AxVk9oSYmJNf3koqanpIwp&#xA;uW6f506YqrYq7FXYq7FXYq7FXYq7FXYq7FUo1c+jrOiXC7NJNNZyE1p6ctu8v4yW0eKt+Uvi8tad&#xA;OftXUK3b9/juf37771+KQ798VTbFXYq7FXYq7FXYq7FULe/702H/ABnb/kxLiqQeZ7ptPvL65h/v&#xA;Z9EvJGJrStgVaLeo/wCWt8VT7TbZLWFraP8Au4OEce1PhSJFHYDt2xVF4q7FXYq7FXYq7FXYq7FW&#xA;JawPSvdXtFH7u8n0i4lNKb3VytlIK7/7rtRirJ7SvpNX/fkvUEf7sbxAxVWxV2KuxV2KuxV2KuxV&#xA;2KuxV2KoDXdITV9NksjPJaszJJHcw8RJG8Th1ZeQYdVodumKou3t4ba3it4EEcEKLHFGOiooooHy&#xA;AxVUxV2KuxV2KuxV2KuxVC3v+9Nh/wAZ2/5MS4qhtd0C21lLRZ5ZIhazrMRHxHqJxKvDJyDVjkVv&#xA;iA9sVRsH97c9P7wdAP8Afaddh/H59gqrYq7FXYq7FXYq7FXYq7FUr1Dy/bXus6fqjyyI9hz/AHC0&#xA;9ObmBw9UEEn02HJKHY4qjrT+6boP3kvQAf7sbwC/59z1xVWxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxVC3v+9Nh/xnb/kxLiqKxVh2o+S9U1Dzj+nrbzPqGnQ28b2zaXbi2eDk6RkS&#xA;qs0cqrJtQsyseJoOI6qpj/hnWv8AqbNV/wCRWlf9kOKu/wAM61/1Nmq/8itK/wCyHFWKfmVq+peR&#xA;/Lw1y58y6vcwLMkckSw6dUhgfhV006RUc0+D1OKM3wl1LDFWI6D+bN1qvlfzNr41vVUi8vw3Fyit&#xA;P5eKzKkkyW8LGG3uGSWVbYndOP8AKWFCVU8/LXzV5g85Xuo2tzrGo6TJYpE8Kevo9zJOHr6jKi6b&#xA;HRI/gBap3am3dVlNpb6tP5h1DQ5PM+rw3VlDBdRsY9JKzW9wXQOn+g9VkidWXtsf2hiqaf4Z1r/q&#xA;bNV/5FaV/wBkOKu/wzrX/U2ar/yK0r/shxVB6z5K1zUdIvbBPOGqwvdwSQrMYtNPAyKVD/u7SGT4&#xA;Sa/C6nwYHfFU48r6bLpmhWuny30+pSWvOJ7+6ZGnlKyMOcjIFUt47V8d8VTTFXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FULe/702H/Gdv8AkxLiqKxVZGjK8pJqHYMOuw4he5Ph2piq&#xA;/FXYqxL8zPIcnnbQI9ITUTpqrN6ksnptMskbQyRNG0aywV/veasSeLKGAqBiqQN+SxbTdX0s67IN&#xA;P10q2ox/VLZnj2KvHZu4f6vCqNxhjo3pbkVJxVOvJn5Z6b5S1m/1DTbppItRjAuIZoLYSCVSu8c8&#xA;McLJFsSIAPTUk8Ao+HFUysvJen2vmT/EYubibVXW4hnmkZT6kFw6OkBAUARwekvpBaU+ImrOxKrI&#xA;MVdirsVWQoyIQTUlnbavRmLDqT4/0xVfirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;diqHuoneezZRURzFnPgDFItfvYYqiMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;f//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:0D5C98A1F0EFDE11967EA2303830C27F</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:362B7B6BF6EFDE11967EA2303830C27F</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:0C5C98A1F0EFDE11967EA2303830C27F</stRef:instanceID>
            <stRef:documentID>uuid:0B5C98A1F0EFDE11967EA2303830C27F</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>475.544444</stDim:w>
            <stDim:h>299.508333</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>HiraMinPro-W3</stFnt:fontName>
                  <stFnt:fontFamily>ヒラギノ明朝 Pro</stFnt:fontFamily>
                  <stFnt:fontFace>W3</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>7.11</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>ヒラギノ明朝 Pro W3.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>初期設定のスウォッチグループ</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -849 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 849 li
1445.67 849 li
1445.67 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
79.3701 849 mo
1427.37 849 li
1427.37 0 li
79.3701 0 li
79.3701 849 li
cp
clp
1427.37 424.5 mo
1407.2 414.416 li
1413.25 424.5 li
1407.2 434.585 li
1427.37 424.5 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
2 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
79.3701 424.5 mo
1427.37 424.5 li
@
grestore
gsave
79.3701 849 mo
1427.37 849 li
1427.37 0 li
79.3701 0 li
79.3701 849 li
cp
clp
576.002 0 mo
566.019 19.9663 li
576.002 13.9766 li
585.985 19.9663 li
576.002 0 li
cp
false sop
0 0 0 rgb
f
2 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
576.002 849 mo
576.002 0 li
@
grestore
gsave
79.3701 699.085 mo
1427.37 699.085 li
1427.37 149.917 li
79.3701 149.917 li
79.3701 699.085 li
cp
clp
3 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
79.3701 475.809 mo
79.6992 475.545 li
80.0283 475.294 li
80.3574 475.055 li
80.6865 474.831 li
81.0156 474.622 li
81.3447 474.429 li
81.6738 474.254 li
82.0029 474.097 li
82.332 473.959 li
82.6611 473.841 li
82.9902 473.744 li
83.3193 473.67 li
83.6484 473.618 li
83.9775 473.59 li
84.3066 473.586 li
84.6357 473.607 li
84.9648 473.654 li
85.2939 473.728 li
85.623 473.829 li
85.9521 473.957 li
86.2813 474.114 li
86.6104 474.3 li
86.9395 474.515 li
87.2686 474.759 li
87.5977 475.033 li
87.9268 475.339 li
88.2559 475.675 li
88.585 476.041 li
88.9141 476.439 li
89.2432 476.869 li
89.5723 477.331 li
89.9014 477.823 li
90.2305 478.349 li
90.5596 478.904 li
90.8887 479.493 li
91.2178 480.113 li
91.5469 480.765 li
91.876 481.447 li
92.2051 482.161 li
92.5342 482.906 li
92.8633 483.683 li
93.1924 484.488 li
93.5215 485.325 li
93.8506 486.19 li
94.1797 487.085 li
94.5088 488.009 li
94.8379 488.961 li
95.167 489.94 li
95.4961 490.946 li
95.8252 491.979 li
96.1543 493.037 li
96.4834 494.121 li
96.8125 495.229 li
97.1416 496.359 li
97.4707 497.514 li
97.7998 498.689 li
98.1289 499.886 li
98.458 501.103 li
98.7871 502.338 li
99.1162 503.592 li
99.4453 504.863 li
99.7744 506.151 li
99.939 506.801 li
100.104 507.454 li
100.268 508.11 li
100.433 508.771 li
100.597 509.435 li
100.762 510.101 li
100.926 510.771 li
101.091 511.443 li
101.255 512.118 li
101.42 512.796 li
101.584 513.477 li
101.749 514.159 li
101.914 514.844 li
102.078 515.53 li
102.243 516.219 li
102.407 516.909 li
102.572 517.602 li
102.736 518.295 li
102.901 518.989 li
103.065 519.686 li
103.23 520.383 li
103.395 521.08 li
103.559 521.779 li
103.724 522.479 li
103.888 523.178 li
104.053 523.878 li
104.217 524.577 li
104.382 525.277 li
104.546 525.978 li
104.711 526.677 li
104.875 527.375 li
105.04 528.074 li
105.205 528.771 li
105.369 529.468 li
105.534 530.163 li
105.698 530.857 li
105.863 531.551 li
106.027 532.242 li
106.192 532.932 li
106.356 533.62 li
106.521 534.306 li
106.686 534.99 li
106.85 535.672 li
107.015 536.351 li
107.179 537.027 li
107.344 537.701 li
107.508 538.373 li
107.673 539.041 li
107.837 539.706 li
108.002 540.368 li
108.167 541.026 li
108.331 541.682 li
108.496 542.332 li
108.66 542.979 li
108.989 544.263 li
109.318 545.528 li
109.647 546.776 li
109.977 548.006 li
110.306 549.215 li
110.635 550.403 li
110.964 551.569 li
111.293 552.713 li
111.622 553.832 li
111.951 554.927 li
112.28 555.996 li
112.609 557.039 li
112.938 558.055 li
113.268 559.043 li
113.597 560.002 li
113.926 560.933 li
114.255 561.833 li
114.584 562.702 li
114.913 563.541 li
115.242 564.348 li
115.571 565.122 li
115.9 565.864 li
116.229 566.573 li
116.559 567.249 li
116.888 567.891 li
117.217 568.499 li
117.546 569.072 li
117.875 569.611 li
118.204 570.116 li
118.533 570.586 li
118.862 571.021 li
119.191 571.422 li
119.521 571.787 li
119.85 572.118 li
120.179 572.414 li
120.508 572.676 li
120.837 572.904 li
121.166 573.098 li
121.495 573.258 li
121.824 573.385 li
122.153 573.479 li
122.482 573.54 li
122.812 573.569 li
123.141 573.567 li
123.47 573.535 li
123.799 573.472 li
124.128 573.379 li
124.457 573.258 li
124.786 573.107 li
125.115 572.931 li
125.444 572.727 li
125.773 572.497 li
126.103 572.243 li
126.432 571.965 li
126.761 571.663 li
127.09 571.341 li
127.419 570.996 li
127.748 570.633 li
128.077 570.25 li
128.406 569.851 li
128.735 569.434 li
129.064 569.002 li
129.394 568.557 li
129.723 568.098 li
130.052 567.628 li
130.381 567.148 li
130.71 566.659 li
131.039 566.162 li
131.368 565.66 li
131.697 565.152 li
132.026 564.641 li
132.355 564.128 li
132.685 563.613 li
133.014 563.101 li
133.343 562.59 li
133.672 562.082 li
134.001 561.58 li
134.33 561.084 li
134.659 560.596 li
134.988 560.117 li
135.317 559.648 li
135.646 559.193 li
135.976 558.751 li
136.305 558.323 li
136.634 557.913 li
136.963 557.52 li
137.292 557.146 li
137.621 556.793 li
137.95 556.462 li
138.279 556.153 li
138.608 555.87 li
138.938 555.613 li
139.267 555.383 li
139.596 555.181 li
139.925 555.009 li
140.254 554.867 li
140.583 554.758 li
140.912 554.682 li
141.241 554.64 li
141.57 554.633 li
141.899 554.662 li
142.229 554.729 li
142.558 554.834 li
142.887 554.979 li
143.216 555.163 li
143.545 555.388 li
143.874 555.654 li
144.203 555.964 li
144.532 556.316 li
144.861 556.712 li
145.19 557.152 li
145.52 557.637 li
145.849 558.167 li
146.178 558.743 li
146.507 559.365 li
146.836 560.034 li
147.165 560.75 li
147.494 561.512 li
147.823 562.321 li
148.152 563.179 li
148.481 564.082 li
148.811 565.033 li
149.14 566.032 li
149.469 567.077 li
149.798 568.17 li
150.127 569.309 li
150.456 570.494 li
150.785 571.725 li
151.114 573.001 li
151.279 573.656 li
151.443 574.323 li
151.608 575 li
151.772 575.689 li
151.937 576.389 li
152.102 577.099 li
152.266 577.82 li
152.431 578.552 li
152.595 579.294 li
152.76 580.047 li
152.924 580.811 li
153.089 581.584 li
153.253 582.368 li
153.418 583.162 li
153.583 583.966 li
153.747 584.779 li
153.912 585.603 li
154.076 586.436 li
154.241 587.278 li
154.405 588.13 li
154.57 588.991 li
154.734 589.86 li
154.899 590.739 li
155.063 591.627 li
155.228 592.523 li
155.393 593.428 li
155.557 594.341 li
155.722 595.262 li
155.886 596.191 li
156.051 597.128 li
156.215 598.072 li
156.38 599.024 li
156.544 599.983 li
156.709 600.949 li
156.874 601.922 li
157.038 602.901 li
157.203 603.888 li
157.367 604.881 li
157.532 605.879 li
157.696 606.884 li
157.861 607.894 li
158.025 608.909 li
158.19 609.93 li
158.354 610.956 li
158.519 611.987 li
158.684 613.022 li
158.848 614.063 li
159.013 615.106 li
159.177 616.154 li
159.342 617.206 li
159.506 618.261 li
159.671 619.319 li
159.835 620.381 li
160 621.445 li
160.165 622.512 li
160.329 623.581 li
160.494 624.652 li
160.658 625.725 li
160.823 626.799 li
160.987 627.875 li
161.152 628.951 li
161.316 630.028 li
161.481 631.106 li
161.646 632.185 li
161.81 633.263 li
161.975 634.341 li
162.139 635.418 li
162.304 636.495 li
162.468 637.57 li
162.633 638.644 li
162.797 639.717 li
162.962 640.787 li
163.126 641.855 li
163.291 642.921 li
163.456 643.984 li
163.62 645.044 li
163.785 646.101 li
163.949 647.153 li
164.114 648.203 li
164.278 649.248 li
164.443 650.288 li
164.607 651.324 li
164.772 652.354 li
164.937 653.38 li
165.101 654.4 li
165.266 655.414 li
165.43 656.422 li
165.595 657.423 li
165.759 658.418 li
165.924 659.405 li
166.088 660.385 li
166.253 661.357 li
166.417 662.322 li
166.582 663.278 li
166.747 664.226 li
166.911 665.165 li
167.076 666.095 li
167.24 667.016 li
167.405 667.926 li
167.569 668.827 li
167.734 669.717 li
167.898 670.597 li
168.063 671.466 li
168.228 672.324 li
168.392 673.171 li
168.557 674.006 li
168.721 674.828 li
168.886 675.639 li
169.05 676.437 li
169.215 677.222 li
169.379 677.994 li
169.544 678.752 li
169.708 679.497 li
169.873 680.229 li
170.038 680.944 li
170.202 681.646 li
170.367 682.334 li
170.531 683.006 li
170.696 683.663 li
170.86 684.305 li
171.189 685.539 li
171.519 686.708 li
171.848 687.81 li
172.177 688.841 li
172.506 689.801 li
172.835 690.687 li
173.164 691.496 li
173.493 692.229 li
173.822 692.883 li
174.151 693.454 li
174.48 693.943 li
174.81 694.348 li
175.139 694.665 li
175.468 694.896 li
175.797 695.035 li
176.126 695.085 li
176.455 695.042 li
176.784 694.904 li
177.113 694.673 li
177.442 694.344 li
177.771 693.918 li
178.101 693.394 li
178.43 692.769 li
178.759 692.044 li
179.088 691.217 li
179.417 690.287 li
179.746 689.255 li
180.075 688.118 li
180.404 686.877 li
180.569 686.217 li
180.733 685.531 li
180.898 684.818 li
181.063 684.079 li
181.227 683.313 li
181.392 682.521 li
181.556 681.702 li
181.721 680.857 li
181.885 679.985 li
182.05 679.086 li
182.214 678.161 li
182.379 677.209 li
182.543 676.229 li
182.708 675.225 li
182.873 674.192 li
183.037 673.133 li
183.202 672.047 li
183.366 670.935 li
183.531 669.796 li
183.695 668.63 li
183.86 667.438 li
184.024 666.219 li
184.189 664.974 li
184.354 663.702 li
184.518 662.403 li
184.683 661.079 li
184.847 659.728 li
185.012 658.351 li
185.176 656.947 li
185.341 655.518 li
185.505 654.062 li
185.67 652.58 li
185.834 651.073 li
185.999 649.54 li
186.164 647.981 li
186.328 646.396 li
186.493 644.787 li
186.657 643.151 li
186.822 641.491 li
186.986 639.806 li
187.151 638.096 li
187.315 636.36 li
187.48 634.601 li
187.645 632.816 li
187.809 631.008 li
187.974 629.175 li
188.138 627.317 li
188.303 625.437 li
188.467 623.531 li
188.632 621.604 li
188.796 619.651 li
188.961 617.677 li
189.125 615.679 li
189.29 613.658 li
189.455 611.614 li
189.619 609.549 li
189.784 607.461 li
189.948 605.351 li
190.113 603.219 li
190.277 601.065 li
190.442 598.891 li
190.606 596.694 li
190.771 594.478 li
190.936 592.239 li
191.1 589.981 li
191.265 587.703 li
191.429 585.404 li
191.594 583.086 li
191.758 580.749 li
191.923 578.392 li
192.087 576.017 li
192.252 573.622 li
192.417 571.209 li
192.581 568.778 li
192.746 566.329 li
192.91 563.862 li
193.075 561.379 li
193.239 558.878 li
193.404 556.36 li
193.568 553.827 li
193.733 551.276 li
193.897 548.711 li
194.062 546.129 li
194.227 543.533 li
194.391 540.921 li
194.556 538.295 li
194.72 535.654 li
194.885 533 li
195.049 530.332 li
195.214 527.65 li
195.378 524.956 li
195.543 522.248 li
195.708 519.528 li
195.872 516.797 li
196.037 514.054 li
196.201 511.299 li
196.366 508.533 li
196.53 505.758 li
196.695 502.971 li
196.859 500.174 li
197.024 497.368 li
197.188 494.553 li
197.353 491.729 li
197.518 488.896 li
197.682 486.054 li
197.847 483.205 li
198.011 480.349 li
198.176 477.485 li
198.34 474.614 li
198.505 471.738 li
198.669 468.854 li
198.834 465.967 li
198.999 463.072 li
199.163 460.174 li
199.328 457.271 li
199.492 454.363 li
199.657 451.452 li
199.821 448.537 li
199.986 445.619 li
200.15 442.698 li
200.315 439.775 li
200.479 436.851 li
200.644 433.924 li
200.809 430.997 li
200.973 428.068 li
201.138 425.14 li
201.302 422.21 li
201.467 419.281 li
201.631 416.354 li
201.796 413.426 li
201.96 410.5 li
202.125 407.577 li
202.29 404.655 li
202.454 401.736 li
202.619 398.82 li
202.783 395.907 li
202.948 392.998 li
203.112 390.093 li
203.277 387.192 li
203.441 384.296 li
203.606 381.405 li
203.771 378.52 li
203.935 375.64 li
204.1 372.767 li
204.264 369.9 li
204.429 367.041 li
204.593 364.188 li
204.758 361.344 li
204.922 358.507 li
205.087 355.679 li
205.251 352.859 li
205.416 350.049 li
205.581 347.249 li
205.745 344.458 li
205.91 341.677 li
206.074 338.906 li
206.239 336.147 li
206.403 333.398 li
206.568 330.662 li
206.732 327.937 li
206.897 325.225 li
207.062 322.524 li
207.226 319.837 li
207.391 317.163 li
207.555 314.502 li
207.72 311.856 li
207.884 309.223 li
208.049 306.605 li
208.213 304.002 li
208.378 301.414 li
208.542 298.841 li
208.707 296.284 li
208.872 293.743 li
209.036 291.218 li
209.201 288.71 li
209.365 286.219 li
209.53 283.745 li
209.694 281.289 li
209.859 278.85 li
210.023 276.429 li
210.188 274.026 li
210.353 271.643 li
210.517 269.277 li
210.682 266.932 li
210.846 264.605 li
211.011 262.298 li
211.175 260.011 li
211.34 257.744 li
211.504 255.497 li
211.669 253.271 li
211.833 251.065 li
211.998 248.881 li
212.163 246.719 li
212.327 244.577 li
212.492 242.458 li
212.656 240.36 li
212.821 238.284 li
212.985 236.231 li
213.15 234.2 li
213.314 232.192 li
213.479 230.207 li
213.644 228.246 li
213.808 226.307 li
213.973 224.392 li
214.137 222.5 li
214.302 220.633 li
214.466 218.79 li
214.631 216.97 li
214.795 215.175 li
214.96 213.404 li
215.125 211.659 li
215.289 209.938 li
215.454 208.241 li
215.618 206.57 li
215.783 204.924 li
215.947 203.303 li
216.112 201.708 li
216.276 200.137 li
216.441 198.593 li
216.605 197.074 li
216.77 195.582 li
216.935 194.115 li
217.099 192.674 li
217.264 191.259 li
217.428 189.87 li
217.593 188.508 li
217.757 187.171 li
217.922 185.862 li
218.086 184.578 li
218.251 183.321 li
218.416 182.091 li
218.58 180.887 li
218.745 179.709 li
218.909 178.559 li
219.074 177.435 li
219.238 176.337 li
219.403 175.267 li
219.567 174.223 li
219.732 173.206 li
219.896 172.215 li
220.061 171.251 li
220.226 170.314 li
220.39 169.404 li
220.555 168.52 li
220.719 167.663 li
220.884 166.833 li
221.048 166.029 li
221.213 165.252 li
221.377 164.501 li
221.542 163.777 li
221.707 163.079 li
221.871 162.407 li
222.2 161.144 li
222.529 159.984 li
222.858 158.929 li
223.188 157.977 li
223.517 157.128 li
223.846 156.381 li
224.175 155.734 li
224.504 155.188 li
224.833 154.74 li
225.162 154.391 li
225.491 154.138 li
225.82 153.98 li
226.149 153.917 li
226.479 153.946 li
226.808 154.067 li
227.137 154.277 li
227.466 154.576 li
227.795 154.961 li
228.124 155.432 li
228.453 155.986 li
228.782 156.622 li
229.111 157.337 li
229.44 158.13 li
229.77 159 li
230.099 159.944 li
230.428 160.96 li
230.757 162.046 li
231.086 163.2 li
231.415 164.421 li
231.744 165.705 li
231.909 166.371 li
232.073 167.052 li
232.238 167.747 li
232.402 168.458 li
232.567 169.182 li
232.731 169.921 li
232.896 170.673 li
233.061 171.439 li
233.225 172.219 li
233.39 173.012 li
233.554 173.816 li
233.719 174.634 li
233.883 175.464 li
234.048 176.305 li
234.212 177.158 li
234.377 178.022 li
234.542 178.897 li
234.706 179.783 li
234.871 180.68 li
235.035 181.586 li
235.2 182.502 li
235.364 183.428 li
235.529 184.363 li
235.693 185.307 li
235.858 186.26 li
236.022 187.221 li
236.187 188.189 li
236.352 189.167 li
236.516 190.15 li
236.681 191.142 li
236.845 192.141 li
237.01 193.146 li
237.174 194.157 li
237.339 195.174 li
237.503 196.197 li
237.668 197.226 li
237.833 198.259 li
237.997 199.297 li
238.162 200.341 li
238.326 201.388 li
238.491 202.439 li
238.655 203.495 li
238.82 204.553 li
238.984 205.615 li
239.149 206.679 li
239.313 207.747 li
239.478 208.816 li
239.643 209.888 li
239.807 210.961 li
239.972 212.036 li
240.136 213.112 li
240.301 214.189 li
240.465 215.267 li
240.63 216.345 li
240.794 217.423 li
240.959 218.501 li
241.124 219.579 li
241.288 220.656 li
241.453 221.731 li
241.617 222.807 li
241.782 223.88 li
241.946 224.952 li
242.111 226.022 li
242.275 227.09 li
242.44 228.155 li
242.604 229.218 li
242.769 230.277 li
242.934 231.334 li
243.098 232.387 li
243.263 233.437 li
243.427 234.482 li
243.592 235.524 li
243.756 236.562 li
243.921 237.595 li
244.085 238.623 li
244.25 239.646 li
244.415 240.664 li
244.579 241.677 li
244.744 242.684 li
244.908 243.685 li
245.073 244.68 li
245.237 245.669 li
245.402 246.651 li
245.566 247.627 li
245.731 248.596 li
245.896 249.558 li
246.06 250.514 li
246.225 251.461 li
246.389 252.401 li
246.554 253.333 li
246.718 254.258 li
246.883 255.174 li
247.047 256.083 li
247.212 256.982 li
247.376 257.874 li
247.541 258.757 li
247.706 259.631 li
247.87 260.496 li
248.035 261.352 li
248.199 262.198 li
248.364 263.035 li
248.528 263.862 li
248.693 264.681 li
248.857 265.489 li
249.022 266.287 li
249.187 267.075 li
249.351 267.853 li
249.516 268.621 li
249.68 269.378 li
249.845 270.125 li
250.009 270.862 li
250.174 271.588 li
250.338 272.303 li
250.503 273.007 li
250.667 273.7 li
250.832 274.383 li
250.997 275.054 li
251.161 275.714 li
251.49 277 li
251.819 278.242 li
252.148 279.437 li
252.478 280.586 li
252.807 281.688 li
253.136 282.744 li
253.465 283.753 li
253.794 284.714 li
254.123 285.628 li
254.452 286.496 li
254.781 287.315 li
255.11 288.088 li
255.439 288.813 li
255.769 289.492 li
256.098 290.125 li
256.427 290.711 li
256.756 291.251 li
257.085 291.746 li
257.414 292.196 li
257.743 292.602 li
258.072 292.963 li
258.401 293.281 li
258.73 293.558 li
259.06 293.792 li
259.389 293.985 li
259.718 294.138 li
260.047 294.251 li
260.376 294.326 li
260.705 294.364 li
261.034 294.365 li
261.363 294.331 li
261.692 294.262 li
262.021 294.159 li
262.351 294.025 li
262.68 293.859 li
263.009 293.664 li
263.338 293.439 li
263.667 293.188 li
263.996 292.91 li
264.325 292.607 li
264.654 292.281 li
264.983 291.933 li
265.313 291.563 li
265.642 291.175 li
265.971 290.768 li
266.3 290.344 li
266.629 289.905 li
266.958 289.452 li
267.287 288.986 li
267.616 288.51 li
267.945 288.023 li
268.274 287.529 li
268.604 287.028 li
268.933 286.521 li
269.262 286.011 li
269.591 285.498 li
269.92 284.984 li
270.249 284.471 li
270.578 283.959 li
270.907 283.451 li
271.236 282.947 li
271.565 282.449 li
271.895 281.958 li
272.224 281.476 li
272.553 281.003 li
272.882 280.542 li
273.211 280.094 li
273.54 279.659 li
273.869 279.239 li
274.198 278.835 li
274.527 278.449 li
274.856 278.081 li
275.186 277.733 li
275.515 277.405 li
275.844 277.099 li
276.173 276.816 li
276.502 276.556 li
276.831 276.321 li
277.16 276.112 li
277.489 275.929 li
277.818 275.773 li
278.147 275.645 li
278.477 275.546 li
278.806 275.477 li
279.135 275.437 li
279.464 275.428 li
279.793 275.451 li
280.122 275.505 li
280.451 275.592 li
280.78 275.712 li
281.109 275.864 li
281.438 276.051 li
281.768 276.271 li
282.097 276.525 li
282.426 276.814 li
282.755 277.138 li
283.084 277.496 li
283.413 277.889 li
283.742 278.316 li
284.071 278.778 li
284.4 279.275 li
284.729 279.807 li
285.059 280.373 li
285.388 280.974 li
285.717 281.608 li
286.046 282.276 li
286.375 282.978 li
286.704 283.713 li
287.033 284.48 li
287.362 285.28 li
287.691 286.112 li
288.021 286.975 li
288.35 287.869 li
288.679 288.792 li
289.008 289.745 li
289.337 290.727 li
289.666 291.737 li
289.995 292.774 li
290.324 293.837 li
290.653 294.927 li
290.982 296.041 li
291.312 297.18 li
291.641 298.341 li
291.97 299.524 li
292.299 300.729 li
292.628 301.954 li
292.957 303.197 li
293.286 304.46 li
293.615 305.739 li
293.78 306.385 li
293.944 307.034 li
294.109 307.688 li
294.273 308.344 li
294.438 309.005 li
294.603 309.668 li
294.767 310.335 li
294.932 311.005 li
295.096 311.678 li
295.261 312.354 li
295.425 313.032 li
295.59 313.712 li
295.754 314.396 li
295.919 315.081 li
296.083 315.768 li
296.248 316.457 li
296.413 317.147 li
296.577 317.84 li
296.742 318.533 li
296.906 319.229 li
297.071 319.925 li
297.235 320.622 li
297.4 321.32 li
297.564 322.019 li
297.729 322.718 li
297.894 323.417 li
298.058 324.117 li
298.223 324.817 li
298.387 325.517 li
298.552 326.217 li
298.716 326.916 li
298.881 327.615 li
299.045 328.313 li
299.21 329.01 li
299.375 329.707 li
299.539 330.402 li
299.704 331.096 li
299.868 331.789 li
300.033 332.48 li
300.197 333.169 li
300.362 333.857 li
300.526 334.542 li
300.691 335.226 li
300.855 335.907 li
301.02 336.586 li
301.185 337.263 li
301.349 337.937 li
301.514 338.607 li
301.678 339.275 li
301.843 339.94 li
302.007 340.602 li
302.172 341.26 li
302.336 341.915 li
302.501 342.566 li
302.666 343.213 li
302.83 343.857 li
303.159 345.132 li
303.488 346.39 li
303.817 347.629 li
304.146 348.851 li
304.476 350.052 li
304.805 351.232 li
305.134 352.391 li
305.463 353.526 li
305.792 354.639 li
306.121 355.728 li
306.45 356.792 li
306.779 357.831 li
307.108 358.842 li
307.438 359.828 li
307.767 360.786 li
308.096 361.715 li
308.425 362.617 li
308.754 363.489 li
309.083 364.332 li
309.412 365.145 li
309.741 365.927 li
310.07 366.679 li
310.399 367.399 li
310.729 368.089 li
311.058 368.748 li
311.387 369.375 li
311.716 369.97 li
312.045 370.533 li
312.374 371.064 li
312.703 371.564 li
313.032 372.033 li
313.361 372.469 li
313.69 372.875 li
314.02 373.248 li
314.349 373.591 li
314.678 373.902 li
315.007 374.184 li
315.336 374.435 li
315.665 374.656 li
315.994 374.848 li
316.323 375.011 li
316.652 375.146 li
316.981 375.252 li
317.311 375.332 li
317.64 375.385 li
317.969 375.412 li
318.298 375.413 li
318.627 375.391 li
318.956 375.344 li
319.285 375.274 li
319.614 375.182 li
319.943 375.069 li
320.272 374.936 li
320.602 374.782 li
320.931 374.611 li
321.26 374.422 li
321.589 374.216 li
321.918 373.995 li
322.247 373.76 li
322.576 373.511 li
322.905 373.25 li
323.234 372.978 li
323.563 372.695 li
323.893 372.404 li
324.222 372.105 li
324.551 371.8 li
324.88 371.489 li
325.209 371.174 li
325.538 370.856 li
325.867 370.537 li
326.196 370.217 li
326.525 369.898 li
326.854 369.582 li
327.184 369.268 li
327.513 368.959 li
327.842 368.655 li
328.171 368.359 li
328.5 368.071 li
328.829 367.792 li
329.158 367.524 li
329.487 367.268 li
329.816 367.025 li
330.146 366.796 li
330.475 366.583 li
330.804 366.386 li
331.133 366.207 li
331.462 366.047 li
331.791 365.907 li
332.12 365.788 li
332.449 365.69 li
332.778 365.616 li
333.107 365.566 li
333.437 365.542 li
333.766 365.543 li
334.095 365.571 li
334.424 365.627 li
334.753 365.712 li
335.082 365.827 li
335.411 365.971 li
335.74 366.147 li
336.069 366.354 li
336.398 366.595 li
336.728 366.868 li
337.057 367.175 li
337.386 367.517 li
337.715 367.893 li
338.044 368.304 li
338.373 368.751 li
338.702 369.234 li
339.031 369.753 li
339.36 370.31 li
339.689 370.903 li
340.019 371.534 li
340.348 372.201 li
340.677 372.907 li
341.006 373.649 li
341.335 374.43 li
341.664 375.247 li
341.993 376.103 li
342.322 376.995 li
342.651 377.924 li
342.98 378.89 li
343.31 379.893 li
343.639 380.931 li
343.968 382.006 li
344.297 383.116 li
344.626 384.26 li
344.955 385.439 li
345.284 386.652 li
345.613 387.898 li
345.942 389.176 li
346.107 389.828 li
346.271 390.486 li
346.436 391.153 li
346.601 391.827 li
346.765 392.509 li
346.93 393.198 li
347.094 393.895 li
347.259 394.599 li
347.423 395.309 li
347.588 396.027 li
347.752 396.751 li
347.917 397.483 li
348.082 398.221 li
348.246 398.965 li
348.411 399.716 li
348.575 400.473 li
348.74 401.235 li
348.904 402.004 li
349.069 402.779 li
349.233 403.559 li
349.398 404.345 li
349.563 405.136 li
349.727 405.932 li
349.892 406.733 li
350.056 407.54 li
350.221 408.351 li
350.385 409.166 li
350.55 409.986 li
350.714 410.81 li
350.879 411.638 li
351.043 412.47 li
351.208 413.306 li
351.373 414.145 li
351.537 414.987 li
351.702 415.833 li
351.866 416.682 li
352.031 417.534 li
352.195 418.388 li
352.36 419.245 li
352.524 420.104 li
352.689 420.965 li
352.854 421.828 li
353.018 422.693 li
353.183 423.559 li
353.347 424.427 li
353.512 425.295 li
353.676 426.165 li
353.841 427.035 li
354.005 427.906 li
354.17 428.777 li
354.334 429.649 li
354.499 430.521 li
354.664 431.392 li
354.828 432.262 li
354.993 433.132 li
355.157 434.001 li
355.322 434.869 li
355.486 435.735 li
355.651 436.601 li
355.815 437.464 li
355.98 438.325 li
356.145 439.185 li
356.309 440.042 li
356.474 440.896 li
356.638 441.748 li
356.803 442.597 li
356.967 443.441 li
357.132 444.284 li
357.296 445.122 li
357.461 445.957 li
357.625 446.787 li
357.79 447.613 li
357.955 448.436 li
358.119 449.253 li
358.284 450.064 li
358.448 450.872 li
358.613 451.674 li
358.777 452.47 li
358.942 453.26 li
359.106 454.045 li
359.271 454.823 li
359.436 455.595 li
359.6 456.36 li
359.765 457.119 li
359.929 457.87 li
360.094 458.614 li
360.258 459.352 li
360.423 460.081 li
360.587 460.802 li
360.752 461.516 li
360.917 462.221 li
361.081 462.918 li
361.246 463.605 li
361.41 464.285 li
361.575 464.955 li
361.739 465.616 li
361.904 466.268 li
362.068 466.91 li
362.397 468.164 li
362.727 469.378 li
363.056 470.549 li
363.385 471.677 li
363.714 472.76 li
364.043 473.796 li
364.372 474.784 li
364.701 475.724 li
365.03 476.612 li
365.359 477.449 li
365.688 478.234 li
366.018 478.964 li
366.347 479.64 li
366.676 480.258 li
367.005 480.82 li
367.334 481.323 li
367.663 481.768 li
367.992 482.152 li
368.321 482.476 li
368.65 482.737 li
368.979 482.938 li
369.309 483.073 li
369.638 483.146 li
369.967 483.155 li
370.296 483.1 li
370.625 482.979 li
370.954 482.791 li
371.283 482.539 li
371.612 482.221 li
371.941 481.836 li
372.271 481.385 li
372.6 480.867 li
372.929 480.283 li
373.258 479.633 li
373.587 478.916 li
373.916 478.134 li
374.245 477.285 li
374.574 476.371 li
374.903 475.392 li
375.232 474.347 li
375.562 473.238 li
375.891 472.066 li
376.22 470.831 li
376.384 470.189 li
376.549 469.533 li
376.713 468.861 li
376.878 468.174 li
377.042 467.472 li
377.207 466.754 li
377.372 466.021 li
377.536 465.273 li
377.701 464.512 li
377.865 463.734 li
378.03 462.943 li
378.194 462.138 li
378.359 461.317 li
378.523 460.483 li
378.688 459.636 li
378.853 458.773 li
379.017 457.897 li
379.182 457.009 li
379.346 456.106 li
379.511 455.19 li
379.675 454.262 li
379.84 453.32 li
380.004 452.366 li
380.169 451.399 li
380.333 450.421 li
380.498 449.43 li
380.663 448.426 li
380.827 447.411 li
380.992 446.385 li
381.156 445.347 li
381.321 444.297 li
381.485 443.236 li
381.65 442.166 li
381.814 441.084 li
381.979 439.992 li
382.144 438.89 li
382.308 437.777 li
382.473 436.655 li
382.637 435.523 li
382.802 434.383 li
382.966 433.232 li
383.131 432.074 li
383.295 430.906 li
383.46 429.73 li
383.625 428.547 li
383.789 427.354 li
383.954 426.155 li
384.118 424.948 li
384.283 423.733 li
384.447 422.512 li
384.612 421.285 li
384.776 420.05 li
384.941 418.81 li
385.105 417.563 li
385.27 416.311 li
385.435 415.054 li
385.599 413.791 li
385.764 412.523 li
385.928 411.251 li
386.093 409.975 li
386.257 408.694 li
386.422 407.41 li
386.586 406.122 li
386.751 404.831 li
386.916 403.537 li
387.08 402.24 li
387.245 400.941 li
387.409 399.64 li
387.574 398.336 li
387.738 397.031 li
387.903 395.726 li
388.067 394.418 li
388.232 393.11 li
388.396 391.802 li
388.561 390.494 li
388.726 389.186 li
388.89 387.877 li
389.055 386.57 li
389.219 385.264 li
389.384 383.959 li
389.548 382.656 li
389.713 381.354 li
389.877 380.055 li
390.042 378.758 li
390.207 377.464 li
390.371 376.173 li
390.536 374.885 li
390.7 373.601 li
390.865 372.32 li
391.029 371.044 li
391.194 369.772 li
391.358 368.506 li
391.523 367.244 li
391.688 365.988 li
391.852 364.737 li
392.017 363.492 li
392.181 362.253 li
392.346 361.021 li
392.51 359.795 li
392.675 358.577 li
392.839 357.366 li
393.004 356.163 li
393.168 354.967 li
393.333 353.78 li
393.498 352.601 li
393.662 351.431 li
393.827 350.27 li
393.991 349.118 li
394.156 347.976 li
394.32 346.844 li
394.485 345.721 li
394.649 344.609 li
394.814 343.508 li
394.979 342.418 li
395.143 341.338 li
395.308 340.271 li
395.472 339.215 li
395.637 338.17 li
395.801 337.139 li
395.966 336.119 li
396.13 335.112 li
396.295 334.119 li
396.459 333.138 li
396.624 332.171 li
396.789 331.217 li
396.953 330.277 li
397.118 329.352 li
397.282 328.441 li
397.447 327.544 li
397.611 326.663 li
397.776 325.796 li
397.94 324.945 li
398.105 324.109 li
398.27 323.289 li
398.434 322.484 li
398.599 321.696 li
398.763 320.925 li
398.928 320.169 li
399.092 319.431 li
399.257 318.709 li
399.421 318.005 li
399.586 317.318 li
399.75 316.648 li
399.915 315.997 li
400.244 314.746 li
400.573 313.569 li
400.902 312.466 li
401.231 311.438 li
401.561 310.487 li
401.89 309.613 li
402.219 308.818 li
402.548 308.104 li
402.877 307.469 li
403.206 306.917 li
403.535 306.446 li
403.864 306.059 li
404.193 305.756 li
404.522 305.537 li
404.852 305.403 li
405.181 305.354 li
405.51 305.391 li
405.839 305.514 li
406.168 305.723 li
406.497 306.019 li
406.826 306.401 li
407.155 306.869 li
407.484 307.424 li
407.813 308.065 li
408.143 308.792 li
408.472 309.605 li
408.801 310.503 li
409.13 311.486 li
409.459 312.554 li
409.788 313.705 li
410.117 314.939 li
410.282 315.588 li
410.446 316.256 li
410.611 316.945 li
410.775 317.655 li
410.94 318.384 li
411.104 319.134 li
411.269 319.903 li
411.434 320.692 li
411.598 321.501 li
411.763 322.33 li
411.927 323.177 li
412.092 324.044 li
412.256 324.931 li
412.421 325.836 li
412.585 326.76 li
412.75 327.702 li
412.915 328.663 li
413.079 329.643 li
413.244 330.64 li
413.408 331.655 li
413.573 332.688 li
413.737 333.739 li
413.902 334.807 li
414.066 335.893 li
414.231 336.995 li
414.396 338.114 li
414.56 339.25 li
414.725 340.402 li
414.889 341.57 li
415.054 342.754 li
415.218 343.955 li
415.383 345.17 li
415.547 346.401 li
415.712 347.647 li
415.876 348.908 li
416.041 350.183 li
416.206 351.473 li
416.37 352.776 li
416.535 354.094 li
416.699 355.426 li
416.864 356.771 li
417.028 358.128 li
417.193 359.499 li
417.357 360.882 li
417.522 362.278 li
417.687 363.686 li
417.851 365.105 li
418.016 366.537 li
418.18 367.979 li
418.345 369.433 li
418.509 370.896 li
418.674 372.371 li
418.838 373.855 li
419.003 375.35 li
419.167 376.854 li
419.332 378.368 li
419.497 379.89 li
419.661 381.421 li
419.826 382.96 li
419.99 384.508 li
420.155 386.063 li
420.319 387.626 li
420.484 389.196 li
420.648 390.773 li
420.813 392.357 li
420.978 393.947 li
421.142 395.542 li
421.307 397.144 li
421.471 398.75 li
421.636 400.362 li
421.8 401.979 li
421.965 403.6 li
422.129 405.225 li
422.294 406.854 li
422.458 408.486 li
422.623 410.121 li
422.788 411.759 li
422.952 413.4 li
423.117 415.043 li
423.281 416.688 li
423.446 418.334 li
423.61 419.981 li
423.775 421.63 li
423.939 423.278 li
424.104 424.928 li
424.269 426.577 li
424.433 428.226 li
424.598 429.873 li
424.762 431.52 li
424.927 433.165 li
425.091 434.81 li
425.256 436.451 li
425.42 438.091 li
425.585 439.728 li
425.75 441.361 li
425.914 442.991 li
426.079 444.618 li
426.243 446.241 li
426.408 447.86 li
426.572 449.474 li
426.737 451.083 li
426.901 452.688 li
427.066 454.286 li
427.23 455.879 li
427.395 457.465 li
427.56 459.045 li
427.724 460.619 li
427.889 462.186 li
428.053 463.744 li
428.218 465.296 li
428.382 466.839 li
428.547 468.374 li
428.711 469.9 li
428.876 471.418 li
429.041 472.927 li
429.205 474.426 li
429.37 475.916 li
429.534 477.395 li
429.699 478.864 li
429.863 480.322 li
430.028 481.771 li
430.192 483.207 li
430.357 484.632 li
430.521 486.046 li
430.686 487.447 li
430.851 488.837 li
431.015 490.214 li
431.18 491.577 li
431.344 492.929 li
431.509 494.267 li
431.673 495.591 li
431.838 496.901 li
432.002 498.198 li
432.167 499.48 li
432.332 500.748 li
432.496 502.001 li
432.661 503.239 li
432.825 504.462 li
432.99 505.67 li
433.154 506.861 li
433.319 508.038 li
433.483 509.197 li
433.648 510.342 li
433.813 511.469 li
433.977 512.579 li
434.142 513.673 li
434.306 514.749 li
434.471 515.808 li
434.635 516.85 li
434.8 517.874 li
434.964 518.88 li
435.129 519.868 li
435.293 520.838 li
435.458 521.789 li
435.623 522.722 li
435.787 523.636 li
435.952 524.531 li
436.116 525.408 li
436.281 526.265 li
436.445 527.103 li
436.61 527.921 li
436.774 528.72 li
436.939 529.498 li
437.104 530.258 li
437.268 530.997 li
437.433 531.716 li
437.597 532.414 li
437.762 533.093 li
437.926 533.751 li
438.091 534.389 li
438.42 535.602 li
438.749 536.73 li
439.078 537.776 li
439.407 538.737 li
439.736 539.613 li
440.065 540.404 li
440.395 541.109 li
440.724 541.729 li
441.053 542.261 li
441.382 542.707 li
441.711 543.066 li
442.04 543.34 li
442.369 543.526 li
442.698 543.627 li
443.027 543.642 li
443.356 543.57 li
443.686 543.415 li
444.015 543.174 li
444.344 542.849 li
444.673 542.439 li
445.002 541.948 li
445.331 541.374 li
445.66 540.719 li
445.989 539.983 li
446.318 539.168 li
446.647 538.274 li
446.977 537.303 li
447.306 536.255 li
447.635 535.133 li
447.964 533.937 li
448.293 532.668 li
448.458 532.007 li
448.622 531.328 li
448.787 530.632 li
448.951 529.918 li
449.116 529.188 li
449.28 528.441 li
449.445 527.677 li
449.609 526.896 li
449.774 526.101 li
449.938 525.288 li
450.103 524.459 li
450.268 523.615 li
450.432 522.756 li
450.597 521.882 li
450.761 520.992 li
450.926 520.088 li
451.09 519.17 li
451.255 518.237 li
451.419 517.29 li
451.584 516.329 li
451.749 515.355 li
451.913 514.367 li
452.078 513.367 li
452.242 512.354 li
452.407 511.328 li
452.571 510.289 li
452.736 509.239 li
452.9 508.177 li
453.065 507.104 li
453.229 506.019 li
453.394 504.922 li
453.559 503.815 li
453.723 502.698 li
453.888 501.57 li
454.052 500.433 li
454.217 499.286 li
454.381 498.129 li
454.546 496.963 li
454.71 495.789 li
454.875 494.605 li
455.04 493.414 li
455.204 492.214 li
455.369 491.007 li
455.533 489.792 li
455.698 488.569 li
455.862 487.341 li
456.027 486.105 li
456.191 484.863 li
456.356 483.615 li
456.521 482.361 li
456.685 481.103 li
456.85 479.838 li
457.014 478.568 li
457.179 477.294 li
457.343 476.016 li
457.508 474.733 li
457.672 473.447 li
457.837 472.158 li
458.001 470.865 li
458.166 469.569 li
458.331 468.271 li
458.495 466.971 li
458.66 465.669 li
458.824 464.364 li
458.989 463.059 li
459.153 461.752 li
459.318 460.444 li
459.482 459.136 li
459.647 457.828 li
459.812 456.52 li
459.976 455.211 li
460.141 453.903 li
460.305 452.597 li
460.47 451.292 li
460.634 449.987 li
460.799 448.686 li
460.963 447.385 li
461.128 446.087 li
461.292 444.791 li
461.457 443.499 li
461.622 442.209 li
461.786 440.924 li
461.951 439.641 li
462.115 438.362 li
462.28 437.088 li
462.444 435.818 li
462.609 434.554 li
462.773 433.294 li
462.938 432.039 li
463.103 430.79 li
463.267 429.546 li
463.432 428.309 li
463.596 427.078 li
463.761 425.854 li
463.925 424.636 li
464.09 423.425 li
464.254 422.222 li
464.419 421.026 li
464.583 419.838 li
464.748 418.659 li
464.913 417.487 li
465.077 416.324 li
465.242 415.17 li
465.406 414.024 li
465.571 412.888 li
465.735 411.762 li
465.9 410.645 li
466.064 409.538 li
466.229 408.44 li
466.394 407.354 li
466.558 406.277 li
466.723 405.212 li
466.887 404.157 li
467.052 403.114 li
467.216 402.082 li
467.381 401.061 li
467.545 400.052 li
467.71 399.055 li
467.875 398.07 li
468.039 397.097 li
468.204 396.137 li
468.368 395.189 li
468.533 394.254 li
468.697 393.333 li
468.862 392.424 li
469.026 391.528 li
469.191 390.646 li
469.355 389.778 li
469.52 388.923 li
469.685 388.083 li
469.849 387.255 li
470.014 386.443 li
470.178 385.645 li
470.343 384.861 li
470.507 384.091 li
470.672 383.337 li
470.836 382.597 li
471.001 381.872 li
471.166 381.162 li
471.33 380.468 li
471.495 379.788 li
471.659 379.124 li
471.988 377.843 li
472.317 376.624 li
472.646 375.468 li
472.976 374.376 li
473.305 373.349 li
473.634 372.386 li
473.963 371.489 li
474.292 370.657 li
474.621 369.891 li
474.95 369.192 li
475.279 368.559 li
475.608 367.992 li
475.938 367.492 li
476.267 367.058 li
476.596 366.69 li
476.925 366.389 li
477.254 366.154 li
477.583 365.984 li
477.912 365.88 li
478.241 365.841 li
478.57 365.866 li
478.899 365.956 li
479.229 366.109 li
479.558 366.325 li
479.887 366.603 li
480.216 366.942 li
480.545 367.342 li
480.874 367.801 li
481.203 368.32 li
481.532 368.896 li
481.861 369.53 li
482.19 370.22 li
482.52 370.964 li
482.849 371.763 li
483.178 372.613 li
483.507 373.515 li
483.836 374.467 li
484.165 375.468 li
484.494 376.517 li
484.823 377.611 li
485.152 378.75 li
485.481 379.933 li
485.811 381.157 li
486.14 382.422 li
486.304 383.069 li
486.469 383.726 li
486.633 384.391 li
486.798 385.066 li
486.962 385.75 li
487.127 386.443 li
487.292 387.144 li
487.456 387.854 li
487.621 388.571 li
487.785 389.296 li
487.95 390.03 li
488.114 390.771 li
488.279 391.519 li
488.443 392.274 li
488.608 393.036 li
488.772 393.805 li
488.937 394.58 li
489.102 395.361 li
489.266 396.149 li
489.431 396.942 li
489.595 397.742 li
489.76 398.546 li
489.924 399.356 li
490.089 400.171 li
490.253 400.99 li
490.418 401.814 li
490.583 402.643 li
490.747 403.476 li
490.912 404.312 li
491.076 405.152 li
491.241 405.996 li
491.405 406.843 li
491.57 407.693 li
491.734 408.547 li
491.899 409.402 li
492.063 410.261 li
492.228 411.121 li
492.393 411.983 li
492.557 412.848 li
492.722 413.714 li
492.886 414.581 li
493.051 415.45 li
493.215 416.319 li
493.38 417.189 li
493.544 418.061 li
493.709 418.932 li
493.874 419.803 li
494.038 420.674 li
494.203 421.545 li
494.367 422.416 li
494.532 423.286 li
494.696 424.155 li
494.861 425.023 li
495.025 425.891 li
495.19 426.756 li
495.354 427.62 li
495.519 428.482 li
495.684 429.342 li
495.848 430.2 li
496.013 431.056 li
496.177 431.908 li
496.342 432.759 li
496.506 433.605 li
496.671 434.45 li
496.835 435.291 li
497 436.128 li
497.165 436.962 li
497.329 437.792 li
497.494 438.618 li
497.658 439.44 li
497.823 440.258 li
497.987 441.07 li
498.152 441.879 li
498.316 442.683 li
498.481 443.481 li
498.646 444.275 li
498.81 445.063 li
498.975 445.846 li
499.139 446.623 li
499.304 447.396 li
499.468 448.161 li
499.633 448.921 li
499.797 449.675 li
499.962 450.422 li
500.126 451.163 li
500.291 451.897 li
500.456 452.625 li
500.62 453.346 li
500.785 454.061 li
500.949 454.768 li
501.114 455.468 li
501.278 456.16 li
501.443 456.846 li
501.607 457.523 li
501.772 458.193 li
501.937 458.856 li
502.101 459.511 li
502.266 460.158 li
502.595 461.428 li
502.924 462.665 li
503.253 463.869 li
503.582 465.04 li
503.911 466.176 li
504.24 467.276 li
504.569 468.342 li
504.898 469.371 li
505.228 470.364 li
505.557 471.32 li
505.886 472.24 li
506.215 473.123 li
506.544 473.969 li
506.873 474.776 li
507.202 475.547 li
507.531 476.279 li
507.86 476.976 li
508.189 477.634 li
508.519 478.254 li
508.848 478.838 li
509.177 479.385 li
509.506 479.895 li
509.835 480.368 li
510.164 480.807 li
510.493 481.208 li
510.822 481.575 li
511.151 481.908 li
511.48 482.206 li
511.81 482.471 li
512.139 482.702 li
512.468 482.901 li
512.797 483.069 li
513.126 483.206 li
513.455 483.313 li
513.784 483.39 li
514.113 483.438 li
514.442 483.46 li
514.771 483.454 li
515.101 483.423 li
515.43 483.367 li
515.759 483.287 li
516.088 483.184 li
516.417 483.059 li
516.746 482.913 li
517.075 482.748 li
517.404 482.564 li
517.733 482.363 li
518.063 482.146 li
518.392 481.913 li
518.721 481.667 li
519.05 481.407 li
519.379 481.137 li
519.708 480.855 li
520.037 480.564 li
520.366 480.267 li
520.695 479.962 li
521.024 479.651 li
521.354 479.337 li
521.683 479.019 li
522.012 478.699 li
522.341 478.38 li
522.67 478.061 li
522.999 477.744 li
523.328 477.43 li
523.657 477.121 li
523.986 476.816 li
524.315 476.52 li
524.645 476.23 li
524.974 475.951 li
525.303 475.682 li
525.632 475.424 li
525.961 475.178 li
526.29 474.946 li
526.619 474.729 li
526.948 474.527 li
527.277 474.343 li
527.606 474.176 li
527.936 474.028 li
528.265 473.899 li
528.594 473.792 li
528.923 473.706 li
529.252 473.642 li
529.581 473.602 li
529.91 473.585 li
530.239 473.593 li
530.568 473.626 li
530.897 473.687 li
531.227 473.772 li
531.556 473.887 li
531.885 474.028 li
532.214 474.199 li
532.543 474.398 li
532.872 474.627 li
533.201 474.887 li
533.53 475.176 li
533.859 475.495 li
534.188 475.846 li
534.518 476.228 li
534.847 476.641 li
535.176 477.086 li
535.505 477.563 li
535.834 478.07 li
536.163 478.61 li
536.492 479.182 li
536.821 479.785 li
537.15 480.42 li
537.479 481.087 li
537.809 481.784 li
538.138 482.514 li
538.467 483.273 li
538.796 484.063 li
539.125 484.884 li
539.454 485.734 li
539.783 486.614 li
540.112 487.522 li
540.441 488.46 li
540.771 489.425 li
541.1 490.417 li
541.429 491.437 li
541.758 492.481 li
542.087 493.552 li
542.416 494.647 li
542.745 495.766 li
543.074 496.908 li
543.403 498.072 li
543.732 499.258 li
544.062 500.464 li
544.391 501.69 li
544.72 502.935 li
545.049 504.197 li
545.378 505.477 li
545.542 506.122 li
545.707 506.771 li
545.872 507.425 li
546.036 508.081 li
546.201 508.741 li
546.365 509.404 li
546.53 510.071 li
546.694 510.74 li
546.859 511.413 li
547.023 512.088 li
547.188 512.766 li
547.353 513.445 li
547.517 514.128 li
547.682 514.813 li
547.846 515.5 li
548.011 516.188 li
548.175 516.879 li
548.34 517.57 li
548.504 518.264 li
548.669 518.959 li
548.833 519.654 li
548.998 520.352 li
549.163 521.049 li
549.327 521.748 li
549.492 522.446 li
549.656 523.146 li
549.821 523.846 li
549.985 524.546 li
550.15 525.246 li
550.314 525.945 li
550.479 526.646 li
550.644 527.344 li
550.808 528.042 li
550.973 528.74 li
551.137 529.437 li
551.302 530.133 li
551.466 530.826 li
551.631 531.52 li
551.795 532.211 li
551.96 532.901 li
552.125 533.589 li
552.289 534.275 li
552.454 534.959 li
552.618 535.641 li
552.783 536.32 li
552.947 536.997 li
553.112 537.671 li
553.276 538.343 li
553.441 539.011 li
553.605 539.676 li
553.77 540.338 li
553.935 540.997 li
554.099 541.651 li
554.264 542.303 li
554.428 542.951 li
554.593 543.595 li
554.922 544.869 li
555.251 546.127 li
555.58 547.366 li
555.909 548.586 li
556.238 549.785 li
556.567 550.963 li
556.896 552.118 li
557.226 553.25 li
557.555 554.357 li
557.884 555.44 li
558.213 556.497 li
558.542 557.527 li
558.871 558.53 li
559.2 559.505 li
559.529 560.45 li
559.858 561.366 li
560.188 562.252 li
560.517 563.106 li
560.846 563.93 li
561.175 564.722 li
561.504 565.48 li
561.833 566.207 li
562.162 566.9 li
562.491 567.56 li
562.82 568.186 li
563.149 568.777 li
563.479 569.334 li
563.808 569.856 li
564.137 570.345 li
564.466 570.798 li
564.795 571.217 li
565.124 571.601 li
565.453 571.949 li
565.782 572.264 li
566.111 572.544 li
566.44 572.789 li
566.77 573.001 li
567.099 573.179 li
567.428 573.322 li
567.757 573.434 li
568.086 573.512 li
568.415 573.559 li
568.744 573.572 li
569.073 573.556 li
569.402 573.509 li
569.731 573.431 li
570.061 573.324 li
570.39 573.189 li
570.719 573.026 li
571.048 572.836 li
571.377 572.62 li
571.706 572.379 li
572.035 572.113 li
572.364 571.823 li
572.693 571.512 li
573.022 571.179 li
573.352 570.825 li
573.681 570.452 li
574.01 570.062 li
574.339 569.653 li
574.668 569.229 li
574.997 568.791 li
575.326 568.339 li
575.655 567.875 li
575.984 567.4 li
576.313 566.916 li
576.643 566.423 li
576.972 565.923 li
577.301 565.418 li
577.63 564.908 li
577.959 564.396 li
578.288 563.883 li
578.617 563.368 li
578.946 562.856 li
579.275 562.347 li
579.604 561.842 li
579.934 561.342 li
580.263 560.85 li
580.592 560.365 li
580.921 559.892 li
581.25 559.43 li
581.579 558.979 li
581.908 558.545 li
582.237 558.125 li
582.566 557.723 li
582.896 557.339 li
583.225 556.975 li
583.554 556.632 li
583.883 556.312 li
584.212 556.016 li
584.541 555.744 li
584.87 555.5 li
585.199 555.283 li
585.528 555.095 li
585.857 554.938 li
586.187 554.811 li
586.516 554.717 li
586.845 554.657 li
587.174 554.632 li
587.503 554.643 li
587.832 554.689 li
588.161 554.774 li
588.49 554.898 li
588.819 555.062 li
589.148 555.265 li
589.478 555.51 li
589.807 555.797 li
590.136 556.127 li
590.465 556.5 li
590.794 556.916 li
591.123 557.378 li
591.452 557.885 li
591.781 558.437 li
592.11 559.035 li
592.439 559.679 li
592.769 560.37 li
593.098 561.108 li
593.427 561.893 li
593.756 562.725 li
594.085 563.604 li
594.414 564.53 li
594.743 565.504 li
595.072 566.525 li
595.401 567.593 li
595.73 568.708 li
596.06 569.869 li
596.389 571.076 li
596.718 572.329 li
596.882 572.973 li
597.047 573.627 li
597.211 574.293 li
597.376 574.97 li
597.541 575.658 li
597.705 576.356 li
597.87 577.066 li
598.034 577.787 li
598.199 578.519 li
598.363 579.261 li
598.528 580.013 li
598.692 580.775 li
598.857 581.549 li
599.021 582.332 li
599.186 583.126 li
599.351 583.93 li
599.515 584.742 li
599.68 585.565 li
599.844 586.398 li
600.009 587.24 li
600.173 588.092 li
600.338 588.952 li
600.502 589.821 li
600.667 590.7 li
600.832 591.587 li
600.996 592.483 li
601.161 593.388 li
601.325 594.3 li
601.49 595.221 li
601.654 596.149 li
601.819 597.086 li
601.983 598.029 li
602.148 598.981 li
602.313 599.939 li
602.477 600.905 li
602.642 601.878 li
602.806 602.857 li
602.971 603.844 li
603.135 604.836 li
603.3 605.834 li
603.464 606.838 li
603.629 607.848 li
603.793 608.863 li
603.958 609.884 li
604.123 610.91 li
604.287 611.94 li
604.452 612.976 li
604.616 614.016 li
604.781 615.059 li
604.945 616.107 li
605.11 617.158 li
605.274 618.214 li
605.439 619.271 li
605.604 620.333 li
605.768 621.397 li
605.933 622.464 li
606.097 623.533 li
606.262 624.604 li
606.426 625.677 li
606.591 626.751 li
606.755 627.826 li
606.92 628.903 li
607.084 629.98 li
607.249 631.059 li
607.414 632.137 li
607.578 633.215 li
607.743 634.292 li
607.907 635.37 li
608.072 636.446 li
608.236 637.521 li
608.401 638.596 li
608.565 639.668 li
608.73 640.738 li
608.895 641.807 li
609.059 642.873 li
609.224 643.937 li
609.388 644.996 li
609.553 646.053 li
609.717 647.106 li
609.882 648.155 li
610.046 649.201 li
610.211 650.241 li
610.375 651.277 li
610.54 652.309 li
610.705 653.334 li
610.869 654.354 li
611.034 655.369 li
611.198 656.377 li
611.363 657.378 li
611.527 658.373 li
611.692 659.36 li
611.856 660.341 li
612.021 661.314 li
612.186 662.279 li
612.35 663.235 li
612.515 664.184 li
612.679 665.123 li
612.844 666.053 li
613.008 666.975 li
613.173 667.885 li
613.337 668.786 li
613.502 669.678 li
613.667 670.558 li
613.831 671.428 li
613.996 672.286 li
614.16 673.133 li
614.325 673.968 li
614.489 674.791 li
614.654 675.603 li
614.818 676.401 li
614.983 677.187 li
615.147 677.959 li
615.312 678.719 li
615.477 679.464 li
615.641 680.195 li
615.806 680.913 li
615.97 681.615 li
616.135 682.304 li
616.299 682.977 li
616.464 683.634 li
616.793 684.902 li
617.122 686.105 li
617.451 687.242 li
617.78 688.311 li
618.109 689.308 li
618.438 690.232 li
618.768 691.083 li
619.097 691.856 li
619.426 692.551 li
619.755 693.166 li
620.084 693.698 li
620.413 694.146 li
620.742 694.51 li
621.071 694.786 li
621.4 694.974 li
621.729 695.07 li
622.059 695.076 li
622.388 694.988 li
622.717 694.806 li
623.046 694.527 li
623.375 694.153 li
623.704 693.68 li
624.033 693.107 li
624.362 692.436 li
624.691 691.662 li
625.021 690.786 li
625.35 689.808 li
625.679 688.726 li
626.008 687.539 li
626.172 686.906 li
626.337 686.248 li
626.501 685.563 li
626.666 684.851 li
626.831 684.113 li
626.995 683.349 li
627.16 682.558 li
627.324 681.74 li
627.489 680.896 li
627.653 680.024 li
627.818 679.127 li
627.982 678.203 li
628.147 677.252 li
628.312 676.274 li
628.476 675.27 li
628.641 674.239 li
628.805 673.182 li
628.97 672.097 li
629.134 670.985 li
629.299 669.848 li
629.463 668.684 li
629.628 667.492 li
629.792 666.274 li
629.957 665.03 li
630.122 663.76 li
630.286 662.462 li
630.451 661.139 li
630.615 659.789 li
630.78 658.413 li
630.944 657.011 li
631.109 655.582 li
631.273 654.128 li
631.438 652.647 li
631.603 651.142 li
631.767 649.609 li
631.932 648.052 li
632.096 646.469 li
632.261 644.859 li
632.425 643.226 li
632.59 641.566 li
632.754 639.883 li
632.919 638.173 li
633.083 636.439 li
633.248 634.68 li
633.413 632.896 li
633.577 631.089 li
633.742 629.258 li
633.906 627.401 li
634.071 625.521 li
634.235 623.618 li
634.4 621.69 li
634.564 619.74 li
634.729 617.766 li
634.894 615.77 li
635.058 613.75 li
635.223 611.707 li
635.387 609.643 li
635.552 607.555 li
635.716 605.446 li
635.881 603.314 li
636.045 601.162 li
636.21 598.988 li
636.375 596.793 li
636.539 594.577 li
636.704 592.34 li
636.868 590.083 li
637.033 587.806 li
637.197 585.508 li
637.362 583.191 li
637.526 580.854 li
637.691 578.498 li
637.855 576.123 li
638.02 573.729 li
638.185 571.317 li
638.349 568.888 li
638.514 566.439 li
638.678 563.974 li
638.843 561.491 li
639.007 558.991 li
639.172 556.475 li
639.336 553.941 li
639.501 551.392 li
639.666 548.826 li
639.83 546.246 li
639.995 543.649 li
640.159 541.039 li
640.324 538.413 li
640.488 535.773 li
640.653 533.119 li
640.817 530.452 li
640.982 527.771 li
641.146 525.077 li
641.311 522.37 li
641.476 519.651 li
641.64 516.92 li
641.805 514.178 li
641.969 511.423 li
642.134 508.658 li
642.298 505.883 li
642.463 503.097 li
642.627 500.3 li
642.792 497.494 li
642.957 494.68 li
643.121 491.855 li
643.286 489.022 li
643.45 486.182 li
643.615 483.333 li
643.779 480.478 li
643.944 477.614 li
644.108 474.744 li
644.273 471.867 li
644.438 468.984 li
644.602 466.097 li
644.767 463.203 li
644.931 460.305 li
645.096 457.401 li
645.26 454.494 li
645.425 451.583 li
645.589 448.668 li
645.754 445.75 li
645.918 442.83 li
646.083 439.907 li
646.248 436.982 li
646.412 434.056 li
646.577 431.128 li
646.741 428.199 li
646.906 425.271 li
647.07 422.342 li
647.235 419.413 li
647.399 416.485 li
647.564 413.558 li
647.729 410.632 li
647.893 407.708 li
648.058 404.787 li
648.222 401.867 li
648.387 398.951 li
648.551 396.038 li
648.716 393.128 li
648.88 390.223 li
649.045 387.322 li
649.209 384.426 li
649.374 381.535 li
649.539 378.649 li
649.703 375.77 li
649.868 372.896 li
650.032 370.029 li
650.197 367.169 li
650.361 364.316 li
650.526 361.471 li
650.69 358.634 li
650.855 355.806 li
651.02 352.986 li
651.184 350.175 li
651.349 347.374 li
651.513 344.583 li
651.678 341.801 li
651.842 339.031 li
652.007 336.271 li
652.171 333.522 li
652.336 330.785 li
652.5 328.06 li
652.665 325.346 li
652.83 322.646 li
652.994 319.958 li
653.159 317.283 li
653.323 314.622 li
653.488 311.975 li
653.652 309.341 li
653.817 306.723 li
653.981 304.119 li
654.146 301.53 li
654.311 298.957 li
654.475 296.398 li
654.64 293.857 li
654.804 291.332 li
654.969 288.823 li
655.133 286.331 li
655.298 283.856 li
655.462 281.398 li
655.627 278.959 li
655.792 276.538 li
655.956 274.134 li
656.121 271.749 li
656.285 269.383 li
656.45 267.037 li
656.614 264.709 li
656.779 262.401 li
656.943 260.113 li
657.108 257.845 li
657.272 255.598 li
657.437 253.371 li
657.602 251.164 li
657.766 248.979 li
657.931 246.815 li
658.095 244.673 li
658.26 242.552 li
658.424 240.454 li
658.589 238.377 li
658.753 236.323 li
658.918 234.291 li
659.083 232.282 li
659.247 230.296 li
659.412 228.333 li
659.576 226.394 li
659.741 224.478 li
659.905 222.585 li
660.07 220.716 li
660.234 218.872 li
660.399 217.051 li
660.563 215.255 li
660.728 213.483 li
660.893 211.736 li
661.057 210.014 li
661.222 208.317 li
661.386 206.645 li
661.551 204.997 li
661.715 203.375 li
661.88 201.778 li
662.044 200.208 li
662.209 198.662 li
662.374 197.142 li
662.538 195.648 li
662.703 194.18 li
662.867 192.738 li
663.032 191.322 li
663.196 189.932 li
663.361 188.568 li
663.525 187.231 li
663.69 185.92 li
663.854 184.635 li
664.019 183.377 li
664.184 182.146 li
664.348 180.94 li
664.513 179.762 li
664.677 178.61 li
664.842 177.485 li
665.006 176.386 li
665.171 175.314 li
665.335 174.27 li
665.5 173.251 li
665.665 172.259 li
665.829 171.294 li
665.994 170.356 li
666.158 169.444 li
666.323 168.56 li
666.487 167.701 li
666.652 166.87 li
666.816 166.064 li
666.981 165.286 li
667.146 164.534 li
667.31 163.809 li
667.475 163.11 li
667.639 162.437 li
667.804 161.791 li
668.133 160.577 li
668.462 159.467 li
668.791 158.461 li
669.12 157.559 li
669.449 156.758 li
669.778 156.06 li
670.107 155.461 li
670.437 154.962 li
670.766 154.562 li
671.095 154.258 li
671.424 154.051 li
671.753 153.938 li
672.082 153.919 li
672.411 153.992 li
672.74 154.156 li
673.069 154.409 li
673.398 154.749 li
673.728 155.176 li
674.057 155.686 li
674.386 156.279 li
674.715 156.953 li
675.044 157.706 li
675.373 158.536 li
675.702 159.441 li
676.031 160.42 li
676.36 161.47 li
676.689 162.589 li
677.019 163.775 li
677.348 165.026 li
677.512 165.676 li
677.677 166.34 li
677.841 167.021 li
678.006 167.716 li
678.17 168.425 li
678.335 169.149 li
678.5 169.888 li
678.664 170.64 li
678.829 171.405 li
678.993 172.184 li
679.158 172.976 li
679.322 173.78 li
679.487 174.597 li
679.651 175.426 li
679.816 176.267 li
679.98 177.119 li
680.145 177.983 li
680.31 178.858 li
680.474 179.743 li
680.639 180.639 li
680.803 181.545 li
680.968 182.461 li
681.132 183.386 li
681.297 184.321 li
681.461 185.265 li
681.626 186.217 li
681.791 187.177 li
681.955 188.146 li
682.12 189.122 li
682.284 190.106 li
682.449 191.097 li
682.613 192.095 li
682.778 193.1 li
682.942 194.111 li
683.107 195.128 li
683.271 196.151 li
683.436 197.179 li
683.601 198.212 li
683.765 199.251 li
683.93 200.294 li
684.094 201.341 li
684.259 202.392 li
684.423 203.447 li
684.588 204.505 li
684.752 205.567 li
684.917 206.631 li
685.082 207.699 li
685.246 208.768 li
685.411 209.839 li
685.575 210.913 li
685.74 211.987 li
685.904 213.063 li
686.069 214.141 li
686.233 215.218 li
686.398 216.296 li
686.563 217.374 li
686.727 218.452 li
686.892 219.53 li
687.056 220.607 li
687.221 221.683 li
687.385 222.758 li
687.55 223.832 li
687.714 224.904 li
687.879 225.974 li
688.043 227.042 li
688.208 228.107 li
688.373 229.17 li
688.537 230.23 li
688.702 231.287 li
688.866 232.34 li
689.031 233.39 li
689.195 234.436 li
689.36 235.478 li
689.524 236.515 li
689.689 237.548 li
689.854 238.577 li
690.018 239.6 li
690.183 240.618 li
690.347 241.631 li
690.512 242.638 li
690.676 243.64 li
690.841 244.635 li
691.005 245.624 li
691.17 246.607 li
691.334 247.583 li
691.499 248.553 li
691.664 249.515 li
691.828 250.471 li
691.993 251.418 li
692.157 252.359 li
692.322 253.292 li
692.486 254.217 li
692.651 255.133 li
692.815 256.042 li
692.98 256.942 li
693.145 257.834 li
693.309 258.717 li
693.474 259.592 li
693.638 260.457 li
693.803 261.313 li
693.967 262.16 li
694.132 262.998 li
694.296 263.826 li
694.461 264.644 li
694.625 265.453 li
694.79 266.251 li
694.955 267.04 li
695.119 267.818 li
695.284 268.587 li
695.448 269.345 li
695.613 270.092 li
695.777 270.829 li
695.942 271.556 li
696.106 272.271 li
696.271 272.976 li
696.436 273.669 li
696.6 274.353 li
696.765 275.024 li
696.929 275.685 li
697.094 276.334 li
697.423 277.599 li
697.752 278.818 li
698.081 279.991 li
698.41 281.118 li
698.739 282.198 li
699.068 283.231 li
699.397 284.218 li
699.727 285.157 li
700.056 286.048 li
700.385 286.893 li
700.714 287.69 li
701.043 288.44 li
701.372 289.144 li
701.701 289.8 li
702.03 290.41 li
702.359 290.975 li
702.688 291.493 li
703.018 291.966 li
703.347 292.395 li
703.676 292.779 li
704.005 293.121 li
704.334 293.418 li
704.663 293.674 li
704.992 293.889 li
705.321 294.063 li
705.65 294.197 li
705.979 294.292 li
706.309 294.349 li
706.638 294.369 li
706.967 294.353 li
707.296 294.302 li
707.625 294.217 li
707.954 294.099 li
708.283 293.949 li
708.612 293.77 li
708.941 293.56 li
709.271 293.323 li
709.6 293.059 li
709.929 292.769 li
710.258 292.455 li
710.587 292.118 li
710.916 291.759 li
711.245 291.38 li
711.574 290.982 li
711.903 290.567 li
712.232 290.136 li
712.562 289.69 li
712.891 289.231 li
713.22 288.76 li
713.549 288.279 li
713.878 287.788 li
714.207 287.291 li
714.536 286.787 li
714.865 286.278 li
715.194 285.767 li
715.523 285.253 li
715.853 284.739 li
716.182 284.226 li
716.511 283.716 li
716.84 283.209 li
717.169 282.708 li
717.498 282.213 li
717.827 281.727 li
718.156 281.249 li
718.485 280.782 li
718.814 280.327 li
719.144 279.885 li
719.473 279.457 li
719.802 279.044 li
720.131 278.649 li
720.46 278.271 li
720.789 277.913 li
721.118 277.574 li
721.447 277.256 li
721.776 276.961 li
722.105 276.689 li
722.435 276.441 li
722.764 276.218 li
723.093 276.021 li
723.422 275.851 li
723.751 275.708 li
724.08 275.594 li
724.409 275.509 li
724.738 275.454 li
725.067 275.429 li
725.396 275.435 li
725.726 275.473 li
726.055 275.543 li
726.384 275.645 li
726.713 275.78 li
727.042 275.949 li
727.371 276.152 li
727.7 276.389 li
728.029 276.659 li
728.358 276.964 li
728.688 277.304 li
729.017 277.679 li
729.346 278.088 li
729.675 278.532 li
730.004 279.011 li
730.333 279.525 li
730.662 280.073 li
730.991 280.656 li
731.32 281.272 li
731.649 281.923 li
731.979 282.607 li
732.308 283.325 li
732.637 284.076 li
732.966 284.858 li
733.295 285.674 li
733.624 286.521 li
733.953 287.398 li
734.282 288.306 li
734.611 289.244 li
734.94 290.21 li
735.27 291.206 li
735.599 292.229 li
735.928 293.279 li
736.257 294.354 li
736.586 295.456 li
736.915 296.582 li
737.244 297.731 li
737.573 298.903 li
737.902 300.097 li
738.231 301.311 li
738.561 302.545 li
738.89 303.798 li
739.219 305.068 li
739.548 306.355 li
739.712 307.005 li
739.877 307.658 li
740.042 308.315 li
740.206 308.975 li
740.371 309.639 li
740.535 310.305 li
740.7 310.975 li
740.864 311.647 li
741.029 312.323 li
741.193 313.001 li
741.358 313.682 li
741.522 314.364 li
741.687 315.05 li
741.852 315.736 li
742.016 316.426 li
742.181 317.116 li
742.345 317.809 li
742.51 318.502 li
742.674 319.197 li
742.839 319.893 li
743.003 320.59 li
743.168 321.288 li
743.333 321.987 li
743.497 322.686 li
743.662 323.386 li
743.826 324.085 li
743.991 324.786 li
744.155 325.485 li
744.32 326.185 li
744.484 326.885 li
744.649 327.583 li
744.813 328.281 li
744.978 328.979 li
745.143 329.675 li
745.307 330.371 li
745.472 331.065 li
745.636 331.758 li
745.801 332.449 li
745.965 333.138 li
746.13 333.826 li
746.294 334.512 li
746.459 335.195 li
746.624 335.877 li
746.788 336.556 li
746.953 337.232 li
747.117 337.906 li
747.282 338.577 li
747.446 339.245 li
747.611 339.91 li
747.775 340.572 li
747.94 341.23 li
748.104 341.885 li
748.269 342.537 li
748.434 343.184 li
748.763 344.468 li
749.092 345.734 li
749.421 346.984 li
749.75 348.215 li
750.079 349.427 li
750.408 350.618 li
750.737 351.788 li
751.066 352.936 li
751.396 354.061 li
751.725 355.162 li
752.054 356.239 li
752.383 357.291 li
752.712 358.317 li
753.041 359.316 li
753.37 360.289 li
753.699 361.233 li
754.028 362.149 li
754.357 363.037 li
754.687 363.895 li
755.016 364.724 li
755.345 365.521 li
755.674 366.29 li
756.003 367.026 li
756.332 367.733 li
756.661 368.408 li
756.99 369.051 li
757.319 369.663 li
757.648 370.243 li
757.978 370.791 li
758.307 371.307 li
758.636 371.792 li
758.965 372.245 li
759.294 372.667 li
759.623 373.057 li
759.952 373.416 li
760.281 373.743 li
760.61 374.041 li
760.939 374.308 li
761.269 374.544 li
761.598 374.751 li
761.927 374.93 li
762.256 375.079 li
762.585 375.2 li
762.914 375.294 li
763.243 375.36 li
763.572 375.401 li
763.901 375.416 li
764.23 375.405 li
764.56 375.371 li
764.889 375.313 li
765.218 375.233 li
765.547 375.131 li
765.876 375.008 li
766.205 374.865 li
766.534 374.703 li
766.863 374.522 li
767.192 374.326 li
767.521 374.112 li
767.851 373.884 li
768.18 373.643 li
768.509 373.388 li
768.838 373.121 li
769.167 372.844 li
769.496 372.557 li
769.825 372.262 li
770.154 371.96 li
770.483 371.652 li
770.813 371.339 li
771.142 371.023 li
771.471 370.704 li
771.8 370.385 li
772.129 370.065 li
772.458 369.747 li
772.787 369.432 li
773.116 369.12 li
773.445 368.813 li
773.774 368.513 li
774.104 368.22 li
774.433 367.937 li
774.762 367.663 li
775.091 367.4 li
775.42 367.15 li
775.749 366.914 li
776.078 366.692 li
776.407 366.487 li
776.736 366.298 li
777.065 366.128 li
777.395 365.978 li
777.724 365.847 li
778.053 365.738 li
778.382 365.652 li
778.711 365.589 li
779.04 365.551 li
779.369 365.539 li
779.698 365.553 li
780.027 365.594 li
780.356 365.664 li
780.686 365.763 li
781.015 365.892 li
781.344 366.051 li
781.673 366.242 li
782.002 366.465 li
782.331 366.721 li
782.66 367.011 li
782.989 367.334 li
783.318 367.691 li
783.647 368.084 li
783.977 368.513 li
784.306 368.977 li
784.635 369.478 li
784.964 370.015 li
785.293 370.588 li
785.622 371.2 li
785.951 371.848 li
786.28 372.534 li
786.609 373.257 li
786.938 374.017 li
787.268 374.815 li
787.597 375.651 li
787.926 376.524 li
788.255 377.434 li
788.584 378.381 li
788.913 379.364 li
789.242 380.384 li
789.571 381.44 li
789.9 382.531 li
790.229 383.658 li
790.559 384.819 li
790.888 386.015 li
791.217 387.243 li
791.546 388.504 li
791.71 389.147 li
791.875 389.798 li
792.039 390.457 li
792.204 391.123 li
792.368 391.797 li
792.533 392.478 li
792.697 393.167 li
792.862 393.863 li
793.026 394.567 li
793.191 395.277 li
793.355 395.995 li
793.521 396.719 li
793.685 397.45 li
793.85 398.188 li
794.014 398.932 li
794.179 399.682 li
794.343 400.438 li
794.508 401.201 li
794.672 401.97 li
794.837 402.744 li
795.001 403.524 li
795.166 404.31 li
795.33 405.1 li
795.495 405.896 li
795.66 406.697 li
795.824 407.503 li
795.989 408.314 li
796.153 409.129 li
796.318 409.949 li
796.482 410.772 li
796.647 411.601 li
796.812 412.432 li
796.977 413.268 li
797.141 414.107 li
797.306 414.949 li
797.47 415.795 li
797.635 416.644 li
797.799 417.495 li
797.964 418.35 li
798.128 419.206 li
798.293 420.065 li
798.457 420.926 li
798.622 421.789 li
798.786 422.654 li
798.951 423.52 li
799.115 424.388 li
799.28 425.256 li
799.444 426.126 li
799.608 426.996 li
799.773 427.867 li
799.938 428.738 li
800.103 429.609 li
800.267 430.481 li
800.432 431.353 li
800.597 432.223 li
800.761 433.093 li
800.925 433.962 li
801.09 434.83 li
801.255 435.696 li
801.419 436.562 li
801.583 437.425 li
801.748 438.287 li
801.913 439.146 li
802.077 440.003 li
802.241 440.857 li
802.406 441.71 li
802.571 442.559 li
802.735 443.404 li
802.899 444.246 li
803.064 445.085 li
803.229 445.92 li
803.394 446.75 li
803.558 447.576 li
803.723 448.398 li
803.888 449.216 li
804.052 450.028 li
804.216 450.836 li
804.381 451.638 li
804.546 452.435 li
804.71 453.225 li
804.874 454.01 li
805.039 454.788 li
805.204 455.561 li
805.368 456.326 li
805.532 457.085 li
805.697 457.837 li
805.862 458.581 li
806.026 459.318 li
806.19 460.048 li
806.355 460.77 li
806.521 461.483 li
806.685 462.189 li
806.849 462.887 li
807.014 463.575 li
807.179 464.255 li
807.343 464.925 li
807.507 465.587 li
807.672 466.238 li
808.001 467.514 li
808.33 468.749 li
808.659 469.942 li
808.988 471.094 li
809.317 472.199 li
809.646 473.261 li
809.976 474.273 li
810.305 475.239 li
810.634 476.154 li
810.963 477.019 li
811.292 477.831 li
811.621 478.59 li
811.95 479.294 li
812.279 479.942 li
812.608 480.533 li
812.938 481.067 li
813.267 481.543 li
813.596 481.959 li
813.925 482.314 li
814.254 482.608 li
814.583 482.841 li
814.912 483.01 li
815.241 483.116 li
815.57 483.158 li
815.899 483.137 li
816.229 483.05 li
816.558 482.897 li
816.887 482.68 li
817.216 482.396 li
817.545 482.045 li
817.874 481.629 li
818.203 481.146 li
818.532 480.597 li
818.861 479.981 li
819.19 479.299 li
819.52 478.551 li
819.849 477.736 li
820.178 476.856 li
820.507 475.911 li
820.836 474.9 li
821.165 473.826 li
821.494 472.687 li
821.823 471.484 li
822.152 470.219 li
822.317 469.563 li
822.481 468.892 li
822.646 468.205 li
822.811 467.503 li
822.976 466.786 li
823.14 466.055 li
823.304 465.308 li
823.469 464.546 li
823.634 463.77 li
823.798 462.979 li
823.962 462.174 li
824.127 461.354 li
824.292 460.521 li
824.456 459.674 li
824.62 458.813 li
824.785 457.938 li
824.95 457.049 li
825.114 456.147 li
825.278 455.232 li
825.443 454.305 li
825.608 453.363 li
825.772 452.409 li
825.937 451.443 li
826.102 450.465 li
826.267 449.475 li
826.431 448.472 li
826.595 447.457 li
826.76 446.431 li
826.925 445.394 li
827.089 444.345 li
827.253 443.285 li
827.418 442.214 li
827.583 441.133 li
827.747 440.041 li
827.911 438.939 li
828.076 437.827 li
828.241 436.706 li
828.405 435.574 li
828.569 434.435 li
828.734 433.284 li
828.899 432.126 li
829.063 430.959 li
829.228 429.783 li
829.393 428.6 li
829.558 427.408 li
829.722 426.209 li
829.886 425.002 li
830.051 423.788 li
830.216 422.567 li
830.38 421.34 li
830.544 420.106 li
830.709 418.866 li
830.874 417.619 li
831.038 416.368 li
831.202 415.11 li
831.367 413.848 li
831.532 412.581 li
831.696 411.309 li
831.86 410.032 li
832.025 408.752 li
832.19 407.468 li
832.354 406.18 li
832.519 404.889 li
832.684 403.595 li
832.849 402.298 li
833.013 401 li
833.177 399.698 li
833.342 398.395 li
833.507 397.09 li
833.671 395.784 li
833.835 394.477 li
834 393.169 li
834.164 391.861 li
834.329 390.553 li
834.493 389.244 li
834.658 387.936 li
834.822 386.629 li
834.987 385.323 li
835.151 384.018 li
835.316 382.714 li
835.48 381.413 li
835.646 380.113 li
835.81 378.816 li
835.975 377.522 li
836.139 376.23 li
836.304 374.943 li
836.468 373.658 li
836.633 372.378 li
836.797 371.102 li
836.962 369.83 li
837.126 368.563 li
837.291 367.301 li
837.455 366.044 li
837.62 364.793 li
837.785 363.548 li
837.949 362.309 li
838.114 361.076 li
838.278 359.851 li
838.443 358.632 li
838.607 357.42 li
838.772 356.217 li
838.937 355.021 li
839.102 353.833 li
839.266 352.654 li
839.431 351.483 li
839.595 350.322 li
839.76 349.17 li
839.924 348.027 li
840.089 346.894 li
840.253 345.771 li
840.418 344.659 li
840.582 343.558 li
840.747 342.466 li
840.911 341.387 li
841.076 340.318 li
841.24 339.262 li
841.405 338.217 li
841.569 337.185 li
841.733 336.165 li
841.898 335.157 li
842.063 334.163 li
842.228 333.182 li
842.392 332.214 li
842.557 331.26 li
842.722 330.319 li
842.886 329.394 li
843.05 328.481 li
843.215 327.584 li
843.38 326.702 li
843.544 325.835 li
843.708 324.982 li
843.873 324.146 li
844.038 323.325 li
844.202 322.521 li
844.366 321.731 li
844.531 320.959 li
844.696 320.203 li
844.86 319.464 li
845.024 318.742 li
845.189 318.036 li
845.354 317.349 li
845.519 316.678 li
845.848 315.391 li
846.177 314.175 li
846.506 313.033 li
846.835 311.965 li
847.164 310.974 li
847.493 310.06 li
847.822 309.224 li
848.151 308.467 li
848.48 307.791 li
848.81 307.195 li
849.139 306.682 li
849.468 306.251 li
849.797 305.904 li
850.126 305.641 li
850.455 305.462 li
850.784 305.369 li
851.113 305.361 li
851.442 305.439 li
851.771 305.603 li
852.101 305.854 li
852.43 306.19 li
852.759 306.614 li
853.088 307.124 li
853.417 307.72 li
853.746 308.402 li
854.075 309.17 li
854.404 310.023 li
854.733 310.962 li
855.063 311.986 li
855.392 313.093 li
855.721 314.285 li
856.05 315.558 li
856.214 316.226 li
856.379 316.914 li
856.543 317.623 li
856.708 318.351 li
856.872 319.1 li
857.037 319.868 li
857.201 320.656 li
857.366 321.464 li
857.53 322.292 li
857.695 323.139 li
857.859 324.005 li
858.024 324.89 li
858.188 325.794 li
858.354 326.718 li
858.518 327.659 li
858.683 328.62 li
858.848 329.598 li
859.012 330.595 li
859.177 331.609 li
859.341 332.642 li
859.506 333.691 li
859.67 334.759 li
859.835 335.843 li
859.999 336.945 li
860.164 338.063 li
860.328 339.198 li
860.493 340.35 li
860.657 341.517 li
860.822 342.701 li
860.986 343.9 li
861.151 345.115 li
861.315 346.345 li
861.48 347.59 li
861.645 348.851 li
861.81 350.125 li
861.974 351.415 li
862.139 352.718 li
862.303 354.035 li
862.468 355.366 li
862.632 356.71 li
862.796 358.067 li
862.961 359.438 li
863.126 360.82 li
863.29 362.215 li
863.454 363.623 li
863.619 365.042 li
863.784 366.472 li
863.948 367.914 li
864.112 369.367 li
864.277 370.831 li
864.442 372.305 li
864.606 373.789 li
864.771 375.283 li
864.936 376.787 li
865.101 378.299 li
865.265 379.821 li
865.429 381.352 li
865.594 382.891 li
865.759 384.438 li
865.923 385.993 li
866.087 387.556 li
866.252 389.125 li
866.417 390.702 li
866.581 392.286 li
866.745 393.875 li
866.91 395.471 li
867.075 397.072 li
867.239 398.678 li
867.403 400.29 li
867.568 401.906 li
867.733 403.527 li
867.897 405.152 li
868.062 406.78 li
868.227 408.413 li
868.392 410.048 li
868.556 411.686 li
868.72 413.326 li
868.885 414.969 li
869.05 416.614 li
869.214 418.26 li
869.378 419.907 li
869.543 421.556 li
869.708 423.205 li
869.872 424.854 li
870.036 426.503 li
870.201 428.151 li
870.366 429.799 li
870.53 431.446 li
870.694 433.092 li
870.859 434.735 li
871.024 436.377 li
871.188 438.017 li
871.353 439.653 li
871.518 441.287 li
871.683 442.918 li
871.847 444.545 li
872.011 446.168 li
872.176 447.787 li
872.341 449.401 li
872.505 451.011 li
872.669 452.615 li
872.834 454.214 li
872.999 455.808 li
873.163 457.394 li
873.327 458.975 li
873.492 460.548 li
873.657 462.115 li
873.821 463.674 li
873.985 465.226 li
874.15 466.77 li
874.315 468.306 li
874.479 469.832 li
874.644 471.351 li
874.809 472.859 li
874.974 474.359 li
875.138 475.849 li
875.302 477.329 li
875.467 478.798 li
875.632 480.258 li
875.796 481.706 li
875.96 483.143 li
876.125 484.568 li
876.289 485.982 li
876.454 487.385 li
876.618 488.774 li
876.783 490.151 li
876.947 491.517 li
877.112 492.868 li
877.276 494.207 li
877.441 495.531 li
877.605 496.843 li
877.771 498.14 li
877.935 499.423 li
878.1 500.691 li
878.264 501.945 li
878.429 503.184 li
878.593 504.408 li
878.758 505.616 li
878.922 506.809 li
879.087 507.985 li
879.251 509.146 li
879.416 510.29 li
879.58 511.418 li
879.745 512.529 li
879.91 513.624 li
880.074 514.701 li
880.239 515.761 li
880.403 516.803 li
880.568 517.828 li
880.732 518.835 li
880.897 519.824 li
881.062 520.794 li
881.227 521.747 li
881.391 522.681 li
881.556 523.596 li
881.72 524.491 li
881.885 525.369 li
882.049 526.227 li
882.214 527.065 li
882.378 527.885 li
882.543 528.684 li
882.707 529.464 li
882.872 530.224 li
883.036 530.964 li
883.201 531.684 li
883.365 532.384 li
883.53 533.063 li
883.694 533.722 li
884.023 534.978 li
884.353 536.151 li
884.682 537.24 li
885.011 538.246 li
885.34 539.167 li
885.669 540.002 li
885.998 540.752 li
886.327 541.416 li
886.656 541.993 li
886.985 542.484 li
887.314 542.89 li
887.644 543.207 li
887.973 543.439 li
888.302 543.585 li
888.631 543.645 li
888.96 543.618 li
889.289 543.507 li
889.618 543.311 li
889.947 543.029 li
890.276 542.664 li
890.605 542.215 li
890.935 541.685 li
891.264 541.071 li
891.593 540.378 li
891.922 539.604 li
892.251 538.751 li
892.58 537.82 li
892.909 536.813 li
893.238 535.729 li
893.567 534.57 li
893.896 533.34 li
894.062 532.697 li
894.226 532.037 li
894.39 531.358 li
894.555 530.663 li
894.72 529.951 li
894.884 529.221 li
895.048 528.475 li
895.213 527.712 li
895.378 526.933 li
895.542 526.137 li
895.706 525.324 li
895.871 524.497 li
896.036 523.654 li
896.2 522.795 li
896.364 521.922 li
896.529 521.033 li
896.694 520.129 li
896.858 519.211 li
897.022 518.279 li
897.188 517.333 li
897.352 516.373 li
897.517 515.399 li
897.681 514.412 li
897.846 513.412 li
898.01 512.399 li
898.175 511.374 li
898.339 510.336 li
898.504 509.286 li
898.668 508.225 li
898.833 507.151 li
898.997 506.067 li
899.162 504.972 li
899.326 503.865 li
899.491 502.748 li
899.655 501.621 li
899.82 500.484 li
899.984 499.338 li
900.149 498.182 li
900.313 497.016 li
900.479 495.842 li
900.643 494.658 li
900.808 493.468 li
900.973 492.269 li
901.137 491.062 li
901.302 489.847 li
901.466 488.625 li
901.631 487.396 li
901.795 486.161 li
901.96 484.919 li
902.124 483.672 li
902.289 482.418 li
902.453 481.159 li
902.618 479.895 li
902.782 478.625 li
902.947 477.352 li
903.111 476.073 li
903.276 474.791 li
903.44 473.506 li
903.605 472.216 li
903.77 470.924 li
903.935 469.628 li
904.099 468.33 li
904.264 467.029 li
904.428 465.728 li
904.593 464.423 li
904.757 463.117 li
904.921 461.811 li
905.086 460.503 li
905.251 459.195 li
905.415 457.887 li
905.579 456.578 li
905.744 455.27 li
905.909 453.963 li
906.073 452.656 li
906.237 451.351 li
906.402 450.046 li
906.567 448.744 li
906.731 447.443 li
906.896 446.146 li
907.061 444.85 li
907.226 443.557 li
907.39 442.268 li
907.554 440.981 li
907.719 439.698 li
907.884 438.42 li
908.048 437.146 li
908.212 435.875 li
908.377 434.61 li
908.542 433.35 li
908.706 432.095 li
908.87 430.846 li
909.035 429.602 li
909.2 428.364 li
909.364 427.133 li
909.528 425.908 li
909.693 424.69 li
909.858 423.479 li
910.022 422.276 li
910.187 421.08 li
910.352 419.892 li
910.517 418.711 li
910.681 417.54 li
910.845 416.376 li
911.01 415.221 li
911.175 414.076 li
911.339 412.939 li
911.503 411.812 li
911.668 410.695 li
911.833 409.587 li
911.997 408.49 li
912.161 407.402 li
912.326 406.326 li
912.491 405.26 li
912.655 404.205 li
912.819 403.161 li
912.984 402.128 li
913.149 401.106 li
913.313 400.097 li
913.478 399.1 li
913.643 398.114 li
913.808 397.141 li
913.972 396.18 li
914.136 395.232 li
914.301 394.296 li
914.466 393.374 li
914.63 392.464 li
914.794 391.568 li
914.959 390.686 li
915.124 389.816 li
915.288 388.961 li
915.452 388.12 li
915.617 387.292 li
915.782 386.479 li
915.946 385.68 li
916.11 384.896 li
916.275 384.125 li
916.44 383.371 li
916.604 382.63 li
916.769 381.904 li
916.934 381.194 li
917.099 380.499 li
917.263 379.818 li
917.427 379.154 li
917.592 378.504 li
917.921 377.253 li
918.25 376.064 li
918.579 374.938 li
918.908 373.877 li
919.237 372.881 li
919.566 371.949 li
919.896 371.083 li
920.225 370.283 li
920.554 369.549 li
920.883 368.881 li
921.212 368.28 li
921.541 367.745 li
921.87 367.276 li
922.199 366.874 li
922.528 366.538 li
922.857 366.269 li
923.187 366.064 li
923.516 365.926 li
923.845 365.854 li
924.174 365.845 li
924.503 365.901 li
924.832 366.021 li
925.161 366.204 li
925.49 366.45 li
925.819 366.757 li
926.148 367.125 li
926.478 367.554 li
926.807 368.042 li
927.136 368.588 li
927.465 369.192 li
927.794 369.853 li
928.123 370.568 li
928.452 371.339 li
928.781 372.162 li
929.11 373.038 li
929.439 373.964 li
929.769 374.939 li
930.098 375.963 li
930.427 377.034 li
930.756 378.15 li
931.085 379.31 li
931.414 380.513 li
931.743 381.756 li
932.072 383.04 li
932.237 383.696 li
932.401 384.361 li
932.565 385.036 li
932.73 385.719 li
932.896 386.412 li
933.06 387.112 li
933.224 387.821 li
933.389 388.539 li
933.554 389.264 li
933.718 389.997 li
933.882 390.737 li
934.047 391.485 li
934.212 392.24 li
934.376 393.001 li
934.54 393.77 li
934.705 394.545 li
934.87 395.326 li
935.034 396.113 li
935.198 396.907 li
935.363 397.706 li
935.528 398.51 li
935.692 399.319 li
935.856 400.134 li
936.021 400.953 li
936.187 401.777 li
936.351 402.605 li
936.515 403.438 li
936.68 404.274 li
936.845 405.114 li
937.009 405.958 li
937.173 406.805 li
937.338 407.655 li
937.503 408.508 li
937.667 409.364 li
937.831 410.222 li
937.996 411.083 li
938.161 411.945 li
938.325 412.809 li
938.489 413.675 li
938.654 414.542 li
938.819 415.411 li
938.983 416.28 li
939.147 417.15 li
939.313 418.021 li
939.477 418.893 li
939.642 419.764 li
939.806 420.635 li
939.971 421.506 li
940.135 422.377 li
940.3 423.247 li
940.464 424.116 li
940.629 424.984 li
940.793 425.852 li
940.958 426.717 li
941.122 427.581 li
941.287 428.443 li
941.451 429.304 li
941.616 430.161 li
941.78 431.018 li
941.945 431.87 li
942.109 432.721 li
942.274 433.568 li
942.438 434.412 li
942.604 435.253 li
942.768 436.091 li
942.933 436.925 li
943.098 437.755 li
943.262 438.581 li
943.427 439.403 li
943.591 440.221 li
943.756 441.034 li
943.92 441.843 li
944.085 442.646 li
944.249 443.445 li
944.414 444.239 li
944.578 445.028 li
944.743 445.812 li
944.907 446.589 li
945.072 447.36 li
945.236 448.127 li
945.401 448.887 li
945.565 449.641 li
945.73 450.389 li
945.895 451.13 li
946.06 451.864 li
946.224 452.593 li
946.389 453.313 li
946.553 454.028 li
946.718 454.735 li
946.882 455.437 li
947.046 456.129 li
947.211 456.814 li
947.376 457.493 li
947.54 458.164 li
947.704 458.827 li
947.869 459.481 li
948.198 460.769 li
948.527 462.023 li
948.856 463.245 li
949.186 464.433 li
949.515 465.587 li
949.844 466.706 li
950.173 467.789 li
950.502 468.838 li
950.831 469.85 li
951.16 470.825 li
951.489 471.765 li
951.818 472.666 li
952.147 473.531 li
952.477 474.359 li
952.806 475.149 li
953.135 475.901 li
953.464 476.616 li
953.793 477.294 li
954.122 477.935 li
954.451 478.537 li
954.78 479.104 li
955.109 479.633 li
955.438 480.125 li
955.768 480.582 li
956.097 481.003 li
956.426 481.388 li
956.755 481.738 li
957.084 482.055 li
957.413 482.337 li
957.742 482.585 li
958.071 482.802 li
958.4 482.985 li
958.729 483.139 li
959.059 483.261 li
959.388 483.354 li
959.717 483.417 li
960.046 483.452 li
960.375 483.461 li
960.704 483.442 li
961.033 483.399 li
961.362 483.331 li
961.691 483.24 li
962.021 483.127 li
962.35 482.992 li
962.679 482.837 li
963.008 482.663 li
963.337 482.471 li
963.666 482.262 li
963.995 482.036 li
964.324 481.797 li
964.653 481.544 li
964.982 481.279 li
965.312 481.003 li
965.641 480.718 li
965.97 480.423 li
966.299 480.122 li
966.628 479.813 li
966.957 479.501 li
967.286 479.186 li
967.615 478.866 li
967.944 478.547 li
968.273 478.228 li
968.603 477.909 li
968.932 477.594 li
969.261 477.281 li
969.59 476.975 li
969.919 476.674 li
970.248 476.381 li
970.577 476.096 li
970.906 475.821 li
971.235 475.557 li
971.564 475.305 li
971.894 475.065 li
972.223 474.841 li
972.552 474.631 li
972.881 474.438 li
973.21 474.261 li
973.539 474.103 li
973.868 473.964 li
974.197 473.846 li
974.526 473.748 li
974.855 473.673 li
975.185 473.619 li
975.514 473.591 li
975.843 473.585 li
976.172 473.605 li
976.501 473.651 li
976.83 473.724 li
977.159 473.823 li
977.488 473.951 li
977.817 474.106 li
978.146 474.29 li
978.476 474.504 li
978.805 474.747 li
979.134 475.021 li
979.463 475.324 li
979.792 475.659 li
980.121 476.024 li
980.45 476.421 li
980.779 476.85 li
981.108 477.31 li
981.438 477.801 li
981.767 478.324 li
982.096 478.879 li
982.425 479.466 li
982.754 480.084 li
983.083 480.734 li
983.412 481.416 li
983.741 482.129 li
984.07 482.872 li
984.399 483.646 li
984.729 484.452 li
985.058 485.286 li
985.387 486.151 li
985.716 487.045 li
986.045 487.967 li
986.374 488.917 li
986.703 489.896 li
987.032 490.9 li
987.361 491.933 li
987.69 492.989 li
988.02 494.072 li
988.349 495.179 li
988.678 496.309 li
989.007 497.461 li
989.336 498.636 li
989.665 499.831 li
989.994 501.047 li
990.323 502.282 li
990.652 503.535 li
990.981 504.806 li
991.311 506.093 li
991.476 506.742 li
991.64 507.396 li
991.804 508.052 li
991.969 508.711 li
992.134 509.375 li
992.298 510.041 li
992.462 510.71 li
992.627 511.383 li
992.792 512.058 li
992.956 512.735 li
993.12 513.415 li
993.285 514.098 li
993.45 514.782 li
993.614 515.469 li
993.778 516.157 li
993.943 516.848 li
994.108 517.539 li
994.272 518.232 li
994.437 518.927 li
994.602 519.623 li
994.767 520.32 li
994.931 521.018 li
995.095 521.716 li
995.26 522.415 li
995.425 523.115 li
995.589 523.814 li
995.753 524.515 li
995.918 525.215 li
996.083 525.914 li
996.247 526.613 li
996.411 527.313 li
996.576 528.011 li
996.741 528.709 li
996.905 529.405 li
997.069 530.101 li
997.234 530.796 li
997.399 531.488 li
997.563 532.18 li
997.728 532.87 li
997.893 533.559 li
998.058 534.244 li
998.222 534.929 li
998.386 535.61 li
998.551 536.29 li
998.716 536.967 li
998.88 537.641 li
999.044 538.313 li
999.209 538.981 li
999.374 539.646 li
999.538 540.309 li
999.702 540.967 li
999.867 541.622 li
1000.03 542.274 li
1000.2 542.922 li
1000.53 544.205 li
1000.85 545.472 li
1001.18 546.721 li
1001.51 547.951 li
1001.84 549.161 li
1002.17 550.35 li
1002.5 551.518 li
1002.83 552.661 li
1003.16 553.782 li
1003.49 554.878 li
1003.82 555.948 li
1004.15 556.993 li
1004.47 558.01 li
1004.8 558.999 li
1005.13 559.96 li
1005.46 560.892 li
1005.79 561.793 li
1006.12 562.664 li
1006.45 563.504 li
1006.78 564.313 li
1007.11 565.088 li
1007.44 565.832 li
1007.77 566.542 li
1008.09 567.22 li
1008.42 567.862 li
1008.75 568.473 li
1009.08 569.048 li
1009.41 569.588 li
1009.74 570.095 li
1010.07 570.565 li
1010.4 571.002 li
1010.73 571.404 li
1011.06 571.771 li
1011.39 572.104 li
1011.71 572.401 li
1012.04 572.665 li
1012.37 572.895 li
1012.7 573.09 li
1013.03 573.251 li
1013.36 573.38 li
1013.69 573.475 li
1014.02 573.538 li
1014.35 573.569 li
1014.68 573.568 li
1015.01 573.537 li
1015.33 573.476 li
1015.66 573.384 li
1015.99 573.264 li
1016.32 573.115 li
1016.65 572.938 li
1016.98 572.736 li
1017.31 572.508 li
1017.64 572.255 li
1017.97 571.978 li
1018.3 571.678 li
1018.63 571.355 li
1018.96 571.013 li
1019.28 570.649 li
1019.61 570.268 li
1019.94 569.869 li
1020.27 569.453 li
1020.6 569.021 li
1020.93 568.577 li
1021.26 568.119 li
1021.59 567.649 li
1021.92 567.17 li
1022.25 566.682 li
1022.58 566.185 li
1022.9 565.683 li
1023.23 565.175 li
1023.56 564.664 li
1023.89 564.15 li
1024.22 563.637 li
1024.55 563.124 li
1024.88 562.612 li
1025.21 562.104 li
1025.54 561.603 li
1025.87 561.105 li
1026.2 560.617 li
1026.52 560.138 li
1026.85 559.67 li
1027.18 559.213 li
1027.51 558.771 li
1027.84 558.342 li
1028.17 557.931 li
1028.5 557.537 li
1028.83 557.162 li
1029.16 556.809 li
1029.49 556.477 li
1029.82 556.167 li
1030.14 555.883 li
1030.47 555.624 li
1030.8 555.393 li
1031.13 555.189 li
1031.46 555.016 li
1031.79 554.873 li
1032.12 554.762 li
1032.45 554.685 li
1032.78 554.641 li
1033.11 554.633 li
1033.44 554.66 li
1033.76 554.726 li
1034.09 554.829 li
1034.42 554.971 li
1034.75 555.153 li
1035.08 555.377 li
1035.41 555.642 li
1035.74 555.949 li
1036.07 556.299 li
1036.4 556.693 li
1036.73 557.131 li
1037.06 557.614 li
1037.38 558.143 li
1037.71 558.717 li
1038.04 559.337 li
1038.37 560.003 li
1038.7 560.717 li
1039.03 561.477 li
1039.36 562.284 li
1039.69 563.139 li
1040.02 564.041 li
1040.35 564.989 li
1040.68 565.986 li
1041 567.029 li
1041.33 568.119 li
1041.66 569.256 li
1041.99 570.439 li
1042.32 571.669 li
1042.65 572.943 li
1042.82 573.598 li
1042.98 574.263 li
1043.14 574.939 li
1043.31 575.627 li
1043.47 576.325 li
1043.64 577.034 li
1043.8 577.755 li
1043.97 578.485 li
1044.13 579.227 li
1044.3 579.979 li
1044.46 580.741 li
1044.63 581.514 li
1044.79 582.297 li
1044.95 583.09 li
1045.12 583.893 li
1045.28 584.706 li
1045.45 585.528 li
1045.61 586.36 li
1045.78 587.202 li
1045.94 588.053 li
1046.11 588.913 li
1046.27 589.782 li
1046.43 590.66 li
1046.6 591.547 li
1046.76 592.442 li
1046.93 593.347 li
1047.09 594.259 li
1047.26 595.179 li
1047.42 596.107 li
1047.59 597.043 li
1047.75 597.987 li
1047.92 598.938 li
1048.08 599.896 li
1048.25 600.862 li
1048.41 601.834 li
1048.57 602.813 li
1048.74 603.799 li
1048.9 604.791 li
1049.07 605.789 li
1049.23 606.793 li
1049.4 607.803 li
1049.56 608.817 li
1049.73 609.838 li
1049.89 610.863 li
1050.06 611.894 li
1050.22 612.929 li
1050.38 613.969 li
1050.55 615.012 li
1050.71 616.06 li
1050.88 617.111 li
1051.04 618.166 li
1051.21 619.225 li
1051.37 620.285 li
1051.54 621.35 li
1051.7 622.416 li
1051.87 623.484 li
1052.03 624.556 li
1052.19 625.628 li
1052.36 626.702 li
1052.52 627.778 li
1052.69 628.854 li
1052.85 629.932 li
1053.02 631.01 li
1053.18 632.088 li
1053.35 633.166 li
1053.51 634.244 li
1053.67 635.321 li
1053.84 636.397 li
1054 637.474 li
1054.17 638.548 li
1054.33 639.62 li
1054.5 640.69 li
1054.66 641.759 li
1054.83 642.825 li
1054.99 643.889 li
1055.16 644.949 li
1055.32 646.006 li
1055.49 647.059 li
1055.65 648.108 li
1055.81 649.154 li
1055.98 650.195 li
1056.14 651.231 li
1056.31 652.263 li
1056.47 653.288 li
1056.64 654.309 li
1056.8 655.323 li
1056.97 656.331 li
1057.13 657.333 li
1057.3 658.328 li
1057.46 659.316 li
1057.62 660.297 li
1057.79 661.271 li
1057.95 662.235 li
1058.12 663.192 li
1058.28 664.142 li
1058.45 665.081 li
1058.61 666.012 li
1058.78 666.933 li
1058.94 667.845 li
1059.11 668.746 li
1059.27 669.638 li
1059.43 670.519 li
1059.6 671.389 li
1059.76 672.247 li
1059.93 673.095 li
1060.09 673.931 li
1060.26 674.755 li
1060.42 675.566 li
1060.59 676.365 li
1060.75 677.151 li
1060.92 677.925 li
1061.08 678.685 li
1061.25 679.431 li
1061.41 680.163 li
1061.57 680.881 li
1061.74 681.584 li
1061.9 682.272 li
1062.07 682.946 li
1062.23 683.604 li
1062.4 684.247 li
1062.73 685.485 li
1063.05 686.657 li
1063.38 687.762 li
1063.71 688.796 li
1064.04 689.759 li
1064.37 690.648 li
1064.7 691.462 li
1065.03 692.198 li
1065.36 692.854 li
1065.69 693.431 li
1066.02 693.923 li
1066.35 694.331 li
1066.67 694.652 li
1067 694.887 li
1067.33 695.031 li
1067.66 695.084 li
1067.99 695.046 li
1068.32 694.913 li
1068.65 694.686 li
1068.98 694.361 li
1069.31 693.939 li
1069.64 693.419 li
1069.97 692.799 li
1070.29 692.078 li
1070.62 691.256 li
1070.95 690.331 li
1071.28 689.304 li
1071.61 688.172 li
1071.94 686.936 li
1072.11 686.277 li
1072.27 685.594 li
1072.43 684.884 li
1072.6 684.146 li
1072.76 683.384 li
1072.93 682.594 li
1073.09 681.777 li
1073.26 680.935 li
1073.42 680.064 li
1073.59 679.168 li
1073.75 678.245 li
1073.92 677.295 li
1074.08 676.319 li
1074.24 675.315 li
1074.41 674.286 li
1074.57 673.229 li
1074.74 672.146 li
1074.9 671.036 li
1075.07 669.899 li
1075.23 668.736 li
1075.4 667.546 li
1075.56 666.33 li
1075.73 665.087 li
1075.89 663.817 li
1076.05 662.521 li
1076.22 661.199 li
1076.38 659.851 li
1076.55 658.476 li
1076.71 657.074 li
1076.88 655.646 li
1077.04 654.193 li
1077.21 652.715 li
1077.37 651.209 li
1077.54 649.679 li
1077.7 648.122 li
1077.86 646.54 li
1078.03 644.933 li
1078.19 643.3 li
1078.36 641.642 li
1078.52 639.959 li
1078.69 638.25 li
1078.85 636.518 li
1079.02 634.76 li
1079.18 632.978 li
1079.34 631.171 li
1079.51 629.34 li
1079.67 627.485 li
1079.84 625.606 li
1080 623.704 li
1080.17 621.777 li
1080.33 619.828 li
1080.5 617.855 li
1080.66 615.859 li
1080.83 613.841 li
1080.99 611.799 li
1081.16 609.735 li
1081.32 607.649 li
1081.48 605.541 li
1081.65 603.411 li
1081.81 601.26 li
1081.98 599.087 li
1082.14 596.893 li
1082.31 594.677 li
1082.47 592.441 li
1082.64 590.185 li
1082.8 587.908 li
1082.96 585.611 li
1083.13 583.296 li
1083.29 580.96 li
1083.46 578.604 li
1083.62 576.23 li
1083.79 573.838 li
1083.95 571.427 li
1084.12 568.997 li
1084.28 566.55 li
1084.45 564.085 li
1084.61 561.604 li
1084.78 559.104 li
1084.94 556.588 li
1085.1 554.056 li
1085.27 551.507 li
1085.43 548.942 li
1085.6 546.362 li
1085.76 543.767 li
1085.93 541.156 li
1086.09 538.531 li
1086.26 535.893 li
1086.42 533.239 li
1086.58 530.572 li
1086.75 527.892 li
1086.91 525.198 li
1087.08 522.492 li
1087.24 519.773 li
1087.41 517.043 li
1087.57 514.301 li
1087.74 511.548 li
1087.9 508.783 li
1088.07 506.008 li
1088.23 503.222 li
1088.4 500.426 li
1088.56 497.621 li
1088.72 494.806 li
1088.89 491.982 li
1089.05 489.15 li
1089.22 486.31 li
1089.38 483.462 li
1089.55 480.605 li
1089.71 477.742 li
1089.88 474.873 li
1090.04 471.997 li
1090.21 469.114 li
1090.37 466.227 li
1090.54 463.333 li
1090.7 460.435 li
1090.86 457.531 li
1091.03 454.625 li
1091.19 451.714 li
1091.36 448.799 li
1091.52 445.882 li
1091.69 442.961 li
1091.85 440.038 li
1092.02 437.113 li
1092.18 434.188 li
1092.34 431.26 li
1092.51 428.331 li
1092.67 425.402 li
1092.84 422.474 li
1093 419.544 li
1093.17 416.617 li
1093.33 413.689 li
1093.5 410.764 li
1093.66 407.84 li
1093.83 404.918 li
1093.99 401.999 li
1094.16 399.082 li
1094.32 396.169 li
1094.48 393.259 li
1094.65 390.354 li
1094.81 387.453 li
1094.98 384.556 li
1095.14 381.665 li
1095.31 378.779 li
1095.47 375.899 li
1095.64 373.025 li
1095.8 370.158 li
1095.96 367.297 li
1096.13 364.444 li
1096.29 361.599 li
1096.46 358.762 li
1096.62 355.933 li
1096.79 353.113 li
1096.95 350.302 li
1097.12 347.5 li
1097.28 344.708 li
1097.45 341.926 li
1097.61 339.155 li
1097.78 336.395 li
1097.94 333.645 li
1098.1 330.907 li
1098.27 328.182 li
1098.43 325.468 li
1098.6 322.767 li
1098.76 320.078 li
1098.93 317.403 li
1099.09 314.741 li
1099.26 312.093 li
1099.42 309.459 li
1099.58 306.84 li
1099.75 304.235 li
1099.91 301.646 li
1100.08 299.072 li
1100.24 296.513 li
1100.41 293.971 li
1100.57 291.445 li
1100.74 288.935 li
1100.9 286.442 li
1101.07 283.967 li
1101.23 281.509 li
1101.4 279.068 li
1101.56 276.646 li
1101.72 274.242 li
1101.89 271.856 li
1102.05 269.489 li
1102.22 267.142 li
1102.38 264.813 li
1102.55 262.504 li
1102.71 260.215 li
1102.88 257.947 li
1103.04 255.698 li
1103.21 253.47 li
1103.37 251.263 li
1103.53 249.077 li
1103.7 246.912 li
1103.86 244.769 li
1104.03 242.647 li
1104.19 240.547 li
1104.36 238.47 li
1104.52 236.415 li
1104.69 234.382 li
1104.85 232.372 li
1105.01 230.385 li
1105.18 228.421 li
1105.34 226.48 li
1105.51 224.563 li
1105.67 222.669 li
1105.84 220.8 li
1106 218.954 li
1106.17 217.133 li
1106.33 215.335 li
1106.5 213.563 li
1106.66 211.814 li
1106.83 210.091 li
1106.99 208.393 li
1107.15 206.719 li
1107.32 205.071 li
1107.48 203.447 li
1107.65 201.85 li
1107.81 200.277 li
1107.98 198.731 li
1108.14 197.21 li
1108.31 195.715 li
1108.47 194.246 li
1108.63 192.802 li
1108.8 191.385 li
1108.96 189.994 li
1109.13 188.629 li
1109.29 187.291 li
1109.46 185.979 li
1109.62 184.692 li
1109.79 183.433 li
1109.95 182.2 li
1110.12 180.994 li
1110.28 179.814 li
1110.45 178.661 li
1110.61 177.535 li
1110.77 176.435 li
1110.94 175.362 li
1111.1 174.315 li
1111.27 173.296 li
1111.43 172.303 li
1111.6 171.337 li
1111.76 170.397 li
1111.93 169.485 li
1112.09 168.599 li
1112.25 167.739 li
1112.42 166.906 li
1112.58 166.1 li
1112.75 165.32 li
1112.91 164.567 li
1113.08 163.841 li
1113.24 163.141 li
1113.41 162.467 li
1113.74 161.198 li
1114.07 160.034 li
1114.39 158.974 li
1114.72 158.018 li
1115.05 157.164 li
1115.38 156.412 li
1115.71 155.761 li
1116.04 155.21 li
1116.37 154.758 li
1116.7 154.404 li
1117.03 154.147 li
1117.36 153.985 li
1117.68 153.917 li
1118.01 153.943 li
1118.34 154.06 li
1118.67 154.266 li
1119 154.561 li
1119.33 154.942 li
1119.66 155.409 li
1119.99 155.959 li
1120.32 156.591 li
1120.65 157.303 li
1120.98 158.093 li
1121.31 158.959 li
1121.63 159.9 li
1121.96 160.913 li
1122.29 161.996 li
1122.62 163.147 li
1122.95 164.364 li
1123.28 165.646 li
1123.45 166.311 li
1123.61 166.99 li
1123.77 167.684 li
1123.94 168.393 li
1124.1 169.117 li
1124.27 169.854 li
1124.43 170.605 li
1124.6 171.37 li
1124.76 172.148 li
1124.93 172.939 li
1125.09 173.744 li
1125.25 174.56 li
1125.42 175.389 li
1125.58 176.229 li
1125.75 177.081 li
1125.91 177.944 li
1126.08 178.818 li
1126.24 179.703 li
1126.41 180.599 li
1126.57 181.504 li
1126.74 182.419 li
1126.9 183.345 li
1127.07 184.279 li
1127.23 185.222 li
1127.39 186.174 li
1127.56 187.134 li
1127.72 188.102 li
1127.89 189.078 li
1128.05 190.062 li
1128.22 191.053 li
1128.38 192.05 li
1128.55 193.055 li
1128.71 194.065 li
1128.88 195.082 li
1129.04 196.104 li
1129.2 197.133 li
1129.37 198.166 li
1129.53 199.204 li
1129.7 200.247 li
1129.86 201.294 li
1130.03 202.345 li
1130.19 203.399 li
1130.36 204.458 li
1130.52 205.52 li
1130.68 206.583 li
1130.85 207.65 li
1131.01 208.72 li
1131.18 209.792 li
1131.34 210.864 li
1131.51 211.939 li
1131.67 213.015 li
1131.84 214.092 li
1132 215.169 li
1132.17 216.248 li
1132.33 217.326 li
1132.5 218.404 li
1132.66 219.481 li
1132.82 220.559 li
1132.99 221.635 li
1133.15 222.71 li
1133.32 223.784 li
1133.48 224.855 li
1133.65 225.926 li
1133.81 226.994 li
1133.98 228.06 li
1134.14 229.122 li
1134.31 230.182 li
1134.47 231.239 li
1134.63 232.293 li
1134.8 233.343 li
1134.96 234.389 li
1135.13 235.431 li
1135.29 236.469 li
1135.46 237.502 li
1135.62 238.53 li
1135.79 239.554 li
1135.95 240.573 li
1136.12 241.585 li
1136.28 242.593 li
1136.44 243.595 li
1136.61 244.59 li
1136.77 245.58 li
1136.94 246.563 li
1137.1 247.54 li
1137.27 248.509 li
1137.43 249.472 li
1137.6 250.428 li
1137.76 251.376 li
1137.92 252.317 li
1138.09 253.25 li
1138.25 254.175 li
1138.42 255.092 li
1138.58 256.001 li
1138.75 256.902 li
1138.91 257.794 li
1139.08 258.678 li
1139.24 259.553 li
1139.41 260.418 li
1139.57 261.275 li
1139.74 262.122 li
1139.9 262.96 li
1140.06 263.789 li
1140.23 264.607 li
1140.39 265.417 li
1140.56 266.216 li
1140.72 267.005 li
1140.89 267.784 li
1141.05 268.552 li
1141.22 269.311 li
1141.38 270.059 li
1141.54 270.796 li
1141.71 271.523 li
1141.87 272.239 li
1142.04 272.944 li
1142.2 273.639 li
1142.37 274.322 li
1142.53 274.994 li
1142.7 275.655 li
1143.03 276.943 li
1143.36 278.187 li
1143.68 279.384 li
1144.01 280.535 li
1144.34 281.64 li
1144.67 282.697 li
1145 283.708 li
1145.33 284.672 li
1145.66 285.588 li
1145.99 286.458 li
1146.32 287.279 li
1146.65 288.054 li
1146.98 288.782 li
1147.31 289.463 li
1147.63 290.097 li
1147.96 290.686 li
1148.29 291.228 li
1148.62 291.725 li
1148.95 292.177 li
1149.28 292.584 li
1149.61 292.948 li
1149.94 293.268 li
1150.27 293.546 li
1150.6 293.782 li
1150.92 293.977 li
1151.25 294.132 li
1151.58 294.247 li
1151.91 294.324 li
1152.24 294.363 li
1152.57 294.366 li
1152.9 294.333 li
1153.23 294.266 li
1153.56 294.165 li
1153.89 294.031 li
1154.22 293.867 li
1154.54 293.673 li
1154.87 293.45 li
1155.2 293.2 li
1155.53 292.923 li
1155.86 292.622 li
1156.19 292.296 li
1156.52 291.949 li
1156.85 291.581 li
1157.18 291.192 li
1157.51 290.786 li
1157.84 290.363 li
1158.17 289.925 li
1158.49 289.473 li
1158.82 289.007 li
1159.15 288.531 li
1159.48 288.045 li
1159.81 287.552 li
1160.14 287.051 li
1160.47 286.544 li
1160.8 286.034 li
1161.13 285.521 li
1161.46 285.007 li
1161.79 284.494 li
1162.11 283.982 li
1162.44 283.474 li
1162.77 282.969 li
1163.1 282.471 li
1163.43 281.979 li
1163.76 281.497 li
1164.09 281.024 li
1164.42 280.563 li
1164.75 280.114 li
1165.08 279.678 li
1165.41 279.258 li
1165.73 278.854 li
1166.06 278.466 li
1166.39 278.098 li
1166.72 277.748 li
1167.05 277.419 li
1167.38 277.112 li
1167.71 276.828 li
1168.04 276.567 li
1168.37 276.331 li
1168.7 276.121 li
1169.03 275.937 li
1169.35 275.779 li
1169.68 275.65 li
1170.01 275.55 li
1170.34 275.479 li
1170.67 275.438 li
1171 275.428 li
1171.33 275.449 li
1171.66 275.502 li
1171.99 275.587 li
1172.32 275.706 li
1172.65 275.857 li
1172.97 276.042 li
1173.3 276.261 li
1173.63 276.514 li
1173.96 276.801 li
1174.29 277.123 li
1174.62 277.479 li
1174.95 277.87 li
1175.28 278.296 li
1175.61 278.757 li
1175.94 279.252 li
1176.27 279.782 li
1176.59 280.347 li
1176.92 280.946 li
1177.25 281.579 li
1177.58 282.246 li
1177.91 282.946 li
1178.24 283.679 li
1178.57 284.445 li
1178.9 285.244 li
1179.23 286.074 li
1179.56 286.936 li
1179.89 287.828 li
1180.21 288.75 li
1180.54 289.702 li
1180.87 290.682 li
1181.2 291.691 li
1181.53 292.727 li
1181.86 293.789 li
1182.19 294.877 li
1182.52 295.991 li
1182.85 297.128 li
1183.18 298.288 li
1183.51 299.471 li
1183.83 300.674 li
1184.16 301.898 li
1184.49 303.141 li
1184.82 304.402 li
1185.15 305.681 li
1185.32 306.326 li
1185.48 306.976 li
1185.65 307.628 li
1185.81 308.285 li
1185.97 308.945 li
1186.14 309.608 li
1186.3 310.275 li
1186.47 310.945 li
1186.63 311.617 li
1186.8 312.293 li
1186.96 312.971 li
1187.13 313.651 li
1187.29 314.334 li
1187.46 315.019 li
1187.62 315.706 li
1187.78 316.395 li
1187.95 317.085 li
1188.11 317.777 li
1188.28 318.471 li
1188.44 319.166 li
1188.61 319.862 li
1188.77 320.559 li
1188.94 321.257 li
1189.1 321.956 li
1189.26 322.655 li
1189.43 323.354 li
1189.59 324.054 li
1189.76 324.754 li
1189.92 325.454 li
1190.09 326.154 li
1190.25 326.853 li
1190.42 327.552 li
1190.58 328.25 li
1190.75 328.948 li
1190.91 329.644 li
1191.08 330.339 li
1191.24 331.034 li
1191.4 331.727 li
1191.57 332.418 li
1191.73 333.107 li
1191.9 333.795 li
1192.06 334.481 li
1192.23 335.165 li
1192.39 335.846 li
1192.56 336.525 li
1192.72 337.202 li
1192.88 337.876 li
1193.05 338.547 li
1193.21 339.215 li
1193.38 339.88 li
1193.54 340.542 li
1193.71 341.201 li
1193.87 341.856 li
1194.04 342.507 li
1194.2 343.155 li
1194.37 343.799 li
1194.7 345.075 li
1195.02 346.333 li
1195.35 347.574 li
1195.68 348.796 li
1196.01 349.998 li
1196.34 351.179 li
1196.67 352.339 li
1197 353.476 li
1197.33 354.59 li
1197.66 355.68 li
1197.99 356.745 li
1198.32 357.784 li
1198.64 358.798 li
1198.97 359.784 li
1199.3 360.743 li
1199.63 361.674 li
1199.96 362.577 li
1200.29 363.45 li
1200.62 364.294 li
1200.95 365.108 li
1201.28 365.892 li
1201.61 366.646 li
1201.93 367.368 li
1202.26 368.059 li
1202.59 368.719 li
1202.92 369.347 li
1203.25 369.943 li
1203.58 370.508 li
1203.91 371.042 li
1204.24 371.543 li
1204.57 372.012 li
1204.9 372.45 li
1205.23 372.857 li
1205.56 373.232 li
1205.88 373.576 li
1206.21 373.889 li
1206.54 374.172 li
1206.87 374.424 li
1207.2 374.647 li
1207.53 374.84 li
1207.86 375.004 li
1208.19 375.14 li
1208.52 375.248 li
1208.85 375.329 li
1209.18 375.383 li
1209.5 375.411 li
1209.83 375.414 li
1210.16 375.392 li
1210.49 375.346 li
1210.82 375.277 li
1211.15 375.187 li
1211.48 375.075 li
1211.81 374.942 li
1212.14 374.79 li
1212.47 374.619 li
1212.8 374.431 li
1213.13 374.226 li
1213.45 374.005 li
1213.78 373.771 li
1214.11 373.522 li
1214.44 373.262 li
1214.77 372.99 li
1215.1 372.708 li
1215.43 372.417 li
1215.76 372.119 li
1216.09 371.813 li
1216.42 371.503 li
1216.75 371.188 li
1217.07 370.871 li
1217.4 370.552 li
1217.73 370.232 li
1218.06 369.913 li
1218.39 369.596 li
1218.72 369.282 li
1219.05 368.973 li
1219.38 368.669 li
1219.71 368.372 li
1220.04 368.083 li
1220.37 367.805 li
1220.69 367.536 li
1221.02 367.279 li
1221.35 367.036 li
1221.68 366.806 li
1222.01 366.592 li
1222.34 366.395 li
1222.67 366.215 li
1223 366.054 li
1223.33 365.913 li
1223.66 365.792 li
1223.99 365.694 li
1224.31 365.619 li
1224.64 365.568 li
1224.97 365.542 li
1225.3 365.542 li
1225.63 365.569 li
1225.96 365.624 li
1226.29 365.708 li
1226.62 365.821 li
1226.95 365.964 li
1227.28 366.139 li
1227.61 366.345 li
1227.93 366.583 li
1228.26 366.855 li
1228.59 367.161 li
1228.92 367.5 li
1229.25 367.875 li
1229.58 368.285 li
1229.91 368.73 li
1230.24 369.211 li
1230.57 369.729 li
1230.9 370.284 li
1231.23 370.875 li
1231.56 371.504 li
1231.88 372.17 li
1232.21 372.874 li
1232.54 373.615 li
1232.87 374.394 li
1233.2 375.209 li
1233.53 376.063 li
1233.86 376.954 li
1234.19 377.881 li
1234.52 378.846 li
1234.85 379.847 li
1235.17 380.884 li
1235.5 381.957 li
1235.83 383.065 li
1236.16 384.208 li
1236.49 385.386 li
1236.82 386.597 li
1237.15 387.841 li
1237.48 389.118 li
1237.64 389.769 li
1237.81 390.427 li
1237.97 391.093 li
1238.14 391.766 li
1238.3 392.447 li
1238.47 393.136 li
1238.63 393.832 li
1238.79 394.535 li
1238.96 395.245 li
1239.12 395.962 li
1239.29 396.686 li
1239.45 397.417 li
1239.62 398.154 li
1239.78 398.898 li
1239.95 399.648 li
1240.11 400.404 li
1240.28 401.167 li
1240.44 401.935 li
1240.61 402.709 li
1240.77 403.489 li
1240.93 404.274 li
1241.1 405.064 li
1241.26 405.86 li
1241.43 406.661 li
1241.59 407.467 li
1241.76 408.277 li
1241.92 409.092 li
1242.09 409.912 li
1242.25 410.735 li
1242.42 411.563 li
1242.58 412.395 li
1242.74 413.23 li
1242.91 414.069 li
1243.07 414.912 li
1243.24 415.757 li
1243.4 416.605 li
1243.57 417.457 li
1243.73 418.311 li
1243.9 419.167 li
1244.06 420.026 li
1244.23 420.887 li
1244.39 421.75 li
1244.55 422.615 li
1244.72 423.481 li
1244.88 424.349 li
1245.05 425.217 li
1245.21 426.087 li
1245.38 426.957 li
1245.54 427.828 li
1245.71 428.699 li
1245.87 429.57 li
1246.04 430.442 li
1246.2 431.313 li
1246.36 432.184 li
1246.53 433.054 li
1246.69 433.923 li
1246.86 434.791 li
1247.02 435.657 li
1247.19 436.522 li
1247.35 437.387 li
1247.52 438.248 li
1247.68 439.107 li
1247.84 439.965 li
1248.01 440.819 li
1248.17 441.671 li
1248.34 442.521 li
1248.5 443.366 li
1248.67 444.208 li
1248.83 445.047 li
1249 445.882 li
1249.16 446.713 li
1249.33 447.54 li
1249.49 448.361 li
1249.66 449.18 li
1249.82 449.992 li
1249.98 450.8 li
1250.15 451.602 li
1250.31 452.398 li
1250.48 453.189 li
1250.64 453.975 li
1250.81 454.753 li
1250.97 455.525 li
1251.14 456.292 li
1251.3 457.051 li
1251.46 457.803 li
1251.63 458.548 li
1251.79 459.285 li
1251.96 460.016 li
1252.12 460.737 li
1252.29 461.452 li
1252.45 462.158 li
1252.62 462.855 li
1252.78 463.544 li
1252.95 464.225 li
1253.11 464.896 li
1253.28 465.557 li
1253.44 466.21 li
1253.6 466.853 li
1253.93 468.108 li
1254.26 469.324 li
1254.59 470.497 li
1254.92 471.627 li
1255.25 472.712 li
1255.58 473.75 li
1255.91 474.741 li
1256.24 475.683 li
1256.57 476.573 li
1256.9 477.413 li
1257.22 478.2 li
1257.55 478.933 li
1257.88 479.61 li
1258.21 480.231 li
1258.54 480.796 li
1258.87 481.302 li
1259.2 481.749 li
1259.53 482.136 li
1259.86 482.463 li
1260.19 482.728 li
1260.52 482.93 li
1260.84 483.068 li
1261.17 483.145 li
1261.5 483.156 li
1261.83 483.104 li
1262.16 482.985 li
1262.49 482.802 li
1262.82 482.552 li
1263.15 482.236 li
1263.48 481.854 li
1263.81 481.407 li
1264.14 480.893 li
1264.46 480.312 li
1264.79 479.664 li
1265.12 478.95 li
1265.45 478.17 li
1265.78 477.324 li
1266.11 476.413 li
1266.44 475.437 li
1266.77 474.396 li
1267.1 473.29 li
1267.43 472.12 li
1267.76 470.888 li
1267.92 470.248 li
1268.08 469.593 li
1268.25 468.922 li
1268.41 468.236 li
1268.58 467.535 li
1268.74 466.819 li
1268.91 466.088 li
1269.07 465.342 li
1269.24 464.581 li
1269.4 463.805 li
1269.57 463.015 li
1269.73 462.211 li
1269.9 461.392 li
1270.06 460.559 li
1270.22 459.712 li
1270.39 458.852 li
1270.55 457.978 li
1270.72 457.09 li
1270.88 456.188 li
1271.05 455.273 li
1271.21 454.346 li
1271.38 453.406 li
1271.54 452.453 li
1271.71 451.487 li
1271.87 450.509 li
1272.03 449.519 li
1272.2 448.517 li
1272.36 447.503 li
1272.53 446.478 li
1272.69 445.44 li
1272.86 444.392 li
1273.02 443.333 li
1273.19 442.263 li
1273.35 441.182 li
1273.51 440.091 li
1273.68 438.989 li
1273.84 437.878 li
1274.01 436.757 li
1274.17 435.626 li
1274.34 434.485 li
1274.5 433.337 li
1274.67 432.179 li
1274.83 431.012 li
1275 429.837 li
1275.16 428.653 li
1275.33 427.462 li
1275.49 426.263 li
1275.65 425.057 li
1275.82 423.843 li
1275.98 422.623 li
1276.15 421.395 li
1276.31 420.162 li
1276.48 418.921 li
1276.64 417.676 li
1276.81 416.424 li
1276.97 415.167 li
1277.13 413.905 li
1277.3 412.638 li
1277.46 411.366 li
1277.63 410.09 li
1277.79 408.81 li
1277.96 407.526 li
1278.12 406.238 li
1278.29 404.947 li
1278.45 403.653 li
1278.62 402.357 li
1278.78 401.058 li
1278.95 399.757 li
1279.11 398.454 li
1279.27 397.149 li
1279.44 395.843 li
1279.6 394.536 li
1279.77 393.228 li
1279.93 391.92 li
1280.1 390.611 li
1280.26 389.303 li
1280.43 387.995 li
1280.59 386.688 li
1280.75 385.381 li
1280.92 384.076 li
1281.08 382.773 li
1281.25 381.471 li
1281.41 380.171 li
1281.58 378.875 li
1281.74 377.58 li
1281.91 376.289 li
1282.07 375 li
1282.24 373.716 li
1282.4 372.436 li
1282.57 371.159 li
1282.73 369.887 li
1282.89 368.62 li
1283.06 367.357 li
1283.22 366.1 li
1283.39 364.849 li
1283.55 363.604 li
1283.72 362.364 li
1283.88 361.131 li
1284.05 359.905 li
1284.21 358.687 li
1284.38 357.475 li
1284.54 356.271 li
1284.7 355.074 li
1284.87 353.886 li
1285.03 352.707 li
1285.2 351.536 li
1285.36 350.374 li
1285.53 349.221 li
1285.69 348.078 li
1285.86 346.945 li
1286.02 345.822 li
1286.18 344.709 li
1286.35 343.606 li
1286.51 342.515 li
1286.68 341.435 li
1286.84 340.366 li
1287.01 339.309 li
1287.17 338.264 li
1287.34 337.231 li
1287.5 336.21 li
1287.67 335.202 li
1287.83 334.208 li
1288 333.226 li
1288.16 332.257 li
1288.33 331.302 li
1288.49 330.361 li
1288.65 329.435 li
1288.82 328.522 li
1288.98 327.625 li
1289.15 326.741 li
1289.31 325.874 li
1289.48 325.021 li
1289.64 324.184 li
1289.81 323.362 li
1289.97 322.556 li
1290.13 321.767 li
1290.3 320.994 li
1290.46 320.237 li
1290.63 319.497 li
1290.79 318.773 li
1290.96 318.068 li
1291.12 317.379 li
1291.29 316.708 li
1291.45 316.054 li
1291.78 314.801 li
1292.11 313.62 li
1292.44 312.514 li
1292.77 311.482 li
1293.1 310.528 li
1293.43 309.651 li
1293.75 308.853 li
1294.08 308.134 li
1294.41 307.496 li
1294.74 306.939 li
1295.07 306.466 li
1295.4 306.075 li
1295.73 305.768 li
1296.06 305.545 li
1296.39 305.407 li
1296.72 305.354 li
1297.05 305.388 li
1297.38 305.506 li
1297.7 305.712 li
1298.03 306.003 li
1298.36 306.382 li
1298.69 306.846 li
1299.02 307.397 li
1299.35 308.035 li
1299.68 308.758 li
1300.01 309.567 li
1300.34 310.461 li
1300.67 311.44 li
1301 312.504 li
1301.32 313.652 li
1301.65 314.882 li
1301.82 315.529 li
1301.98 316.195 li
1302.15 316.883 li
1302.31 317.59 li
1302.48 318.318 li
1302.64 319.065 li
1302.81 319.833 li
1302.97 320.621 li
1303.13 321.428 li
1303.3 322.254 li
1303.46 323.101 li
1303.63 323.966 li
1303.79 324.85 li
1303.96 325.753 li
1304.12 326.676 li
1304.29 327.617 li
1304.45 328.576 li
1304.62 329.554 li
1304.78 330.549 li
1304.94 331.563 li
1305.11 332.595 li
1305.27 333.644 li
1305.44 334.71 li
1305.6 335.794 li
1305.77 336.895 li
1305.93 338.013 li
1306.1 339.147 li
1306.26 340.298 li
1306.42 341.464 li
1306.59 342.647 li
1306.75 343.846 li
1306.92 345.06 li
1307.08 346.29 li
1307.25 347.534 li
1307.41 348.794 li
1307.58 350.068 li
1307.74 351.356 li
1307.91 352.659 li
1308.07 353.975 li
1308.24 355.306 li
1308.4 356.649 li
1308.56 358.006 li
1308.73 359.375 li
1308.89 360.758 li
1309.06 362.152 li
1309.22 363.559 li
1309.39 364.978 li
1309.55 366.408 li
1309.72 367.849 li
1309.88 369.301 li
1310.04 370.765 li
1310.21 372.238 li
1310.37 373.722 li
1310.54 375.215 li
1310.7 376.719 li
1310.87 378.231 li
1311.03 379.753 li
1311.2 381.283 li
1311.36 382.822 li
1311.53 384.369 li
1311.69 385.923 li
1311.86 387.485 li
1312.02 389.055 li
1312.18 390.631 li
1312.35 392.214 li
1312.51 393.804 li
1312.68 395.399 li
1312.84 397 li
1313.01 398.606 li
1313.17 400.217 li
1313.34 401.833 li
1313.5 403.454 li
1313.67 405.079 li
1313.83 406.707 li
1314 408.339 li
1314.16 409.974 li
1314.32 411.612 li
1314.49 413.252 li
1314.65 414.895 li
1314.82 416.54 li
1314.98 418.186 li
1315.15 419.833 li
1315.31 421.481 li
1315.48 423.13 li
1315.64 424.779 li
1315.81 426.429 li
1315.97 428.077 li
1316.13 429.725 li
1316.3 431.372 li
1316.46 433.018 li
1316.63 434.661 li
1316.79 436.304 li
1316.96 437.943 li
1317.12 439.58 li
1317.29 441.214 li
1317.45 442.845 li
1317.62 444.473 li
1317.78 446.096 li
1317.94 447.715 li
1318.11 449.329 li
1318.27 450.938 li
1318.44 452.543 li
1318.6 454.143 li
1318.77 455.735 li
1318.93 457.323 li
1319.1 458.903 li
1319.26 460.478 li
1319.42 462.045 li
1319.59 463.604 li
1319.75 465.156 li
1319.92 466.7 li
1320.08 468.236 li
1320.25 469.764 li
1320.41 471.282 li
1320.58 472.792 li
1320.74 474.292 li
1320.91 475.782 li
1321.07 477.263 li
1321.24 478.732 li
1321.4 480.192 li
1321.56 481.641 li
1321.73 483.078 li
1321.89 484.505 li
1322.06 485.919 li
1322.22 487.321 li
1322.39 488.712 li
1322.55 490.09 li
1322.72 491.455 li
1322.88 492.808 li
1323.04 494.146 li
1323.21 495.473 li
1323.37 496.784 li
1323.54 498.082 li
1323.7 499.365 li
1323.87 500.635 li
1324.03 501.889 li
1324.2 503.129 li
1324.36 504.353 li
1324.53 505.562 li
1324.69 506.755 li
1324.86 507.933 li
1325.02 509.094 li
1325.18 510.239 li
1325.35 511.368 li
1325.51 512.479 li
1325.68 513.575 li
1325.84 514.652 li
1326.01 515.714 li
1326.17 516.757 li
1326.34 517.782 li
1326.5 518.79 li
1326.67 519.779 li
1326.83 520.751 li
1326.99 521.704 li
1327.16 522.639 li
1327.32 523.555 li
1327.49 524.452 li
1327.65 525.33 li
1327.82 526.188 li
1327.98 527.028 li
1328.15 527.848 li
1328.31 528.648 li
1328.48 529.43 li
1328.64 530.19 li
1328.8 530.931 li
1328.97 531.652 li
1329.13 532.353 li
1329.3 533.033 li
1329.46 533.692 li
1329.63 534.332 li
1329.96 535.549 li
1330.29 536.682 li
1330.61 537.731 li
1330.94 538.696 li
1331.27 539.576 li
1331.6 540.371 li
1331.93 541.079 li
1332.26 541.702 li
1332.59 542.238 li
1332.92 542.688 li
1333.25 543.052 li
1333.58 543.329 li
1333.91 543.52 li
1334.23 543.624 li
1334.56 543.643 li
1334.89 543.576 li
1335.22 543.424 li
1335.55 543.187 li
1335.88 542.865 li
1336.21 542.46 li
1336.54 541.972 li
1336.87 541.401 li
1337.2 540.75 li
1337.53 540.018 li
1337.85 539.206 li
1338.18 538.316 li
1338.51 537.348 li
1338.84 536.304 li
1339.17 535.185 li
1339.5 533.992 li
1339.83 532.727 li
1339.99 532.066 li
1340.16 531.39 li
1340.32 530.695 li
1340.49 529.983 li
1340.65 529.254 li
1340.82 528.509 li
1340.98 527.746 li
1341.15 526.968 li
1341.31 526.173 li
1341.47 525.361 li
1341.64 524.534 li
1341.8 523.692 li
1341.97 522.834 li
1342.13 521.961 li
1342.3 521.073 li
1342.46 520.17 li
1342.63 519.253 li
1342.79 518.321 li
1342.96 517.376 li
1343.12 516.416 li
1343.29 515.443 li
1343.45 514.457 li
1343.61 513.457 li
1343.78 512.445 li
1343.94 511.42 li
1344.11 510.383 li
1344.27 509.334 li
1344.44 508.272 li
1344.6 507.2 li
1344.77 506.116 li
1344.93 505.021 li
1345.09 503.915 li
1345.26 502.799 li
1345.42 501.672 li
1345.59 500.535 li
1345.75 499.39 li
1345.92 498.233 li
1346.08 497.068 li
1346.25 495.895 li
1346.41 494.712 li
1346.58 493.521 li
1346.74 492.322 li
1346.91 491.115 li
1347.07 489.901 li
1347.23 488.68 li
1347.4 487.451 li
1347.56 486.217 li
1347.73 484.975 li
1347.89 483.728 li
1348.06 482.475 li
1348.22 481.216 li
1348.39 479.951 li
1348.55 478.683 li
1348.71 477.409 li
1348.88 476.131 li
1349.04 474.849 li
1349.21 473.563 li
1349.37 472.274 li
1349.54 470.981 li
1349.7 469.687 li
1349.87 468.389 li
1350.03 467.088 li
1350.2 465.786 li
1350.36 464.481 li
1350.53 463.176 li
1350.69 461.869 li
1350.85 460.562 li
1351.02 459.254 li
1351.18 457.945 li
1351.35 456.637 li
1351.51 455.329 li
1351.68 454.021 li
1351.84 452.715 li
1352.01 451.409 li
1352.17 450.104 li
1352.33 448.802 li
1352.5 447.502 li
1352.66 446.203 li
1352.83 444.908 li
1352.99 443.615 li
1353.16 442.325 li
1353.32 441.039 li
1353.49 439.756 li
1353.65 438.478 li
1353.82 437.202 li
1353.98 435.933 li
1354.15 434.667 li
1354.31 433.406 li
1354.47 432.151 li
1354.64 430.901 li
1354.8 429.658 li
1354.97 428.42 li
1355.13 427.188 li
1355.3 425.963 li
1355.46 424.745 li
1355.63 423.534 li
1355.79 422.33 li
1355.96 421.133 li
1356.12 419.945 li
1356.28 418.764 li
1356.45 417.592 li
1356.61 416.428 li
1356.78 415.273 li
1356.94 414.127 li
1357.11 412.99 li
1357.27 411.863 li
1357.44 410.745 li
1357.6 409.637 li
1357.76 408.539 li
1357.93 407.451 li
1358.09 406.374 li
1358.26 405.307 li
1358.42 404.252 li
1358.59 403.207 li
1358.75 402.174 li
1358.92 401.152 li
1359.08 400.142 li
1359.25 399.144 li
1359.41 398.158 li
1359.58 397.184 li
1359.74 396.223 li
1359.9 395.274 li
1360.07 394.338 li
1360.23 393.415 li
1360.4 392.505 li
1360.56 391.608 li
1360.73 390.725 li
1360.89 389.855 li
1361.06 389 li
1361.22 388.157 li
1361.38 387.329 li
1361.55 386.515 li
1361.71 385.716 li
1361.88 384.931 li
1362.04 384.16 li
1362.21 383.404 li
1362.37 382.663 li
1362.54 381.937 li
1362.7 381.226 li
1362.87 380.529 li
1363.03 379.849 li
1363.2 379.183 li
1363.52 377.899 li
1363.85 376.677 li
1364.18 375.519 li
1364.51 374.424 li
1364.84 373.394 li
1365.17 372.428 li
1365.5 371.527 li
1365.83 370.693 li
1366.16 369.924 li
1366.49 369.222 li
1366.82 368.585 li
1367.14 368.016 li
1367.47 367.513 li
1367.8 367.076 li
1368.13 366.706 li
1368.46 366.401 li
1368.79 366.163 li
1369.12 365.99 li
1369.45 365.883 li
1369.78 365.841 li
1370.11 365.864 li
1370.43 365.95 li
1370.76 366.101 li
1371.09 366.313 li
1371.42 366.588 li
1371.75 366.925 li
1372.08 367.322 li
1372.41 367.779 li
1372.74 368.295 li
1373.07 368.87 li
1373.4 369.5 li
1373.73 370.188 li
1374.06 370.93 li
1374.38 371.726 li
1374.71 372.574 li
1375.04 373.474 li
1375.37 374.423 li
1375.7 375.422 li
1376.03 376.469 li
1376.36 377.561 li
1376.69 378.698 li
1377.02 379.879 li
1377.35 381.102 li
1377.68 382.364 li
1377.84 383.01 li
1378 383.666 li
1378.17 384.331 li
1378.33 385.005 li
1378.5 385.688 li
1378.66 386.38 li
1378.83 387.081 li
1378.99 387.789 li
1379.16 388.506 li
1379.32 389.231 li
1379.49 389.963 li
1379.65 390.704 li
1379.82 391.451 li
1379.98 392.206 li
1380.14 392.967 li
1380.31 393.735 li
1380.47 394.51 li
1380.64 395.291 li
1380.8 396.078 li
1380.97 396.871 li
1381.13 397.669 li
1381.3 398.474 li
1381.46 399.283 li
1381.63 400.097 li
1381.79 400.917 li
1381.95 401.74 li
1382.12 402.568 li
1382.28 403.4 li
1382.45 404.237 li
1382.61 405.077 li
1382.78 405.92 li
1382.94 406.767 li
1383.11 407.617 li
1383.27 408.47 li
1383.43 409.325 li
1383.6 410.184 li
1383.76 411.044 li
1383.93 411.906 li
1384.09 412.77 li
1384.26 413.636 li
1384.42 414.503 li
1384.59 415.372 li
1384.75 416.241 li
1384.92 417.111 li
1385.08 417.982 li
1385.25 418.854 li
1385.41 419.725 li
1385.57 420.596 li
1385.74 421.467 li
1385.9 422.338 li
1386.07 423.208 li
1386.23 424.077 li
1386.4 424.946 li
1386.56 425.813 li
1386.73 426.679 li
1386.89 427.542 li
1387.06 428.404 li
1387.22 429.265 li
1387.38 430.123 li
1387.55 430.979 li
1387.71 431.832 li
1387.88 432.683 li
1388.04 433.529 li
1388.21 434.374 li
1388.37 435.216 li
1388.54 436.053 li
1388.7 436.888 li
1388.87 437.718 li
1389.03 438.544 li
1389.19 439.366 li
1389.36 440.185 li
1389.52 440.998 li
1389.69 441.807 li
1389.85 442.61 li
1390.02 443.41 li
1390.18 444.204 li
1390.35 444.992 li
1390.51 445.776 li
1390.67 446.554 li
1390.84 447.326 li
1391 448.092 li
1391.17 448.853 li
1391.33 449.606 li
1391.5 450.354 li
1391.66 451.097 li
1391.83 451.831 li
1391.99 452.56 li
1392.16 453.281 li
1392.32 453.996 li
1392.49 454.704 li
1392.65 455.404 li
1392.81 456.098 li
1392.98 456.784 li
1393.14 457.463 li
1393.31 458.134 li
1393.47 458.797 li
1393.64 459.453 li
1393.8 460.101 li
1394.13 461.372 li
1394.46 462.61 li
1394.79 463.816 li
1395.12 464.988 li
1395.45 466.125 li
1395.78 467.228 li
1396.11 468.295 li
1396.43 469.325 li
1396.76 470.32 li
1397.09 471.278 li
1397.42 472.2 li
1397.75 473.084 li
1398.08 473.932 li
1398.41 474.741 li
1398.74 475.513 li
1399.07 476.248 li
1399.4 476.945 li
1399.73 477.604 li
1400.06 478.228 li
1400.38 478.813 li
1400.71 479.36 li
1401.04 479.873 li
1401.37 480.348 li
1401.7 480.787 li
1402.03 481.191 li
1402.36 481.56 li
1402.69 481.894 li
1403.02 482.193 li
1403.35 482.459 li
1403.67 482.692 li
1404 482.894 li
1404.33 483.063 li
1404.66 483.2 li
1404.99 483.309 li
1405.32 483.387 li
1405.65 483.438 li
1405.98 483.46 li
1406.31 483.455 li
1406.64 483.425 li
1406.97 483.37 li
1407.29 483.291 li
1407.62 483.188 li
1407.95 483.065 li
1408.28 482.92 li
1408.61 482.756 li
1408.94 482.573 li
1409.27 482.373 li
1409.6 482.156 li
1409.93 481.924 li
1410.26 481.678 li
1410.59 481.419 li
1410.92 481.148 li
1411.24 480.868 li
1411.57 480.578 li
1411.9 480.28 li
1412.23 479.976 li
1412.56 479.665 li
1412.89 479.351 li
1413.22 479.033 li
1413.55 478.714 li
1413.88 478.395 li
1414.21 478.075 li
1414.54 477.758 li
1414.86 477.444 li
1415.19 477.135 li
1415.52 476.83 li
1415.85 476.533 li
1416.18 476.244 li
1416.51 475.964 li
1416.84 475.693 li
1417.17 475.435 li
1417.5 475.188 li
1417.83 474.956 li
1418.16 474.738 li
1418.48 474.536 li
1418.81 474.351 li
1419.14 474.184 li
1419.47 474.034 li
1419.8 473.905 li
1420.13 473.797 li
1420.46 473.709 li
1420.79 473.645 li
1421.12 473.603 li
1421.45 473.585 li
1421.78 473.592 li
1422.1 473.624 li
1422.43 473.683 li
1422.76 473.769 li
1423.09 473.881 li
1423.42 474.021 li
1423.75 474.19 li
1424.08 474.389 li
1424.41 474.616 li
1424.74 474.874 li
1425.07 475.162 li
1425.4 475.48 li
1425.72 475.829 li
1426.05 476.21 li
1426.38 476.622 li
1426.71 477.065 li
1427.04 477.54 li
1427.37 478.047 li
false sop
0 0 0 rgb
@
grestore
2 lw
0 lc
0 lj
4 ml
[6 6 ] 0 dsh
true sadj
79.3701 153 mo
1427.37 153 li
false sop
0 0 0 rgb
@
4 lw
[] 0 dsh
165.37 164.106 mo
165.37 414.386 li
@
165.37 425.492 mo
163.431 420.266 160.123 413.782 156.62 409.764 cv
165.37 412.928 li
174.121 409.764 li
170.618 413.782 167.308 420.266 165.37 425.492 cv
cp
f
165.37 153 mo
167.309 158.226 170.618 164.71 174.121 168.729 cv
165.37 165.564 li
156.62 168.729 li
160.123 164.71 163.432 158.226 165.37 153 cv
cp
f
gsave
104.394 315.612 mo
153.071 315.612 li
153.071 265.063 li
104.394 265.063 li
104.394 315.612 li
cp
clp
115.852 306.597 mo
113.165 311.1 110.548 312.043 107.593 312.243 cv
106.789 312.311 106.184 312.311 106.184 313.572 cv
106.184 313.971 106.519 314.302 107.056 314.302 cv
108.868 314.302 110.949 314.102 112.83 314.102 cv
115.046 314.102 117.395 314.302 119.545 314.302 cv
119.947 314.302 120.819 314.302 120.819 313.04 cv
120.819 312.309 120.215 312.243 119.745 312.243 cv
118.2 312.107 116.588 311.568 116.588 309.884 cv
116.588 309.076 116.991 308.334 117.528 307.391 cv
117.998 306.583 118.065 306.583 122.631 298.763 cv
139.484 298.763 li
139.62 300.178 140.56 309.345 140.56 310.02 cv
140.56 312.04 137.067 312.243 135.726 312.243 cv
134.786 312.243 134.115 312.243 134.115 313.572 cv
134.115 314.302 134.919 314.302 135.055 314.302 cv
137.808 314.302 140.695 314.102 143.446 314.102 cv
145.123 314.102 149.355 314.302 151.034 314.302 cv
151.437 314.302 152.243 314.302 152.243 312.972 cv
152.243 312.243 151.572 312.243 150.698 312.243 cv
146.537 312.243 146.537 311.771 146.335 309.822 cv
142.238 267.806 li
142.106 266.46 142.106 266.188 140.964 266.188 cv
139.889 266.188 139.622 266.661 139.219 267.334 cv
115.852 306.597 li
cp
123.909 296.702 mo
137.135 274.55 li
139.285 296.702 li
f
grestore
%ADOBeginSubsetFont: HJWEKJ+HiraMinPro-W3-90pv-RKSJ-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.%%DocumentNeededResources: ProcSet (CIDInit)%%IncludeResource: ProcSet (CIDInit)%%BeginResource: CIDFont (HJWEKJ+HiraMinPro-W3-90pv-RKSJ-H)%%Title: (HJWEKJ+HiraMinPro-W3-90pv-RKSJ-H Adobe Japan1 5)%%Version: 7.11/CIDInit /ProcSet findresource begin16 dict begin/CIDFontName /HJWEKJ+HiraMinPro-W3-90pv-RKSJ-H def/CIDFontType 0 def/CIDSystemInfo 3 dict dup begin/Registry (Adobe) def/Ordering (Japan1) def/Supplement 5 defend def/FontBBox {-349 -297 1165 1229} def/UIDBase 8556401 def/XUID [205 711003 8556401] defsystemdict /languagelevel known {mark {systemdict/version get exec cvi 3011 le {currentdict /XUIDundef } if} stopped cleartomark} if/FontInfo 5 dict dup begin/Notice (Copyright (c) 1993-2002 Dainippon Screen Mfg. Co., Ltd. All Rights Reserved.Hiragino is a trademark of Dainippon Screen Mfg. Co., Ltd. registered in Japan.) def/FSType 8 defend def/CIDMapOffset 57 def/FDBytes 1 def/GDBytes 1 def/CIDCount 20317 def/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def/FDArray 15 arraydup 0%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 14 dict dup begin/BlueValues [-250 -250 1100 1100] def/BlueScale 0.032257 def/StdHW [26] def/StdVW [83] def/StemSnapH [26] def/StemSnapV [83] def/LanguageGroup 1 def/RndStemUp false def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdup 1%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 12 dict dup begin/BlueValues [0 18 523 536 727 756] def/BlueScale 0.032257 def/StdHW [26] def/StdVW [83] def/StemSnapH [26] def/StemSnapV [83] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdup 2%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 14 dict dup begin/BlueValues [-250 -250 1100 1100] def/BlueScale 0.032257 def/StdHW [31] def/StdVW [79] def/StemSnapH [31] def/StemSnapV [79] def/LanguageGroup 1 def/RndStemUp false def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdup 3%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 14 dict dup begin/BlueValues [-250 -250 1100 1100] def/BlueScale 0.032257 def/StdHW [79] def/StdVW [31] def/StemSnapH [79] def/StemSnapV [31] def/LanguageGroup 1 def/RndStemUp false def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdup 4%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 14 dict dup begin/BlueValues [-250 -250 1100 1100] def/BlueScale 0.032257 def/StdHW [37] def/StdVW [120] def/StemSnapH [37] def/StemSnapV [120] def/LanguageGroup 1 def/RndStemUp false def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdup 5%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 14 dict dup begin/BlueValues [-250 -250 1100 1100] def/BlueScale 0.032257 def/StdHW [120] def/StdVW [37] def/StemSnapH [120] def/StemSnapV [37] def/LanguageGroup 1 def/RndStemUp false def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdup 6%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 14 dict dup begin/BlueValues [-250 -250 1100 1100] def/BlueScale 0.032257 def/StdHW [68] def/StdVW [69] def/StemSnapH [68] def/StemSnapV [69] def/LanguageGroup 1 def/RndStemUp false def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdup 7%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 14 dict dup begin/BlueValues [-250 -250 1100 1100] def/BlueScale 0.032257 def/StdHW [69] def/StdVW [68] def/StemSnapH [69] def/StemSnapV [68] def/LanguageGroup 1 def/RndStemUp false def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdup 8%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 13 dict dup begin/BlueValues [-1 18 523 540 727 758] def/OtherBlues [-113 -113] def/BlueScale 0.032257 def/StdHW [22] def/StdVW [86] def/StemSnapH [22] def/StemSnapV [86] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdup 9%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 12 dict dup begin/BlueValues [-250 -250 1100 1100] def/BlueScale 0.032257 def/StdHW [83] def/StdVW [26] def/StemSnapH [83] def/StemSnapV [26] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdup 10%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 14 dict dup begin/BlueValues [-250 -250 1100 1100] def/BlueScale 0.032257 def/StdHW [31] def/StdVW [30] def/StemSnapH [31] def/StemSnapV [30] def/LanguageGroup 1 def/RndStemUp false def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdup 11%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 14 dict dup begin/BlueValues [-250 -250 1100 1100] def/BlueScale 0.032257 def/StdHW [23] def/StdVW [62] def/StemSnapH [23] def/StemSnapV [62] def/LanguageGroup 1 def/RndStemUp false def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}bind{}{}{}{}{}{}{}{}{}{2{cvi{{pop 0 lt{exit}if}loop}repeat}repeat}bind]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdup 12%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 13 dict dup begin/BlueValues [16 33 538 552 743 771] def/OtherBlues [-182 -182] def/BlueScale 0.032257 def/StdHW [26] def/StdVW [83] def/StemSnapH [26] def/StemSnapV [83] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdup 13%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 12 dict dup begin/BlueValues [-250 -250 1100 1100] def/BlueScale 0.032257 def/StdHW [83] def/StdVW [26] def/StemSnapH [83] def/StemSnapV [26] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdup 14%ADOBeginFontDict4 dict dup begin/FontType 1 def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def%ADOBeginPrivateDict/Private 12 dict dup begin/BlueValues [-250 -250 1100 1100] def/BlueScale 0.032257 def/StdHW [55] def/StdVW [47] def/StemSnapH [55] def/StemSnapV [47] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/SubrMapOffset 0 def/SDBytes 1 def/SubrCount 5 defend def%ADOEndPrivateDictend put%ADOEndFontDictdef/GlyphDirectory 3 dict defct_GlyphDirProcs beginGlyphDirectory+2556 <0B1C60D8A8C9B5EE317642C4B2F092992CB7A41ED07E5D02BF9294CDF9A2727CA9427D1C5AFBDBD088A7E648D8C70F6B2CBC0ED453070162FEF791C2D211102E1C8C776FA0E33C5747E2E8F1E3326AA1ABF789B81E87BB0A1AC9A75131855F0A2280F1933A75301C7A8BA68A763B8F8C02ACE4E3D10629DCF6A39AE7F3369E4AB97BE4508B7F30A66F5642D15FC4B9402675832702DE34F9A6187C2FCCF16477304E426B8C778FCF95E53C882759BAF5BEB693706128DBBC19FB7B3AAD88E17D30F87BA161F3935A32B031325066744808C1574098C95E38561B3AAC8F70273DD3217E01F1E07D9A9F52939D78DFF0E8C859CCC119578CC327A4B0663043222A6A23830A8F6D1B560FC42D349C4E845B339A1C7D567524C27D79038A543653CA2010AABA0E91599C5DC3168B8259F8FE45CDDAC30AE825AE3868EF220CEDFD45367329E1C0C25EF412059EA72A3CB8FEC2BD52E2FC8C873BB75ED624D47BCD1C42B0CBAF51742525CFBCD4ADA53A880450852F7F55EC760CCEA58377D82122165C9A77D71C92E71A15A52224D2BADFD809BE010E9CC9FFB10867F299C514A6C80F715A2C12BCD2C1B42DF1A518A2C335D8F7498A453F465AB4E297665367A765895B291E41E8630FB4B1F527FCD758A0F6CEF6BEF8D13EB7FA81D5DEAD0D459659D66025E831CDA2F017B0D2E7B1F18140F9085F35A6962062525F550BFC45346FA10C19B8DD72D6AF7DD56E8122D3BC98E5CBEF261395F59CC32A355B17A3AE9C3579B922721EF86164> |3567 <0B1C60D8A8C9B5EE3176C157314FB89FE9A992D0F29BB24C4C34AA4BD89F3CE60D029C299409E07D4AA67CDEFE57C028A6FA14C0EA9B4E5F2112DF7CEA3BC7C3875CA5B162BB332F8547EC3D507A9366C791510B6A18F68591B4682429CBF60F6C2B463A4F4F914F5CDAFB0E1C8A8FD5419B905AD66F46703F3CEA02AF3A9436DAD575167E3E77A4AD9A664FB2383F3B6A062CAE0F5E57D51967519B7A876790A9EF8605290D6B653F8FE0083A35BF2AED1603959FB070BB37AF6F1A687272D3F8CB558CED6D65629BDF85BDAAA138FDD8A2F99340754ACEA97AA0E47951372E3ACD07A8B7A9E9A7D59A57618052930A8BE4420B2AA8E7E8B210D37CFCD453DDB8C31A12C04FBA8AF77920A0D6FFD2A1EC6EF6FF07D7C2BF2DFFA87F17FDAB3A050327BF395515D0A9F88A84D64ECE56E68C0507392DBE08AC3463E4F170AA9F271A3EC6FE95C53D24B5DAF3E966F4D574EBE2C8C95945153D2458AF55D9EA8BD2E4A8E46DF30537DC9D1C7D64232F2C3C1D19E81963D8F96E188E35DA1F0CF07CFA96AE18BB8A407BFFBE1553663172C84A37C3FA369B0130CF2CA38C17DEEAE82D7BEE82DC2D602830B6FC6772238EEB1DAF743AA0D028F978C04C40B658D4ED95A815E4547780017540403CB5D50E284E3273627CFE47BA6DE5A58F7B944105503BA298AF83A6765DA5627EC32F8E8AB7FE547978A423F7FF217C5ECA75956BB86BE5349255225E1A50B589C9BD28B5AD6D65955C4B73F7234E8EAAC274864B79535F9C663B5552C530D5E09B77CE186C70B07C5EB633148C7E9FF918E9410DCAEAD70039DAE5CBBA505B632C1286ECECE2B7AA4B0B6F85150D2B8C4522B91378CBAFC87DE111394395BE0A159D5FD516B735EF72F66B06AAA989B865DBFA1DD729B87363D6C03617F7BAD4589F78246619787612814DACEC5934C8750CB025B4BF863D292485C6BE6EDFAFE01DF22F34BBE69C621121704757BD97BCF073C4A4CC0B30F26627F4E9ECAC4BA73AF0EE0E50D1A4D6CF8EA21BE650F019CE946F7B9C75DE014C1A86C299888B92276ADB4034C2E389A25BEB4A1593D8F2993A3DAA05D34D63E8DE6CCC498D6DFCBF579B4F3C9A4D80C2C94D87FD10FB3416AAAA12B941746D8763A3EE980DF5F2DBE8EEB1748A000009D1A280FA175E3F6D85F73C2CEB82A4FD00F5DCE0CA4EB6B5AB274111D52449CF5645D72D2A1213841E53AEC08371996D2960F661978B37F5D8BEF243AB1B1E3E967074212F> |0 <041C60D8A8C9B5EE31DD776B482D9C365A381014D41A812988E9BE2DB55A84F391A52C866413A58740A2698AA43CDA2D8F96A458F0D789601A3ECB5EF61394479F1EE598F7690E65036A030AE6633EADE476998037E3CA755F21B9091E279E6DDF> |!endct_AddStdCIDMap%%EndResourcect_restoreCIDInit /HJWEKJ+HiraMinPro-W3-90pv-RKSJ-H-Identity-H /Identity-H 0 [/HJWEKJ+HiraMinPro-W3-90pv-RKSJ-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/HJWEKJ+HiraMinPro-W3-90pv-RKSJ-H-Identity-H findfont [48 0 0 -48 0 0 ]msf0 310.417 mo(\011\374\015\357)[48 0 ]xsh2 lw
[6 6 ] 0 dsh
646.906 425.271 mo
646.906 792.307 li
@
1094.17 425.271 mo
1094.17 792.307 li
@
4 lw
[] 0 dsh
657.76 735.614 mo
1083.02 735.614 li
@
1094.48 735.614 mo
1089.09 737.722 1082.4 741.317 1078.25 745.124 cv
1081.52 735.614 li
1078.25 726.104 li
1082.4 729.911 1089.09 733.508 1094.48 735.614 cv
cp
f
646.299 735.614 mo
651.692 733.507 658.383 729.911 662.53 726.104 cv
659.264 735.614 li
662.53 745.124 li
658.383 741.317 651.692 737.721 646.299 735.614 cv
cp
f
%ADOBeginSubsetFont: HJWEKJ+HiraMinPro-W3-90pv-RKSJ-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/HJWEKJ+HiraMinPro-W3-90pv-RKSJ-H 2 GetGlyphDirectory3326 <0B1C60D8A8C9B5EE317642A9E9E0E1989D34EA64EB8BFB6746CAEB64D0874D5D9AF8FA01E382BBCCD6B435D4E627AA6EF097D54FBC074F61C6593741F8DC86F31346FF5FD1EC6AF8B8797F9F5129454C13EC71DD5C67211F5E1977EE55462034BAAD17A2BA4AC548BB1E2648541F9E8CEFD976004659F23DA0B6E2F1CCBB90E4D13CF5C09F202DCC956419A329D9E8E997816545C16FBCF32B6431C3CE2B4F8018EC929FAB46E47E9085DB10603FDCFB22DC097218F166C8D93538BE6D0FEFCDC458637289EF1BEC320A08B7A9B98AA4E5AEE9B6CB251AC16DFB8F9F66EA512B4F537B99E70798D8E235E04B9951E2F314DD840840A9FBBCA1C378377D08865B3E90EC6993164081E91A4FAC074B7E4AF36D0C23220BBDE37CEFD836A6D2805B0F16388C228ECFCEF4CDCC08CEE16B7891E9B782E42B8F3FD813DB52AC2E1A4649968231F5BA472D9B02BEE889764F23809DEAFE1A5965533AE7759242436CE00C432B15686B61C5F60A1FDABA5B0E22B35CF57699E21D378C64686E7C3FF810C949788ED629882420B7229EE3D356A5D80276C62DF5A874BFD7BBBC3141EB76A52983650A966911848FF780C66A7C485858E7200F245D48C82F03270385B65265A042FC2FADDBF14D1ABCC9F06AAA47BCCAB209CE2009D7FE2711B78FBD352FA057EF9971A791> |3029 <0B1C60D8A8C9B5EE31764D9B01D82EC494EF83D5440FD3B3A29006C5F829C6419641C7A4EFC56A3B547B4562F4FC775F6775E3BBCA147E8FCCBD51F94E8F668D0382ED8BDDFA95A3594ACE06213C4FEB6551D2EA47A375341EE49CE263C814F6068B0EE7FA75D422372E83B472949656637044E150EB53CAAC68BC0AF077803963D28E143A2F6119B75135CFF7F7AAFBA72B7801366B352D0264800599C4476227F2D4304EE67412919B8AA14DD13E8F852BDBA24CD8DE42154AEC5DB432588CCA683F59A5BC2FDDB14884A80501F21EC12A8AF5E98CCF4ED523A7A26D1995B9D5CFE75B02572ACB199483BE821AFA65CECBAD21675D9D0812169AEBE03222A6702A5F065B9AFC59817710A9E6B4082C611F6465126F036746753A46E749A582858CC65E56801AF17B448327B35506D2640B51CD5E6E72642CB14F89C06B09D3CD1A6D5236CBBF680A8D2DB86D572DEF15909873FA3325A0BB912FCBF41E84324AF979F3712A67B09E03EEF126C7567D194F25A563D1D60EB1933BE10CB4A6041DD4C8DE79A68C5328429F00> |!endend end
%ADOEndSubsetFont
/HJWEKJ+HiraMinPro-W3-90pv-RKSJ-H-Identity-H findfont [48 0 0 -48 0 0 ]msf793.701 786.637 mo(\014\376\013\325)[48 0 ]xshgsave
906.432 786.639 mo
935.433 786.639 li
935.433 746.953 li
906.432 746.953 li
906.432 786.639 li
cp
clp
924.55 769.585 mo
926.787 775.333 929.406 783.709 930.28 784.968 cv
931.151 786.17 931.698 786.17 933.173 786.17 cv
934.373 786.17 li
934.917 786.116 934.977 785.78 934.977 785.613 cv
934.977 785.445 934.861 785.335 934.699 785.11 cv
934.155 784.509 933.826 783.688 933.444 782.594 cv
922.313 751.452 li
921.167 748.276 918.221 747.563 915.655 747.563 cv
915.383 747.563 914.675 747.563 914.675 748.123 cv
914.675 748.53 915.11 748.632 915.164 748.632 cv
916.964 748.97 917.346 749.3 918.711 753.036 cv
920.13 756.992 923.131 765.397 924.005 767.979 cv
908.943 783.034 li
908.288 783.693 907.961 784.023 907.961 784.736 cv
907.961 785.671 908.725 786.33 909.598 786.33 cv
910.471 786.33 910.963 785.691 911.397 785.109 cv
f
grestore
680.315 110.026 mo
907.087 110.026 li
0.101961 0.0745098 0.0666667 rgb
@
887.11 96.7212 mo
902.884 110.026 li
887.11 123.331 li
932.931 110.026 li
887.11 96.7212 li
cp
f
893.603 100.584 mo
927.888 110.026 li
905.298 110.026 li
893.603 100.584 li
cp
1 1 1 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: HJWEKJ+HiraMinPro-W3-90pv-RKSJ-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)%%Copyright: Copyright 2009 Adobe System Incorporated. All rights reserved.ct_GlyphDirProcs begin/HJWEKJ+HiraMinPro-W3-90pv-RKSJ-H 2 GetGlyphDirectory2830 <0B1C60D8A8C9B5EE31764299C6CFFE72F2DB4AFDF8AE49236E959FECF42ACE778841FFF087978DBDAEBE2748BBE7865489A6B610EFAAA74DB9EE81A74BF3314CFFF5BD0DB11A32A0A46FE68E371DEB1956DF1735FF431ADF6E6A55AA8E62D0AA12A9D0627B67C65287B4870E39589FBD7F1996343B060ECBC5A1C84E3AB4DF2F381B4076EEC740F639AD7A2C392C03C094F29B361988CDA81BEB4DDD918D2D0EF4D57C535C80C4DC43A930CBE057D273DC3417A6E60A3EBD6E523E1656C180822255BECC704E86A17CAB98DFF3FF34DF593674EE17E727E723871352A6FDCBC0ABB11CD2652765DBF1E8B966D5581E49546822FDDB856F1DC93835082A210FF5D2030364E56DE3CFB42599FDBBC4179C84D367B4C82CA44E85976EF4B2236DD3D705EBD57D218FE9C7F76D5EB99032CE2FE8A39182A8515C154C918431029679BC485C01ED13249D0A66482F1ED9BBEC335F56339C6A09AD2011A2506C91554DB0B9B36AAE8011BF886F327E1F83891CD202CC9C0430375AEB165F9326D7280FD49A8DA9E7F588ED727438F105B76352230FC512108AB0877EDDE10D7DC7B4E606B18E98D9139BD7761472B4FF1DF09790657AA3889AC9DF173F533E902D189D69958633CE24D5D8921285BDA6F5B00FA7C08E2F83E11D7C1B94147801D1C460B83BCFB3828F9A5D9CD7F33105CD765EF60D85119153A6658ABFDE5F551415C1A0E0E85C7A4DB684789B754CD4D7764B22907E010767BE5EED99BD4A8C5E5E59363E07CCFE7E049670A7BB5E763DC4E7E41DEBE9EDBC55FEA169543BB557591602C859CB9ECD20E0800BA4C3BF1B720C67406F46BC0D360D6737258AB41AEC7B56DDD2ED1092FD5AEC7AA5B8EDC52C54F7E7417D95F58505A7C8341658030E527883549F2172932EE61659F4F272A79716059A51CE616A6E2F4DE61340C11043BED1BAB2356BCE0FBFB1C89DB3B3FE90713A455C915416F542F1B023EDB31C022BE83034E035117F> |862 <0A1C60D8A8C9B5EE31801DBEB0434D4BD1713F0D3E70CCCC7F0D9C9B49E37B949A97B232535C1706058DA17569A3A46DA26038BFC98447EFFD5AA1C0177422B0ACE3FB53979163236DC62403426E0882B6F0623219222085E6234E4E948E2F2884A98C9947E0F3EF791C156CD832ABB20E1BE63508B1B20AAC0BED35894C73DC2321EC4EAE3AA7B8B0A01C61B3A935146BAC9985564D027B547153709B8719A88563500EC66337A18844030F1E1D51BC1ACA5E418E8A03B30D356A0FBC69BED56EE204C0C0038765808DC5723EF9CE27C39854CA6E5797BAB7AC213FF02CBB5CA59262423CDAFB907A94BDCD0CAF91FB4744727925C9545EF15E5AD8CD8A68611CC06AE3BB8E429773636506A76B886CF7389673C1DFA9AF621A1B0FEF969BF2A3A8D799D6723D95> |!endend end
%ADOEndSubsetFont
/HJWEKJ+HiraMinPro-W3-90pv-RKSJ-H-Identity-H findfont [48 0 0 -48 0 0 ]msf720 94.9844 mo(\013\016\003^)[44.4004 0 ]xshgsave
822.047 94.9844 mo
854.707 94.9844 li
854.707 60.2827 li
822.047 60.2827 li
822.047 94.9844 li
cp
clp
854.707 66.6558 mo
854.707 62.6929 852.766 61.5088 851.422 61.5088 cv
849.559 61.5088 847.769 63.4224 847.769 65.0371 cv
847.769 65.9897 848.143 66.4307 848.97 67.2397 cv
850.549 68.707 851.525 70.6167 851.525 73.2559 cv
851.525 76.3379 847.059 93.1445 838.488 93.1445 cv
834.755 93.1445 833.07 90.5752 833.07 86.7598 cv
833.07 82.6509 835.038 77.2925 837.297 71.2026 cv
837.807 69.9551 838.172 68.9282 838.172 67.5327 cv
838.172 64.2295 835.833 61.5088 832.178 61.5088 cv
825.313 61.5088 822.537 72.2095 822.537 72.875 cv
822.537 73.6108 823.261 73.6108 823.406 73.6108 cv
824.128 73.6108 824.202 73.4653 824.563 72.2852 cv
826.659 64.8398 829.771 63.1411 831.87 63.1411 cv
832.448 63.1411 833.681 63.1411 833.681 65.4976 cv
833.681 67.3315 832.961 69.3149 832.461 70.6348 cv
829.307 79.1465 828.374 82.5234 828.374 85.6792 cv
828.374 93.605 834.805 94.7793 838.17 94.7793 cv
850.513 94.7793 854.705 70.4751 854.705 66.6558 cv
f
grestore
gsave
528.292 77.9766 mo
565.093 77.9766 li
565.093 26.0225 li
528.292 26.0225 li
528.292 77.9766 li
cp
clp
564.074 32.1719 mo
564.387 31.0835 564.387 30.9268 564.387 30.3818 cv
564.387 28.9819 563.298 28.2759 562.138 28.2759 cv
561.364 28.2759 560.125 28.7432 559.427 29.9082 cv
559.275 30.2969 558.653 32.7026 558.343 34.1001 cv
557.802 36.1172 557.258 38.2119 556.795 40.3091 cv
553.313 54.2744 li
553.003 55.439 549.677 60.8701 544.565 60.8701 cv
540.617 60.8701 539.767 57.4473 539.767 54.5684 cv
539.767 50.9868 541.061 46.1626 543.652 39.3135 cv
544.87 36.123 545.177 35.2651 545.177 33.709 cv
545.177 30.2061 542.697 27.3203 538.82 27.3203 cv
531.461 27.3203 528.597 38.6685 528.597 39.3745 cv
528.597 40.1567 529.364 40.1567 529.518 40.1567 cv
530.283 40.1567 530.362 40.0005 530.744 38.749 cv
532.816 31.4004 535.886 29.0537 538.494 29.0537 cv
539.107 29.0537 540.414 29.0537 540.414 31.5508 cv
540.414 33.4976 539.661 35.5205 539.137 36.9985 cv
536.135 45.2495 534.786 49.6846 534.786 53.3438 cv
534.786 60.2695 539.661 62.6035 544.228 62.6035 cv
547.244 62.6035 549.876 61.2803 552.045 59.1006 cv
551.037 63.1572 550.104 66.9775 546.999 71.1123 cv
544.982 73.7656 542.031 76.0273 538.458 76.0273 cv
537.372 76.0273 533.879 75.7949 532.558 72.7803 cv
533.801 72.7803 534.81 72.7803 535.896 71.8354 cv
536.672 71.127 537.45 70.104 537.45 68.6094 cv
537.45 66.1699 535.355 65.855 534.577 65.855 cv
532.791 65.855 530.23 67.1064 530.23 70.9453 cv
530.23 74.8604 533.647 77.7588 538.46 77.7588 cv
546.458 77.7588 554.455 70.6812 556.63 61.8887 cv
f
grestore
gsave
1400.32 406.795 mo
1445.67 406.795 li
1445.67 366.216 li
1400.32 366.216 li
1400.32 406.795 li
cp
clp
1427.24 379.685 mo
1427.75 377.454 1429.72 369.561 1435.72 369.561 cv
1436.14 369.561 1438.2 369.561 1440 370.755 cv
1437.59 371.184 1435.88 373.331 1435.88 375.391 cv
1435.88 376.762 1436.82 378.394 1439.13 378.394 cv
1441.02 378.394 1443.75 376.834 1443.75 373.37 cv
1443.75 368.866 1438.76 367.652 1435.88 367.652 cv
1430.9 367.652 1427.9 372.268 1426.87 374.27 cv
1424.72 368.523 1420.09 367.652 1417.6 367.652 cv
1408.67 367.652 1403.78 378.785 1403.78 380.944 cv
1403.78 381.804 1404.64 381.804 1404.81 381.804 cv
1405.49 381.804 1405.75 381.634 1405.92 380.857 cv
1408.83 371.717 1414.48 369.563 1417.39 369.563 cv
1419.02 369.563 1422.02 370.337 1422.02 375.312 cv
1422.02 377.972 1420.56 383.72 1417.39 395.728 cv
1416.02 401.047 1413.03 404.648 1409.26 404.648 cv
1408.75 404.648 1406.78 404.648 1404.98 403.459 cv
1407.07 403.031 1408.91 401.229 1408.91 398.828 cv
1408.91 396.511 1407.02 395.823 1405.74 395.823 cv
1403.17 395.823 1401.03 398.075 1401.03 400.844 cv
1401.03 404.826 1405.32 406.558 1409.1 406.558 cv
1414.76 406.558 1417.84 400.558 1418.1 400.04 cv
1419.13 403.215 1422.22 406.558 1427.37 406.558 cv
1436.21 406.558 1441.11 395.506 1441.11 393.364 cv
1441.11 392.506 1440.33 392.506 1440.08 392.506 cv
1439.31 392.506 1439.14 392.854 1438.97 393.45 cv
1436.14 402.595 1430.32 404.646 1427.58 404.646 cv
1424.24 404.646 1422.88 401.9 1422.88 398.984 cv
1422.88 397.098 1423.39 395.21 1424.33 391.434 cv
f
grestore
gsave
535.075 484.669 mo
571.73 484.669 li
571.73 428.823 li
535.075 428.823 li
clp
569.789 457.334 mo
569.789 451.141 569.403 444.948 566.695 439.219 cv
563.139 431.79 556.797 430.55 553.55 430.55 cv
548.909 430.55 543.266 432.563 540.095 439.762 cv
537.619 445.104 537.233 451.141 537.233 457.334 cv
537.233 463.139 537.541 470.106 540.712 475.987 cv
544.037 482.258 549.684 483.806 553.472 483.806 cv
557.647 483.806 563.526 482.18 566.929 474.827 cv
569.403 469.487 569.789 463.45 569.789 457.334 cv
cp
553.47 482.081 mo
550.472 482.081 545.932 480.146 544.546 472.724 cv
543.7 468.083 543.7 460.968 543.7 456.405 cv
543.7 451.457 543.7 446.351 544.317 442.178 cv
545.778 432.976 551.547 432.272 553.47 432.272 cv
556.009 432.272 561.086 433.668 562.549 441.326 cv
563.32 445.658 563.32 451.532 563.32 456.405 cv
563.32 462.206 563.32 467.464 562.472 472.412 cv
561.32 479.759 556.934 482.079 553.47 482.079 cv
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/HJWEKJ+HiraMinPro-W3-90pv-RKSJ-H-Identity-H uf/HJWEKJ+HiraMinPro-W3-90pv-RKSJ-H /CIDFont urAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.3%%For: (Kazutoshi Ohta) ()%%Title: (wave1.eps)%%CreationDate: 12/21/09 7:07 PM%AI9_DataStream%Gb"-6#BM]EQ5JaKJH#V2"Gi!Ca95)q5_'Gt";?SF!'qe@iJ-NqXhFJ?CtY++Pq83]+A9#k)mn=A\`>6B?1REEq=a2js+O8CjM<*p%=)V1%qX+N<St6Fi:[W;8mIp0o2<bPtKCnek\CDBAXFuk7_\$Z@(phl^`ShiDOB7:Wr,dT7fm7'k'oPPlb1UKQ2.e2YS,'G7//FZ<%BKBM=XdL9c'C04V!)M>"-8QQ7^UL(1mI$n5Q2Ga0KW<#M]R;f15Qe`Ig)$Suhtc]_eI,_];RO*)bsk'tBDbB%'Pc`b,:5XGO5!<C%bYOleP%pgp_bol;2=<0i\2>,";)-nDj/jtBTJ1!MSLlHg\t`8d\Ub>K^![`=0@5>B$\,?8b9_ZC#"$0Dmg<dnjPs8Bs)UAPqrQ^a%qt\RPrVV.pqrR:?n%\dUDa4:!Dnl4d[pT-jMi6u#`f+Q*p6*6g%S)-MO>TS&:W[g`-HleJU1<s)qM9i=pl&)_^65uCb]cG:HN4c/%mP/bu.]N6L3rB`:PGEidlCm4LeVKXF-c75lSQ%&X!p+IV@n']8IQ9W-UFEOU,K3He6ENBm0M=[$l"IIE:+($sPi*S`cn"K*RCUtd%oo,<gV@>XU*uu]1,QYsis2$#jheC5*KlI>`+p_,TP/9G8*tW/g28H[@JX*`r[CMk>#K'-'$:.#ZQj=E8ZR]+E%t!<Q;,KOu%#:o-%aYu=$IoPugN;oLj2F(Z\A1$(g!2hT=@Z(BJ^T>9pEg'gA3_$.M-t?%/",s.Ql%"1/I)f%@p!q:WA>*LaYLRa:/>0*W@uZ0EK6d>U%#,Vq@Uj>C?%Smjke/TM714YP*dAS),[C`Ic'=_3I@P`RN^7$?E(Z&i3<SFsj5eB+J"+p/8bR]95=GM=>N>q?WNAL?(97UGXAL+H7%_Q-&4q&rsT.&f!:l:c0gQGA`e4([_Q-$?+Ph'kFM'jGh"<aCP^/V00`\(;Z0R!G>0"([ca(Z6<9/=H;>c!nM2&Io"+X3l`+#%m6_%K#$_9!,mhNP?ql):n#9'TJr6ETKA_C#^GsT$nUR,0]Vm)1Vf#:kfuD\/pg8VONIa0(Sg]`h'*QX7]XLQ3*D*'pqK$KPJDF>/@MY1%j8Vm;]flNm%4;S\5&N$bWtG3E=(jr]fDF0W=eJ@[VVb/NbR`N,H]5]@Fq)(N&\K7!eH^+9:=b1T!1#TR`ma%*kqC"_/0oaY%qfS<%M]"4b5`/j+'SgM[T3Pc]E+ICL+U+5frdte#5`?ZDJ$<eL?Xc$"fGf8u6jOt:9n7Lfpsu(HfbMc6k#4B?9I[ignLr[f-.!aNKK8[T%Sc^e4BA,]YK%F2%ZVGk`#Qr"0T^))r\lo)k=99oXMWQ2A;_2PAKYcbPd$32ROq_1p6DY<!l'e_r/SU9<pGH0McISpeS#N`TH>',j%Md\mA2S0O\G'Au9*V_h$f'["!?qHf`BM7932&WdaX7<.%=oo^>-d64rgP5GR[2`eYTo2rg!<ONa]n2$@8AT*l2sF)"1(^q'1e"U.%:jrab^D>16OHhK,7s6#j48E;e;nZn#WVned/5IBD3$)HR,BNonaaC5E,PVi\$n$IrV<*aN$:XI%'nF+UD1iMbLP:\MLerY"/;NUi%DqOL`!"beg+InqGVnH(HfZ4V->U"n.bsu8plS12/>:jA:'EG:eLsAW4,(]Fr?MK'j74]@u1*b.s-o/kP3`,%DR)sl`;F(@a*Wb]<%W]uM*dnqX2roJea47s/s"t`r@)d#o^DCejFoH`/%)6Mgo@6RuA8sB8(il$q`epq!:S?=pq^^4:Ik;,QR"8)*lj++o*'Dh6lr<.O2%U5oeei,9-=0&8.\>pLBPf(=?tGdl8$dh+F^5(]*<ok0-hr<fs?i]8=3hZirP:0M[t4u-p\7H4F6^YKV/%E7sh63Fo80Af'.#3NLY%N)4=NaS1\n^7-"4pb3pLUu%Q>d/aq/f+W=pC;;+Y)>\TCbaWHuF3"u98n_e?2t6h&ScG_MqL^`nnc']<\Nsl^TF503EnJn\pBB.g%,n,_#Ef!!.gJ2@mFuO#j=R6G4A(d@j;Omd5q:<',WB]18F"jZW5`b[`1ld'+SLgVm.AbW1_C:T?@-q-uX5T3R-3D3>%/DZ[ebAcr%D\pmqK?ut`#'ojMKg%C-J6Aa6SWCa(LgVc))ubDX;+L]8GNKIQ6n?bC9n^&)&b1\a?8u[qg2ebsQOS@K?Mq;;We%_NRqbP4C'a'N%;O,;ce(9:_lkAI@=T/S0Sg@4)J2r:4=Q:1XNVTclrUNaurVT1CIei#B^\kb]QSia4*]$j#,u>VB5mu_R'%Uh++h0PZ^P=]]gfXo4%N/@d1$98>8d3)/X0/8';KirU#rqDM[nD4cPnK[tAJ1i!@oY!+q]sKu:&Cqne529:[dpQkEZsb<4'8mT)`BO4=Z[qA!F"mg=9cNG(%0\91"2]Zra2/lCNfg#DW@cYS@kuquQ_?fsgCpI(V0Z2EVBFPN_i\nkD''pj/c(SbK1ThQ5;A<k&cAe7dY[uS4[`.)1n@o!Bd'"V$%;VUdb<I`J+CZ(3RZbSS:pNeGW4aW*k#1=VeXA1JC5M76D03ZSs91>s@0PRsD6<OC:kh+RX%K1*?O=TQj7ru-""GjU!9s'^[lWkGi%4,1LZ'J72OX>AdnF6d9p?B)22,E)^`LMD?Je=!c.4_kl0#2/07@.&[ikW;UH,"pDMr(NCHX3l_.8qWNbTJ^u:^9@g6e9p+b^VW7:%bc'0#_Rl'^Qr8_u(\g#bY'Sn:ZKb(cBhdjP>.ZS":p4+K&!rQ^Boc+s*I.%.nRqubI@qM(LE/(d(MfTAVOQ4*qiY.=pYi&0B=J-,%0nt185*eFY3/hf;-B$H!mJ5a0ZD,dIhmGs)^+LmBB[iNedKrR_<V69]LJDK<pHqIb^]>QYRH5.fK/&%T[J,?MgWjdoSS/I83ks(L%qoSKSb`/g:VrcfUp8%-C9s*^m0bcF"Dn(tFAO>jg(<bt;2b!"]Qag/q44BB\<R%<0D[m<<M`0!cOV._s_^mkJ`p!QEo!`9\s!^e/%UAt2L@VPaE-A09Nf_rG-Mke**D\HeYo:82E>%Ug%YPHr7^go,9nqY+[_hie+ln.,>b_rOs>FlUK0PO7Z1L5T#XYB]")hVO1B'\p`%FsfiuXkAbIB(b2&HQ#5`P/1s`0Z>jJ<lf[4m&JOb]Z]6[XP^V9#LW1u*l=:I[X4YLm5g9[NoN+cE=NL8kTm-d@6bBURtW,hI5]$"%R9Sk,?fV$Dkq8lTCSs=1:V'/!Uj/^t)U>G?.8gV)YbLWQ.51#oNAm`8-&O@\/t!fGSgKGcMrf?_aWnON5\>(L_9BZ(XOHX*q$d)H%<5q4-Gt;%mM^aO8ZZa]5-\.8QEC+&'a9?_./D^O`(3WVZ`GdWhk!(5$L;F(p"4k;JWWqRE?a#bOW1`$q3#&)SRSGRf$012gJs');%cJ+Q%X:=CEr=Oc<lrb-V)pYZZ'\Qm&q`/S0LSu=1eZMJ8#&77?1'#5'_>m-[6JV(o:]iP\k'FpV]/(E9QTkhX`Y/>d'ca551sT9=%:BmlnJ?ds)BDg1<TDnE-ro?<C_8$!B0E9t^s3L-Y7t,kAliNaJ[&;JO?9h7JR\f[L6Bm!+h<DSmoN68h'iii#eT<6e/4[#$9bef^%VN%$07AP#t\;GkLU]@-jWKPUt<D$W<,Jh%r7"H'IR!/D3*/L,Llq:Ju#&jaq*&-q</#t6cLU.J0T21ekV^V1N^0o=OUs<Vcr+LT?%@bO+P:0,a]95).,'om)>"W.[KjErG:7OqkLD8\ekrV-<e?i;YXi]mG$TD\O]s!JP_O\Q0JOGtCtd3PeKEAYG"Cq`mLq2[EPk9rH.%3[kRe4`-ia?cl-YT<Q>J\T`"+Y1cNJ88inN2&&A^'f_8'0C2Y9o;.l+d6u2;c>s*0dNFhUCQN8V=N3%*(>?jL[o8b,a-Z2hkJBoZ%-u`s^C=f8mY!0MHmCA'^TV,eJfN_-8(#n>4hOs<`VOCiWGK`<-8%k@:&7,$(#K9)P!!sOg:dcS*W2$;Qq3Q(tI&[:chO%41WuI7[%nu^YH>Eg6+'9uMLB(M8%X.6%!D/5/5kIo%fkUQ&ml'P<mEgk@EWS4u,q$(tMKj)ipDpVJ@WbWR)UP\;c*s?U*?3YlMrH/$qm,;g<%94Ma`RlBe(C>A0pg=33%U.Vbn;?G0IV*l"U'(o6'U.J@MdXL),*Z`WN$M3tJdG*BPMM[\-C_=)L-jfd<I)g+qhb:kR2F3;7Ue5dm%dnY83VODJID7IBk@s5!$-8j)1l@Y04f2ut0>\0F\A9,b;*D0\rB]oFQ,b(]q&t#rI@=Q?KGI2qt!/MrOnTB+'>#`jMC[\<DB@7i]%oVEQL?%'OsTakgm?n^g<OWH5NY;51(=HbG[U(iMW>HS4"I.n,KQcsrD]I6cLEN%'qqY'OLTkKdbs,iQS`6.6$aaa9Vk<Je9bQ%S/%Q[e\qQ[adBDLVH"Da43LDa44"?iJ#/s7N#^ZYr),O5GEcDh%^=s0#f06[87$;RQ5Q:OdndrpJ*Kc!UMHhuEE!+'W=Trq$GFrU9dU%DuSr";V'"Zr`#?%A;>dD<;8E0Iek:&(PhtehRB-W[r4M24rOQOq;n5tqrQ^_qt^8VL&aMlJ,0-D`F&Z*5?'K7mAE2Kp=$eOp='$b%S*<^u$8qkGGQ73BTDngsrn2eq=9%X%L[Or*r%Y41?Mkn<)E4:\s3]a%oOi[Hhu'\Er4i4&&&/#70>IJX:VQf"?bdp]04K,hSB8DH%AiYgo0;:$6=R6ZrQ>p1rC`$6eP:;@nQ),*iNuS9a9'M",X'AqQOO0IlQ?S-!9W4[:*,?2%LG@tl0&)RrHf!M28K%+/(t3<@k\H\\%d[)^bY\E&F/$1UZOgo#Pa/kK(kkq^r-Wnqo(IR%/G<S/g'T2,aj1%W@9YbT;RA,<^(@m4sM'nFpI<@XhCYj^Q'!E0J]\Z6!CIIe;%YuOq$+OFNXGZlT;AI^].Foc0c+Kl,'(8j_PFGJ+Q`d1-sVA<DY6Np=6k[/QCfVPA`"1dQgd0@[<>uasb'Q._Edstr/)ac6Vns8fN%\+C8TL<FQU.I'M1l<<TCB^Y=uh._]I&p8j`W[T'=#A&6tdogn]*s6M(3-,+ds+F+^[SeLi3&:_lTP*2Y)>e'JMBhl+.dA/*?f6%+%EPNMSK%-[(=H<;BVVb^>Q8@+F@#C#=f=:YjZO-ncB@]Gs)bj!:C1`L2U0$!o+Q3bbW[;n$ZakRA$q1+dOF'GSQb:fU73_RckG$=]%MVEC@FZU5(V^`k%W:'CYCq:KaHWO0FV4A[YPhPtEK0?<'&@h*g_ho(+eudP1Yf*SJ(!VD;7;_*NFZAI?(+#jC\\c,q2rLGs8un77%r4pG=MP)'jr"ho!rT0*E#5A]p>m.k/YQ+N]o^NL#-R-%FZAKmU=]>K9)m4j<BhZn[=pWg6<#MCNh:)Zfn+imQJR<Wj>b1=/>+0c>%7CPEhppLUsIA\lA>\Q+Ee(E;6h8qtoUek]<@%5CFj%o[V"nq7i19/ehWi\Q-0[XOe?1fR<Ir?T:'%K#N:j&,Y#4?:.h!R79Ube;?%86.!oFfS3'!H=+go]EhP13\T8EHUQ*a=ap/-14&6g0FChn)t`&M5s%P(:&E:bX/<!88J/Xo,G8eTFQ#2BFc(49P7WO6NU=kkY*!u%kcM:4]tp37Zoda$!>;G)f+]mR[G-lOT;\HtgP0K8)6t%"9]nr81ls8e@NPUJ5+V_2A)/'2Yf.c&97t98c8KF`N-Q"::PXF->%As.%"OimX_%JC*N@=eM]E;D`3Eup(6Y#!W<s:=6'RI<k:`haP'-2tB3EjtcZU<jZ$cUC#.CC1).k0`o&OF[(@SR.XLd\3tq1>8DRB/'l%YfsdhW+Y)Skj4OfHj1oI06R4:o"&lELPWUO@al<Z@5dRM-[MX!k/Y?YL2K.N+6AG<W9RXh7Pn28?^+U9JJgfanQj^@>HVh9X4Li%%kQ\[r7a7s-K4UI@%DU9[a(($eor3/U5O&@c81IB$n*0oW.DEA=U`ba?nqM+`ROOMrTe(i+#^R=M^NM_b')/<E-g_0-"mrhnV3CMf%pcUg.fIl_QYOa_0D#5#=iHd3p5)^lTKsSt\H+`]qI$pM.\rhB#\r>@b@.97#(>4c8^e5Xn:L="fAAUE4,St#A@'M(T.^h?El!g&%%'Q5MD7$+B[L8S\?XP\Li=R3!8CI3N5Cu-4o4;O79O-atXdH=5`Vj0]N<*d4bcGG@;Ho?4kTDfZJhcoI#5&ntID<rY`lUMl&:X?"D%`o#/2<*CsSP"^8c?]sr5J*b:'mAmn+d-Fp&(g-UCf(CNIJ%:W98'0.G]UsX[B&4bnU^S5]Nbk&`HmKHha7jC30]Y[bFmqGGDiV#;%WE6C%IF4+N<7Q1P@E7lam]A&6fS@r)c#lC_cHLX>Fco;KBnn'ajaH_G1WT09L0;(5)Ae1t-f&\;'7CgGErF-BgG;D(g6)4#kUeuG%^$):_p@DeOh"/0N<N;'41k&NsjPl`=fY](rQXjjZ4W\rF02DY3nal!!&d^,cFDBYaOe0lY.C@aP?7Zup[`C0:\Yk9jI$b5I@=?8@%;l@sbUdpQ:0ft#"`Lb;<&r63AD_/8GFX]J-&'lGfl)Q2ZkWQnacJ].Kp2"2n$(Ze+LM08N_Y<$D$%gW/qU62QEN%RS<=&0Wn1kqr%-QIE$kAcN.$)7a/\.r8f@OF2AV',d*3Qie[Di+?rRB<(Nk2+b1W$YLGe9rH%B4j4XPs$4ZEp_YS-;Jk/=0HipK`OPffBEju$WK`*%#Qo;`#=(=Gmnb;WLs&,nFLHlhSRiT"_=1t0URS8p5<RVJT_t'j[uZTuiD0>0G%6$#Vlhi?Rr#i#r(;FO`!7')3nUOA=C==IH]P]Q%l"QrG&#nlBp>`lP)1I5@-iL;uOO*RT,QR?#/J>V[9u[++eZWsQF^9!Ro3#.ubef)>1lM78qTG<,eoT\]J$BYJ$V/snPM5RM<P)A9%eu,BqX99%269NJ/HrF%<SEnDI@a@42liZN)ELnKIcUf%M5iOAXcN8:"]q4jQp8V@J3Fnrob:a!V3Tojh'o!@F71,rN8g2`r+>Lk]%4L:6\]X(u=Vhdb.O`DJU-J3mj_%C#0`L+<e0lpp__fq_5:W8qB0bjte3COpbRd2+*9`e1O*AFlg=(^rn>=;5tot+2aOh+Vs_+eq!%OL9L5aSEK>R+d_A5+-H2@SbN,HQM*!B<c9adem&`/ZpP%=(k)"5VtKYTF/NYFj+"FjBX^>PC,:\89rJfDa'(bS/9DLgX#&gTh%62%]5D#2j!T`o0CCY9Gal7m+3WM#4dn4)WS76e&N!AY#S#!uhWYc?GPE@XWOr0,0td5>8;B?nGEuIEZMifm(e-T8B=VEQnPJ:L3-7uG%WR:P&i:I%)ppY&epjSj8gUdi=4\+e?p,%YUN-krUd6p8#]nk"4(ITJGl'r4SM#uq+nFjmaG?YCfO<kNO9bO!sc?]8/01m/%;nur,%1,=C=1"E\pd5TBCC!d0Gh)u1CajoT(<IML#E)0uC[q)5#nO&SN#&o-N,>CA)>,gee()3D#b.u&j@%<a2isp7?V"As+(3cB-#E_Qf%I7RUjp9I*>'t`EgaH$aWoMY058AdqZ8X,bVBA?9a]#p=E1f"e39BE<\,q>$^"[9)lM9>E]Rj_phC%OLlD-%A>G!![Vk^5FHNun=C%H(BI8olKnQ9&UPB8nlp#.T'9*W&tN)nF:OOHKbm4QVtR.Di]hG@P88L#)1-(mD0j(^:'J,p/**X-g:j&8>OF>kB.25>j(jWQQg0D%X4Mb+c(4=ZE6NgcLNbrill-apa=2#GK%kR.ga:aIn7)0]T>B+*6+rN#?cU2o<'Hj^7gO05N:EVRN:OZPhm)+T+C]\;cHo6LpntW)%(O_2_PYbL'5^q;CJ0-4H_FNu/5n!dP/[uao9$oSlOt=LH-JO5m0*'=rBnM*jFARqOd_.<V(%IPg5mbFk+j*ce6!UK(FYqR%f'9lm%S#@>-i(XEAG3$8nK`%E*Ptg,0([7r9Ku/&D0t)^mjTC+oq4kH##\'3A)8NMUO?S$c;-85`e0nRSDfpU)nhl>5QUV?dOGckXWn&Ro%o#YC=#+AG^OqM"N2$%#>!/[4q]55LY2Ri^W?omg+cRjQ8_"k=/ans!P+>\C^-$.ng0*fZ-,j[Lt][9abKmFLr0Q,4MRR2f8RN;0.%kH*m[.Cl$=*[0!5M8NlafGVlFYO3I<jmlJV3h^X'SI]a"a^-?qYO`7&Q"*_KM[/QSnLJ(u9).96;ruKDJa3W,pr4l:p!s3/Ya=oP%oPQG?).XV/%PV$0SSAtAQj=O(MEOJ5,r:fA@8Q?RD%IZJVgXO/*eNmM%qK80o'SMl7cjei-hOp,Ei5nj=mUK7mPIp*Md8ud_c(&>%%[l_RqC-0(d?/objOTuAs5`7a_aPKE!@!an^5.dI`\]J&.llGP2lE'007n(r%1ung/O!gjl0pELi9I+VP>CW=Xo2gfeHoU`A4-Sr%;I'd-rE6Ysc^$a=D-"91X8rS*e>*pqN%26bFhM#_SBh\0"4:#h=EpEk_et#*$D<B>_Lj4irj4jcjuQ`AZnjsP[g?RZG2\p7=dU4O%@PQ2#n4MPR7A8cC\)\B-iYZm/WfE5`G^JpKG43_[WFXg#j#$_'RfQoF"q?M<lLFI"oDWQa_gkrCEV3]:0O]GkrH[W.7II#p'F5tE%'W]jX-Zs/;*sfq_`-^MVJX5OeAn-MCq*aZ(0=2>mT)AHE50W1:X#J0B)b4&Tnf@t+U60?T,(4g%]V/TTnJ+"0<R[PN]rEuPXhm<4%s.D@h:E;jaF4IfE.Pq+'Yde<-\7a`c.XgctB8^'D2ij-tjF$r5&&p9kcZ'1;`;.LodZ-+O5F*`ig:j/TMs9.L9p"6.6ElI=$9Z#!%@OG_/I_bNZ>4B^"9Yp=j2`X+4.-B><D\1RO4m7[Xh?9Y'>s@.dg"t+Ml"$O[3_A2cH5uI!:NZr[0D9te>f*&n"s@7NU+^jJGJC+e%N%K7nd^29QZGoR8046OM:,t9OW(4UI)PY\MT6_dc6.B\TK/,UWB82=Q38=0jJVo`ias^FM@3nL6]sWFPk,F[o$^pRA?'efdN7tH*%Y3*ta<Gms_Fr=*!=1rEg*:raBk<&`+kFBV*MMH?`:Z'ZFk%>,P<^>K5L>pFHK43/c.c(<V,QAcF2ne"J:.3&GIT;HCjBAb\-Q)cs%QMa@i3X(B50&Rahh=)#.6`brOc61^F4:^I6%-H2<f_2T&3Jh#Z!(pPBWcHe;er1m<*0Y`_m^,5<3C+(On&fc9`,dElN84R4]8s8/%!7sA^QqX%%*SJkcpll7G*rI^Y>PHABCb\`"?n]/\d[t&g/lbnRJT;[MQC]RDUhniF._qSg<OKY5CQ>0)^3/XQB);S3oI,%H"WcaB%l#M[H%Auc+m%8e?Z%J8>;>"4kdi\qD]1($*%elgZ%B\0^Q$uFcNg<>3BB8G?/Iu[VAL2hm%b:J@nI[lC[Lo@66@ru>n9eUSfB#N;%+!2Q]?@kN,:$&_+U0DJL\=U[bf*lq"?D^NEC6eQD%<pm5HZH6eEl,K#5-Z1RIPj)&JiWg$!ac@uWG3j];A_(C`tjVs+"W1M_kP$P%aHF_j<qeQa585kSRDuc=2`U9ph"Ckco@G!6EUlbs*HD\n-.*5'^7Sg=ZH=*\JNh99n7hm&R)k:;+]/R.(@h(EQL.c2VO?DZ;$[^p%Gb(:nQ)8RD/<<4:ku--^mOWP7&!3dVGcmQ!8^F3$2`Jj31HG3K<er+N;j!F'<ONur$fi@sV*b:0fZ3p"L?8DM1GsTqFt8YC:m^[t%B6!DpV"9`P9?p;MZl4P75#]!q.MB?\?8tb$>M9#CU<KnMDR@C#Hm\MAaCgZg]Ah3e=\?X7T.0F_.JH?<;(K'GM<n+q)W8Mg#Kca(%"2,tTZ[#4'fb'^p;(ae6/&7mKGI'):*H:RM/G;J?F?0&b71.#pfAfG$==+q'AT!(SS@="f+-'m,?X$+U4pt`!ZMqJ-0,_P$plm2i%n50Q8j<khjFj9_i&]&pmW(M@EdSC)Hj&+a*H%"^=bljm$-sj*_`Ri'Qlg<bS$.k<Q%_10h8rp1%64/+VR!a5\!poM5rHU^jJ^4Me%TW6NDfm[cJ`ZEML9.7$OG^1glo<r[[Ie^Lup8;uH$LYr"C(=Li2u\oboZq7878?*=3J\eJ(9:p+NugK>";Uc\cPFgm%&b#J0^HXA%2BEZ$ZR:$2WHXD^b@ea<*jSK!'q#CZ&*AtDYE&hgm<6(8U%uenBLRW9e2<Yk_9>+C9IA%sLJh=:eKFY<$V20Y(>d+$=Zr-FKm_ud%`$i_"?>q2Qd+:B[;jBoZq8su7%8EL.TAQIHXQ*9UHC9O'B\oP^WP2<E(P$lnWmub9ZmT;o^\#kq8S\g*.8"/q'20R`i4L>$5f0p#%MP/8d[t%Fr7'>:7LU,%]m#/(6SK`b?bT]rYR0;mYDnTQG_K1%nGThVJaIJUh.$?^0V?F@?'LpC$LjOic`Eh9N:X"N\8mN!p72M(-%NFl;7)lqqb6u7'f*?oJSeY9Si_sE$*W6HHgmNHUo'</TXAXW3tJ+\%\l#XgJ(,G];HZA,X#N6K'A8Ljb/p^Su.N;a6]*^H\:\nRV%"3gJ"YZqi>BE4C?"!>_^[?b%D.8K;PT'Kks!:\O:=7>JgaKU$p4m2cQcb*=Ff(XSJ1!7,(3k2K#WfleGX=*Z9Q+>&VhH4c<[Wma&%U_o(=FR$M]23ET5'c8"3':_D4=37p@JM?T7n0f0")!"TB_IAA1%XiWcKs-U^lf5qj'6fCDc?Cno^)2"d2<OPPo.D9NQE*ul1E/kQ%!bSs'\*YC'H;ih!^LH=LlfGKWG;^Rh"0&_l\V.k-A?6.7Fu>mf%[&'tjR*oGD\sG,(_4Us\4!4^(XaPB@"(*_TCj2SOb[I2>tDeX%qg=cTQIA\b(498\T"<O9r@J9fZ9JH:(iZ!/BB.HWWHYrW"k&fOGMd9ON?NBcCo@3YcN-6Hl&3l=E4g8Z&:f34/@mtFBfBJK_9ZF`%_-b*\gUd\mX1FX/Pf27o=G##C\70Go_-$gu%aSk;pDucg@\N9.XZbi.[FBVJ&980o$AcKbGb-2M0p[N5H:BODlZHuf?Yo5%H%/G6%j\n+[=o<<F;E,0VK&("MRJ(:E4UcF8'B$-&apGMRCe]at3u.Ga&!5=A^j(B@jiq;2p/VU_Z`=eoHMY,T@<Duo1.bb`bN50#KP86c%Rs8^7,:nuD52ess$AVm^!3CW&SfMA?fC'%!o@b@2&IYhD,:<'fki;N(3*7noe&R;;cMNd5_7S3!@W3Ju-+p;A+[GD\bC,N?4>;!D%O,pVVU"PmJ!KIn(Jm+lLH!t];@h2\T07Oh1h\OP#A`s\R^ARC<FmE:alu"2fop]7f@nb`S3X5qA]\*ZsT9.?KXZRiGNN[d<MiPH`%&rA-m(+KEHjW0D7#q.#O*peRp>db:E,c.2.\lMr/B<S<*UFRgs4r+:3mcr^fH<m=^1"ptoP&GUbEQ)19G&"Q:n4d7gJS7A3Dd]X,%O3r\i<&S9\JQ]LERXQgiWLK[NFnTD!4LE`eX#5:t%T9_$_B$C)2_N)FbIm5OT\!H2O$P3F!rL0L8['0F5?"ue,CfF(Eu:)64B`ff%\fG]"mC_=Tk?R9H^k!7B,WkO`OSQ_",0?$Mh[5=+8.4("cN0oBY74YBP8=JE[R*&S-cqR=H9*f1e]@+#i.V6C?QCEpHt.*"e4gJ;%DjZ%]b8gV/8"h[OK/ice8$!:4?OR1uR]lNXj_VYQi-j$h+2nHYEu8]?R3"(s1,H:#J].l\Zhp"6NdMN,isFBoDA%')0kdu>HDc9u%QZePkSMMFFLdL9e=Kc^Fi51r%LIgBs=,N:`7jG2`*cL!OZSeS7hc%Zj"$WTQ.JpD+T1dn@lm*K\rf24C]_pu5'F;Z!8WL*.ph(A4%K-r6J%>FACL#+#Fo0t)m"?`#g@+.aeIA;CNgGgcI\.ua:#:K.hD4(U9V!qML]K9sTMrIET8pO2#_XBDGPM9gC"cb5eG+4CBqJ>"h%08'ZRCj(QGYrR]%+qY)]SM5eV1$MGUEk$Hu1=nD<%doR#*C\A9q`N=\4PNccYI-E)DSZj48<q/A:+\Z'([q7AS'?5&jKlD"*b4\\%phk/dp&-ep.UKN.0-@JX+)sm>dOB5-9=o&q4HIbqS#>auAomYO^WfhCDqKG7++Zm["'f[IM83iS.J.X">Qh`akZ\t:InmgFZCbd7%imA#1#$Ca,a@R(M9P.^[3R1OCB*VR.-%B;7/PtVc`E2h;(_Jo$1FjKtaeCM>*_"9=9Ms-G=gl^k_>Z\IDk0YeV<8sKP,Y4!S%iLh%8O$L;Xup>#Rj5G9(7/L._<G6JU=JMor2''m<HQC0-!E9V$[oQuKPIEgiPun>:5an&:>f!_dtI+&ES+s!D0OO@hOYd\`A::+C7TZG%]"s%hVr>P2`oC&id4+>aG8k?^')?YE>.)h3r($Bm6D*&3F\:`lh4eMZ%P$,T@B*:pCTuJ:$AEb(IAZhD3gH[ed$b0:CMO7m(Y@or%nM0GGpVO$^4`:J[EMjdF86>IurfV-RTMAeYW"aUc0)]pbHDe(nd(Z5YZ.&1WEH8#.Bm9Op,p1Vu]umkr^V[$EYu?QdlumA.9BW]D%/Y5lSnkm*LTW@<;):boi4$CZo6Pd;.>Nr/RDpoVqL(E[FB]r]rdq4NZ:MVhm;]MAYFB^^cF]=b&\n\-sgLrrqV@K6Cc`LpLq(jZK%RKJnq^,Sl6(T:R4g0BQ<0i+d2RBk:6l0<ug[-;W]Af;!OrJtEcEc)bB9G<]]D+)(dd_RD:Bm-8OSR.AEU1U;=HeJEVo;^+opuETu%Q*6I!Ve,_4P0]cT<'.4IL*a*'=;Q7le]Vq!9rl_od3)b*lCCt'LUCI3IA5:AE1"Z2ksBHo%4BVnBm"_nh##CG)P-"QpW;V]K0-Kn%Q#hBGem:3qrA^`UdMeZ?LP_AkRn'SZ^p/NmqX?:Y^[eB+q"=<RV:k*t3Hkt?3kZfqEg83D'Q:T6BXLSV4=kDDC7WZ5=2%&)dgkbC%&</("cI$I+m=St9m*oK7Z6hbBd2<".lWriKqUG?6RX7RlVl+U4Ukqm:?EVc'Qs7t;^&N3$a.6E#<4YYej:(%.aB^qD:oD$M<d<`d%,u&!N"E,peiFb58GNQPIVneJuMpV?@cbj`KqC%pab?6"K3K7?.ThY^USVHM:Vp/Z_3k_aH3jhiLlZ_,5>*o#d?SU/nl"TRLmI\%t%WQ7Lg_"cr<MT$N3I(RMA<3>977`?_q`D]&H;_*W_mYtlED[0Q51hRt$lffCNiGtme'PeMq`-%)g^*]-f:Ph],B%>%H#6/pC<:8%a%>#/'bV,n/eV\Zneo*fVQ]8p^?SKk;LV)tfW/Y\^0>Ul>&3m<eSW&>-&)K.k9M-BJuWV&)9e88QAoqr*8!VE\'7C_OHS>o+:lF'Xb%WLV>^dgMm)n==>XXUt4sYnR_Rp#fDpI5mS@HM`GA4H-pd4oHL0*Zj-pV]s'N,K.bqhlH;@F,Y@GT?pb;P=-qVMJ51ic!`5RG<)Jh%]^6tSDq(W'e'9,)G.ctFSlWu(mD4K'`4An<lB<-$]\RXkc&].trFtJ<;EIH$+134\/T,CFXp_=03Pgku(?O[Wb2t?(ce,-fc:9HV%[RBWE6iC`Goo,E,eDOBnq26V?1;8r7c1p(<_$,7/M`KMEbh9%BdaQ/MbIu1rB6K,GQ@!5l*4JlaB:'(PkNAX()-@qmo!S'[1]*PX%f!:@IKHJ?mHm\7LAhrU9f`SEXBA@9@p(82Pc1WOLq2de[gA&XS20\>ld?DX1"..EW1"_Qu.r=VRF6t=XF8R^G4RKY/!Y9<Zm)3gQ%b^+_'*M;3`G[oq5;C;-8[sY*IGIK_DS#UZNCd)NVHB@S!'V0gi'=oL\[IgRjVk=l6%kl[@S\F?1>4BLAEkgdV*/^<4(NIbfk`hBU%)D).8hCBt$VhL6A]E_2GVnqY\`@c<q?bMSNbt^"%Blj^5,ZkQ&lCA-K:Y8:&Ft3[aR*t=8gCB[C,0QZ-G)F.8V;3o\SOTf#+1+*u%qM6JC/U!qP['\tA]=+_pEA,p,rl3oB>e_?>0O2j9;_83G/*?--DV08k>@=#:&sbVoA>G]%JXq8fPi8j]I@%tM+3Ro6aGL\(,e\?K%.ssI!lb_m#S;1c)V5H8u">t0HEQ+L)32UA68=-M,V2P_'IhB!@nHW7CHat^TGBCZGZH.(1j%=]K([%<pWDL?\T+3sWd=0/o8j;FZ%iX$DN5@qslbG)fK@;(KFN?.RmcH^i_0;g@C=Il'sa5RL-"#D\49&Z?O]JE\P?o%W\PWU<cqL]E\BFN"Po<KGX4B[0Y/KU6l]s9n1%R/f;Ii9#f3En1!AfYmSo=h-FXiT![J!i`7Ckh)4kldo;`.u>3-CD#BC,Ej:9YfPS%+7f*01Hb2D#V9h'3:SJe&j.FckcTs4L#u&N%ZUDH80j,I%Ld$+21]_lM\0JNpO>fL)e!+o?W55$/(Lpjp=c\'D`d4*1RB-L!p<^Ik^<(-Ncnl)m-A3Pc=HCXVYu6K0S)1"(Gdr;)%DoWq>m'+r="a7H>L4UnON*Di&e[?"XeBZ0V`Pg7WG/`NQ;tD$p:Q><\DZ#O$R4C!jLN29bCp@c4,B6`oG#mnLrgG(!`TOr6KIj.(%V8+*&,D7eul?HV`3u#9;'ZXUTZ@RE(VPPl@@4od0*oM!-^gu$1;/ND@ctlC^.>^HYdiCGQUUq$/AR`r"<%$/j@6AhrJh$#dASZDs%]&'8bi(6ZQZtSX%QW4rB1=<0.?=Q:K#<-nYM7nog0L%Q.PVqPs47SE:AK_qZ7rr3/5N@7AR,mqBRMI6Q/djE0Op&PNQK0h_f9^LR%X@FbZ?rddG/]"6_1WhREEHMWrY)92V/so>9Dm)F7O,f,FZmS__OQoUs@)ZqO^cLjBonS2OE>TCTIZ.R2%nb42ZrB*^O:HDDV7:as%KEo<ao12rf3&K"XV(65PdVZ4;Ll\rJp&-^:0HWtUXXUn8)`K)[.)t;1E6GZ/qSuqRH\7]:?FS$%qf1fZhB8]RBU_>Io5*rGR-!"f%_Jl@"&$MEq8?!Vf\hVA[jeEh1japf7TiDoU7C5-TeE(1<"^=u.J-gWFm"m3MBFgrPM4s:a=NNkV@],8^b*ANj@r1jAN1n_kRs$#i%cUF$LCp6Sb<NAP.LrIS7N4=Ds5g\rR6]9Y9-CSJ+#@asAgP55OFV2#D>NeU>29QPLBl[5eG&h'qinj4a6&G#G(sb\Y\3N,g^&sd%%6`.c6/1.f"fS:5nI$>=[LYUlF*0b81b<rTE5TY'S7WP@(0EB>m5>(&UJH#J4Sn#2(_-Al&\rik_`7a'Ji;@Vs4a1M)Uc\O;ho#@-%n!'bTRe(Z:f]6H1'V<&rOhkMa$s:(dXp-H4$M#RJ")C7:QN9`Si-nFYa[gf,+X_7=,L+TI6m'AY%a9/gFF=JU$QV<Ih'FS.;-ZUJ%P'%HU3<G.FZ:H1[al=Dt,i]:/]MZ;jS=7EUK7c@FI1a*$2d"eKJ6j/CSL:4tW=g;S^6_U'9G]3>7lTi0OieICR*]G/&.O-6Ku.2l%NQHt@Sd)_TI3-.+.TC-Y]Pb2-JBu7al719KCG78Wj>.H/N#\hBl_M6.:oOb:M8:q_K:K$mF)IGnKP+l,(u1-XcKhC2?18hDnuSo,%IjVkV;EU#tg>m9M1*MQ]+4K>]'AS`O88tZC-L\BN!!!dgTL2*+,)8$DSVAbTTHb7p#'("B_J?J-U@&kE5!5-I`PT(mPW?e(F-]Xn%VH;`M]&ipEFB4*bZ",N0N4dX0=/!V:J#b38R..ROA,=,VMC0XC+a<UuUK)@q's4G'nJSgrhInaGHfDOUcX(30d:%35a(Jj<())iA%2s0!`LsG)/[VmeM\k2]ogNeQ?j=nrJ_X?,]gn8Z/2LWg:nS*T\kFg&c6Wmq,W#eG2dj='QE&8u$Ro&,TdE[Q!-LjpiRA6Hu!OZqm%%:5*j5uT6QNK&bHF9`*jgPDW(CJ)Z$:%(dQBHuBI#MNOGIaH"f_fj8n&H,XKI.E+3p0g(PJ>Q2)/Ff_&PfKLUc^)_*H1\Ou\?/-j%&J0(!RI>_BE'1*BS&_W>l@LcI$XkCE.Kb`(RX<@-27&'maCKR!\b/EE1hOsB/S<[P_eest)Oh=P^X/M8>LOouBtS3OTI*ACA(Zg=%C9Q<J>ZM4!ll#rA[NZR<\i]A8m?e>FZD\*aARjKjW^U&=namlTi%92<d]e-r0k&NJ=Ol'`HaqsgIfHJi[30/CVPPFmVQ8UTa[-FY%/8AuorEd(4j?[H$;QP:c\JH\!mHcHRE!F8Bc4NHh1tmsNBe5co4/A`1e<bk=*/6TFD(Z9?A7=8M@]bpD0^d`CMU2V1beQK8QFsnL%&3M7n@;%Ei\5V-%`LsT:&>[nF)]/reC:`_[Ib`Sqe?(_`9\[-b"[-0BLKIZ.,qW`bWb<t'B!b7>h,B0LpRpi`edeV,)Nk4JA:@0]%nkq9lW:WI+V[uLYa9a[%A5+;NW@+"-O__bQ<+=IDo1qT`.im"V&XU]Pe'IduCa67e;lH[WcFRi!H\34m5[s=+&h;^"E,;7X-t<f7%R,#W/2RABW&:8&`(47Y+,/jl+^dpR5D7?a4\@?ZYpjf/NnW&WfagY6sR9Kc`/U)C:?5PQRXmBJ7Q-74.P-=]8fhDrhcro`4aeA=i%B$a+)L3C_5P6OmdB@'4G$.pPZ:-XA+bSJtcLJH9s8d:h3Ed4K%3rKIJBsuqP3HY*8F?8*,)s,H2B@'5V"aA(^e'F\NB+&UL6`6PB%a%EVmF6N6PkR]*0,DT#YK8uMGAiXu(J7P4X2o./_n%K\(FkR^8?RCM<_UAmF1()gNSE_WfC_T09l,hgD)"oC/f7'\>4M<\o)o[tU%n*rPPjY!D^i5FfD.C3jA,L'aGQX1;rDEONE*hQ2;7WDNKo2Fe1R)kdR4[5e+C'UE@o[?4]+dpK#2"Fo9$u%'?P;c4)gORngk"td#%No!,?r:NrP'SNkF9E^"/G1i@KC.`_k48Z'dC<qZmWMrAC(ack3)@E3Jn"XF&NBP;I'?^0r=\2*)DWX;P1q=n47O8m^.l.<:ZIoX<%1Efk5*GVTN+gA$"+S3u#cg"=W,7fXq,h)HQlbI`g<)ZIjo(_iT(cQK*+Whu+j6;i>8MhE"ElT?OFM2]R8HFAg-]d]J+Z2tuZ:V@M%9]^goQU^8Y#'kU"X,Sl0FRo3;R[7b1T3LTfdS<MH1m;=3WjG&#HpKCirq]CZ//tZ4QcE_Q")gAa:GkIDRe+6Z*hU<%BnQmS,!rmr%K*3."j2*]p6[R.,j%1/\'!Or;g:J/*5g1ALAi#7j]/1jYr3F@9ao\,Qp6.f9N%&&@W:]ngB+0X8DD#9kLKeFKJC_]\fYc35)KP",%;9d`lM1[Zoln-NmnioOu=_p?p0sj&eCu0iHJ[5NRE\r[/H50Ia$RS?"EZ-GRd9qlJ4!QduQtELl._3]9h[gd)r<lfCEMG(q2=[Q;%\Y'64'bac/*L3*qHD18^ls,qnqm%%ieNbb/Z'+F8)OLr-F!J/J9;;(s,fgjB*USe6AH^E3qUe;0PN##/\!Wn7J<O\f<Js3WEU9I-%R<qFOF%j<+""9hL.nuagEFt_W8A^4VWe9$H,GR%?'G7SlI+%W-#\S=K)q8I@)24>$p]$g;Po^g-P-g-;7`;S%`QfMBqC(bo;R>DZ%*6+f-E3ZrD7ap39?gR-AJZ/gDg<gr'e'Ld7AG"/G_J*\qH=Thb)Qh(Oh81CX@DX7!0peN1m?',gSAXYH#W`p$kNGB,";K!6T4;Go%LMBFa/o(Y^Cm'u!^GT+]:"s&-k))@+7nf_=RQ*7-/4Rp"`UoUfR`d72,6+#kL6bPg/f:FGU!NrVfn+s(FiI,+@Nr#$9`CtCiSr'O%*OhN+!"fNZZs98E9\,qF7Aq9saCF<q.[4WlK-[bGGk5A0HoSYg`b36W4!/@lo>f):_\qFcIe)IMPOt(WELXG4T+>Qu6?SWB3/O4X%ab\\q5+LSgTR4e9dtrh=<R!\f_b"c%;B`q@jhn>XnB-^"IHSL^A9%#t+&:]/e(WA%1o>W@X@E?;+I:f)9I)G`RaWi_`'cq%e/i9F%i*A4FA#61080T5CqbSYZ.r19`S+#k+G3$ZLiFpa=0Y![EF6mls*"beRV.>d%UPNR-1P""bi(ZX&K-Gd,<g$nZ3MR*M2Qk@/))c\"%'UJJtp5b2.9ed`YI/Kh:*+M10)4GsNANHA]>8tneKf3b+BT;t\#)q:k3a9UWonqMWO:5-c=CX!pf[,k:g8AY!L06IdNW_7$%F(Yp%=sM70/ZK)AD/<$aA>HXEmPGG.2@I=tI:f;3mkZ3]IQn^LcX2%?80ndoHc\g4G4q)]MV?`H,8IVlO,R&&]k2X#Zm)YK1Ofc<7-Dor%;aEnD)fpNqXHR(.^9_1)jY2j.\=Fjje5G8$;Tqg&O*m+&c$&-RT_FQU-W27W%/1]4L"k=agaEn4q[B3IVS]SM&I.K^4/]sS1K7`S%AVj"UXL$8a9NZq40EZBQ:\"JlitLC*]@'[0=*_1Bed&4[&GoA]!8?(VN5i8)eaKrn@@G>+L5e,.1pbS,&t=_0*50gH&M"B"Of+K=%C7O(\(m<mSD`L9XU7h0h:dp($NDK7EktcISqV>!Oh$m\uJ\G*gf[49h/XsA"6JB**]6g$VnQJ@_V:TPO=t5KFh4U2SS$1TS&V5_`%#UbR+Vk;B\o,]:TF`D4MQGfqj-+ht9#Uu!LH"W&qUT*nV<-bd=ZZC6_WKgm.F?Sq9]=n%t42mP$CNLIY`+`*&)0W30a_nPKG,OP%%D4smSrB<F4]X*:Y7HY;kgZ4p$;oNm!kc/@A%(jlu4*g:dBr->;ooe,8KVDE@I=*\:m0l)RB;!Z"lEm\BBn;*+hT%Rb37R<Ep3[^[%COt*<QXP*"00'`IMTF>']>rh(9Y=BO<5%Tb7NU$Z<V,/Fe7PGoq5X*:4bt'%=]@cmrtnPCn@$rJ&?'ohA)i[*2%B9!0ieM$.m9n:%V=q.f=NrZC:[27"m<bptW^ep^`a!5Up))Z6ZG-.2k3Ldh-9:m`<f0HFIGH0H[WEk0E&YfB]4=9dT&-BHnVnd!\3?Iab`l2M)11=#%\3s)5I`D,r)-o.0Aq"K-WGS2XC?D*"ZTpIZM8;<f&H,5jfbBsP5#:PRkQHf^DqT5Ik/E(((_bSEC3G--(N--e3ji3Rj7?\;c)+G2%$!Q]mcDFO`V*jm\heY>2bd$LtRnhFJ^"7'][6TmL:'`S@9kP08\=[Ru[=&td^"6Pql/ZX&k0du4N,4tXVnVo:mqb&PS<853e!W>]%C<(-O8`7:D9;f?O\l1MXRP;%gS:pd\VGeFsA@Hk\flUu>F=K63m$LMF[XQ)]OF,0J;eq9FiSA!%SQ[Y:9$YM<flYt8CpRq=",Q=n%RnbQ%DF95JaJMnZV:3Mjg*)q\:%M?H<puVSVoE]:pEo5ORndh0"P]2gc)-[`i%VHC\'1^J>A)3OOfbtSUasB%Xm!im/[O]km7L)l%Cme!F!J[7>C1hR(Rn]e=+itTi>"U4^e;a_UhVXAIerk6I=[Nok00tO=_ab"PJ?mWB[nV6*j;)e'@NY?p)/'h5]!(NqjgI3-mD9j5%$u`S>+=["4C>TD3QjdmC"ji[T7Q8`+bq7b`[]ibk[+DoqcKGU=eKM%`GG%6i+_O_@i[mif*(C0.@IkI.ditNI@\3\37<G61Lt8>^%PYNolgTolVh//Rd-MiY.iaGN\j<h(@Z^C8"msNA#p0AM@FD!@kD@`XXmrZgF1lG<(U-%s\8fH=:D<OjPnsVX?O.u3>]+&hHeuuVg%3sf0ZU:W"/4[:VjmUG)IS?)3%o.4M8rLDGueg5dWF"U6k58HVBKJZAu;i<fo0\./Eq9E(&PVls#Q'!PN(Y!.(EL>!C_fsQIKX[?W%,"&SkR)3CY)n'8r+>2igTo:bsA:dQkMf#iYK3\#F'>&@\dp\n8I?4.-d83s.hbQ'CcMcW<`rOt.!hi:u542i0"LfRR=B/DZA369:%4O(r"eBV)/\CM"SYf<*J-8&$5NG5":B]95>ARb$3j'56YrEp'.P0>;&I5%P$r)M/5eg%c"0t/TD-BVT&TWCmB-o\d,<GuXZ['fQ4%l3;V!Xo9o?AmBhR[E+Kt1/mK8]YUhd^DdUIMF<1NBtlCY8:T7:I.Zd":5H%97WiUscL.S5YjH7N>ID\(61*lh$uHc\$3[)daKWPl%0Bca.A-c`rM%!U5i4$5T:,TelYqm7iRbHZ4eODLQRFB0"^#;_Lq5AV[h1h=V)E6GgF]7/:q*Z,[jm>ZpMAtu*cf[6L+(FYm4,\8l%b/E#9DR_KLWd3S!CZiVgF@n?7?uVioq8?J-5h0b:SipaNZ'IN)m$;b<bX]Z@mY,*3,G3f+b;iY6*E1fGrKo+jc>JKH\.pPFG>G<R%f0'p&M.G]pq<_t625[P"PNjjE1oBs()O/!:f,%hpIP(5>hfQqY_^))a][NZ*`RNA(oTI]bg<MeJ]KWZV4#HYK,$[rY[]<=Q2"kX8%.SV0C4^d#m5B^URY&D*+m7IhU'R0Cr@MoUi6\SSB#,Rg/[&INe@J<t@]g1gGc>H#FBg'Q=l,oLd2U-6dppK/K6ros?#@8c&CmUor%ef_E1lQ/+qE<B6#\(ZKFPOV.:855:,jZTuphZBgcQ\9:QgY6k30I4?<4&"hIMUZtg\t#_ma/qU<0qVCf,E&*cd^t;m;0H:UI3`[$%Y5\R"ojr)[T:`:)NeF6M-m6NXPGP/$(SlI3G)@tVILk06'p#?W_^,d4Re^poeXKo-#nM>R:]ogMEusim2O3%iKIjAu^!+5%;Js5t%ErYu;<R"8Zj@-,MeS.f829fT;7'G$=a^!r,BoBlQ7OoQ5>!2[C)@J?$jMSMR8U/*XBbCE<;OX-hq&"+Jd:rCFk\a)-Wc`']UUfY8%*$4/W61%DThRA5OVoO`Pnh,6kP\GAk]hU)uR[q_?oeW(@V\V@`qj2^#eRY`'`;&cj2f9dDRE+1:9YK'.GTu6')E#Ef?a%"qCVpoT%mi:2(@M5NY4JrlcV\g$)*3XWfnuK=0L_9i]M6KS&&m*`sHHP[;&qV[?[IWl//#/1LSI=Xl3j76hAnD9Z2@sqXUJ&c*@GUMNkOFqi%FL)<uY0,!?VEILH=i3m/`(3FI3,K:3AWW2>ehjQgb=^6@cr?OaCC6[lN7-.5m6U>"N(GstFU*6%0"mXu\hf.SZYV<Dm/q8bUmDac%>NshgXN/?'9l$$30_*Cpq_0=:qT%!PoYEH!b?^WB15P%`)u?6^B(rEKHeILpq@7`DO6-(TDBm:)jJdA#F04tlH6sZ$XERW"$ddhI%:3/FGVXqccXHoAoPa3cuQoo&8>i4<#:ga'?2ToO_q>K!f*W!Rq6C>iHD]`4VR+5Bic%_!Z!O-[+_WMprChC@@YKCL"VS#r!l!W#f%8(^aR%("\RF44OnV@q"hS]"i#?ZXsEOY"(AaH'VIX?$RK*/O#<bUp6/gU,9e0VOJ!25N0ckGG5/P4_ai-`Z:sRni'%]^o`PrNp$\%5,32:6ljat0K3uQRear[o2UMA`AVFH@uT#jQshVn-4nq`R3U(Gk0E'H&CX3A>>#cumI5"]"_^puPi%b7BbmA3.^a<t<DM)s+:D"0%#43Bq`VmjsAc\@F!TZ5TV?s'K`+CsnWU,O[O9MT!lIKtUFmhjYbQ9U:/K1l$)eB%b^iM(4:bTj]'-%tKW2FMXS';!kRffU',@B'Q%B=69dHs>IK[c+'1RMi)O]p-jYX0AKpq(1Zr`X\@+.JVP6kYaUq41aegG\/Vjj1TEHfh;,PNhJc;AhW9#r;OiU0'-%).\K'^Wg@I0%h3f:CdFh@E>Q(A,R-ipM..pgC2U:C3\CYYWZ_=h;f2$I&HT2s:][q(g3$n1jqWVYKmGVk0I';GqB1&)tf?[EFjj*VsM9o+@AZ0#-%<qlH]l/(]<Z("SC"mBXWlaL"Df=(GM.5=/<X.M.FA_VS1oV\R5J)pn/qWZo&\+:%OgqA15'=-uh?9b1jec":hVgf;E`P+X^REiKp%qUE](j3%"h:%.c((N^"4D!QHHA0FQ\\,,K2!gW+Y5Q/qXbF\.p1X>.8a1Zru\,'rb+.r8?I[f06\*^kXnlD!aqIuJL](*I_g>QRY%0Di<3:Ob`cj^Yp[l_g5DK&alFPpN;UX.M09Fk_9Ao_3']gu$/cIej)sRMi(DhWq))"X_nsfJ2gq)DbbB(@ue^N8D6sk%T=3Hi4(8%;n^_"bPV&m4N0\Z5/,kE*[J5km?Gjmf/1/U>K!D5D,&gOV]XP@jR3Ie\D=iIqWE-[p[[ZoYFgnsV4&5Qbnr4.I^FR-T.qGBa1Zru%\,,LT5!G_a%C>g!D1.e3BYEim?9c.=F^'0udi6m,oeX7<:Rf7<ENc!@ZGlDOCKKqQYFd:j$+KcuR[%J[c&q?omW>Y)^7$:gXP`8K%57uUa=h*5Aa1$=0Y/Ym;]6^dt\,,K8+.q4;>b.64Q$`J<9nqhO&pM(A:I^(S\,,&ip2I2WT?O0]WuoO*G/)X)5L9^PY^<n3:Z$!O%+L\bL-hU^Bbkj!R&6%HO\$]MPdCk!44HR8,Dbnc5)?!e<'W92oIBT:BXaV%t$.VjGBA50b<`L>^ENc#6XaUKNR/)D;h-9h'*lX]<%p"Mfgg#?=&c'?3d32X#t%IWmF'5tGY]mfgp!I72#idk78lY'+l/K?a\YSQaP3-I;&L?R7L!MsQJb&eK5Ic.n%D%UE%8FU>jn6s/m%ggigYQgLr%-;kE51]\a'WdQSCE:AOXj:Od3-8V9dh$oR!A`=n&7dmD-n_$2D=$cX]78N<J4h'+:4UrEO"PJfBMsiS(ksrm;EqU7>%,YmcrT%`[T9&t"7!@%9sM\GpWD&,*\IQFPAL"huUW0FGg6tP-q&D&/hSZ#lC0qq\e2Mh4h]h^J@jbRT_T!!lr?c,GtHL!3CV/pTM%]Y6T%M:N]\,i7a?A)cn(GrqYEF+O/HH$V5QOctO=5$t^lcGaeAJQ.65--GU;p'lAflf(pGT5;/&%W$$<rScleH88+IDlSL!a8;e5%i#ifFEZU7Pp/3U,\F+`,A.riE&^[uWc@T,9GY)l>RDj&:j_H_8EQ%LBoOb,G6b%9Tq5&uQ8gganI-G6>EWm_4O'k)P!#>bR5ceoD%%g"^k?c61.eMWt+q)mYAf4GqC4a7V3EK\D@b@r0Xmp6QZl`9R8n28ueRB&6K^U(,6k;7MX6j3'4)k3%99B7"R(;Apl#[B/lKsE!P%+5)p-DpGWODj=!jPWj]S8!""k?=g<'+7Ek*M9C+;q3!]\?8DVF#dh@@*3SF*LaQ+B`".o"GD86%%,7^Q^=>iI<,?UanpHJ/N5E'h%N:[SaBCN$SCb]J''7nI35CT(cMN*r*iUdBE:W2Uigp[g6%IY!:lnt=3j"Cr>l/@*2SNc\pa8N(B\H[SmQPOqNqtUsO!hg6h)G_lA%<;HOm"fQbcis'fFEJY4%1H7Jh805.!18k&&N)+gdV'#$d(-DPp'G)@;:,PT4&$AL__(.'iI7+2FVf&b5g2eFtProV(7dEr#q2n%r%"![$`"77)>W0bKD$6Iubpa:Jr\&$C[UtBhuX+!m2pS'-Td%-R]jq3Ec7=ds0U;1BD!B"eu".5.']NCgn5ohoMAeuh6o0`g9X.M5]%>m'R<-4\F%%s6_O'7jaa"O%hBb8W![psGE;ZkJJp?ufMu-Z[$6ac=n+a!_<+[o.jC[n:q6>)DdN:q]<*p+1Cc(3seS>BF.=De%0]%5'bB%ZDAUdjWr(8J`Q@17X;:Gq^V%cQ:dBWe2kOhL"<*R%LQ-Q9@9e]m6`#e!`1*TpfS,HB]"(XaA/SmJo=F1X31].YLH^V7)<&L%g,/dUgNdGnPUO<IMkoDb:o0\PV8V_C(<YaYd=IOLATup=q^(/c6[!K25;5uQGh7ln;\k2-WZ07k1B;O>34aYs7,TEUoD;cShf:lF%&IJ=HBfaqJ0U]m-$:6B)oD(,COp;";l[/1&I@bb1-mM=gTakWO5>i[H=M#G7>b!Dcap6E:(dR1F,-h%B]K60C0^(p)[\)bDST15N%j*2J;1ABLL_F#Z`'bB:NAX8gIhU`%No<E>OEu&I(1N/nb*]am]PTCi=nj"kBUXD52l,n^2cH>QAjhT3eYE8CL<P&s1#]1l=dp+@/%RDlZ'!<X<8&m9JB/-*nsGD6]_c^DKaYEKY%7VhFe;f6fA\@=PA;f5g@!%`1l`gs+tW(Kb^O&rXNS"4oO.0i/n]42p\OmCf4:7G7$%RH34bZfMOQX$S72(=2FT@+HDK[/Y01ceu31;(Hj\hchoGFEMefj@cE3K-oAf.f0o1@23fW5@i<R2:%#URE<ArWuiTQ5Y"o2km]O@%BUY9$'):2FK1tQ\=(rEZfc^f@'/$NrS&7>3.2q\dNm;]j>ZcsfD;6"Ed\:<(9+MNXc3m%d50;+5Vc1'HeNbio*9?^7YmH"B#R(nO%4?VDpKEd0+=k3S][TG/4kTKVIihIMA:F%XQXHtKNqH<h1/d&\"pt;s>710EWk64Z*XecH<&(+\/G_YG/$fQ14FNd)<J5^a)f9_<F%*%6hq&:$?aAb4B@mdOCeP3*Lnd(@JHrq(fU$Gcd+,5hjKRodDpi>J/W"c?RE7](fb-Q"N;`Ep?TITcmF^pBr]YnP84W`iJEHSi__%-Y7pgLt^gg34SVp6J*DtZu3A[feq>t==[1=4`^bj?33eib531>UW0kkg[0Q:B=?AX"O&KO@N!,5)dI8P'D@+H9lcJRcigrTr)mMU%?!9KfdMBIo."iq[]8V<+0>:_iiR\;\5.e^?)MCQnZ;XVXDdI9;Pl&JX]O$dR$A/T;LtoPD<3J`GH6h\>;f0q3>'VR%.i-IAbL"EM%=hT@?@[@L<6D*'&K,RZ.K6-a$T]RL9=A$an.ZXJ&G8irsIU'/`YHkW:]'7=n7^tsS?R^7JoS&8E<](LA0^NW@hRSd$.L&9UP3BY-%#D.-Xo]-o$7FjX7F;.m5L$8<o22%(D4lSk9Y)*DCOOFN4SuXAJc(!BH6P0WAcJg'R7o=lL3G9Ujd"<o,I]cd7VS&R-q2`qQ*7D&X%=!12EMENW[YT4P!SLr?K:XKMQQZ+1,'\.Q=$+A<lB`Vbd_d`"a]:;2;U5SB^SkdDQlP"<c'EL'!05f3BT9TT;.<`iSi-N2&fp\uL%,1OPN\V^lO/"FTmP<*$K8mDAI$%6,ak';:Tn%R&;V!%@A'^7<r]U)C<bLs:0*^1O9nFgQ5*YY8gXu74R$2.cpJpO3@QY<a43pl.+%T=$0AZF$6Sr-UIi\eTo[329a=Eh)f_50J&AP6efg(I<,C_;`#((`j4<H6P\[#%//T&*#+md27(0c'q5'B:sj,)ct$HLZOK)!PF[#%BG[h`oBS9[(?^:<Bg%Q&3[JNrF8#N2#gJo1GkIoIEHN!(]jlCLc2n@.I7[]Pa?\rL:4e'PhrdS-8;K)jHB6t(S;e&V]Z&0a@6=j8%,gJEkGuG#'=dm*Tg)T&u"NrJE7<.ab;d^YhFtZETOmDKgF**.l$n+@WESGRr8k1+-mIO7Om4_FT0h'-eWJ"L7+GSW28`)D.jIP/5%%Mc4[r:1)(c8fp4Es"0c:.T<CmU8mXlr:-O(pd>HQHr3ef(@rbC9]+SE)YW0*D;,L?sJ<^.4$V;cBl>JPs=fsEZ0mgH1c9>!\n.6%]fb6E)9>/CK-C\k],Z=j`q)N3I(2qs.-G!"#P&b';/_<N"_u1M>]`SXSA3C6+lW&XMYr<W]C/f'_j^lR\a2h<b)XAR(sOT>`9.Or%VfrH5$F#Z;Hn[Z\Kn:r1d*Ftki+">A6H^40MY)IWE<W']iqFE64j?B7,OE)7!p;KdDLc'S!b_PmL:^;d-?)Y:S"@NECf]>!Lah'2%^UTEE_]23_mT82"=jNVR@E"5dX`sk>94)GTS7rP>P`QI6q4oN%_FR^.ShdYt=,a3g%qN7cdp9L((cFV$PfjjO@H*K2-:BluDiRK4%@6En%ir\V;VB!umQT>2R85+9!GYe7oakEhjGf[S<':cPpR[J+O%EO.+#d'2LF_N!@(4+TYq69,hIVc1XY(ac'mOSF`&T@ct7M:!G%in+iibR(LMd`;?7=YSLcH;#D,&oXj=9L44B.7R"fKEk&#Ps!4A42N5GoKf&7#nQs^#D5r@<gKSf;XULC]PtqbeJ:b?P3QH&GD-8c%l%9k^3j/UtMsuV>@Z)dl.nECL@`:9&L:qH/o1e"dfLh\PM,_AsT0V%!eFAq?D(FN?fdbfs#.8MF?rNEY(9d7(Y1`7''?PMsRs>Nf%87UAWH!(aG$HE=ceGN2O**)AdDp7mC4<YV519QKSnlR/XY""2j5?&$3p#N70+f#`+E4AG`l6l2m=Zq"pMS/SO=Be)ffONIOiG.t@%&tS;3.T*?KmusC)]`]pcD"/3BAbR`&;q]2(aeF$gHQD+[NTq4i-P#$8:Tp.WOJ:GA=FER\:cK9\Bp7A:!SgIZ>''9`!-3mt![Iq6%Rr_]*TG,_rdcng-7,S?k-jTb[$!Fp%j'o^>P&6cPeBa7Vde:OT:'Q'8DS4KB.T$N]+-q@6Qu;,IHakI*XC/*JQI=rUX"oSf_?X-&%31l+<%g[OIcV?Y$JBM9E2i^GSY<m)WlpYAU^cN9_#^+9\6C(1l]qiE[^u,ILLc4&*r*1c\'=[G-^N4"DKZJs,)CEAQ^tibDbcg3I%_/NlV>#$W"</DmdPMS,\B:'V/__O=@Y/\[rBoQ=!WG8;0MMAE1GM6Q.p_`/?S%+>n:/5h%.'96%;M#<LBD\sNBCYKZ[%6Rtbqk4E%MER7X>Cs6X&+7906X-BqRkJaY@'_Y")4eU%cfKR?-hL`L?;@k!!)l$\Mbu4X.H`In*RAJ-W4sPA"aY(ZSnq^_?aVnP$SVA0A=[>6%Ke)&^7gLR_,:_jTMoG)kFP>?3Epl0hHqAL"lCCTBS(*>SL`6Z]#Wf)qq8sB/j[@m@'.bb\pL`LLp.6r"!3-U=4aF'cW!4\4gc*Z<%"WE/Oa@a@uVL;:0iI)?)1sun1F1arY^QoB9"@gH9aRQmH(L)&S+2jHHj"F%C^UN27(k5]2puU6Rnm5oG;7%d6hp(/oUo`tuAD3;J%VA0;$JTY>)_>qZ[Ga'IU[Suh[O^%10A0jP3r!r\<Q+#KdGS"D(]pu;dMSqN/bBl6\pLUqM;^B+q".Z_Y04F$3ka$"mHX"P8dZQ1W%d)7o(#oX?6E&F801[mMP,2,QOOal:ah/rOZCq4)W8e88E98fR(j<7*Ph!Hr[.cqBk>#]:`U=%t;j]&%ad.6=T.D.c4#H@"RBUF/5%h&nXcN>1n!=RBme;kBG]['0oV`"TW43I,Ze&Wl,2`sJ<k%.Xte#C+2%LUK8t.'Ms.j<_f/2A;tO)pNh1$"T-6HoY`u/G1TnOY\3D%qU=]eBd"^5JI?G8I#QYkDgFpYGK[r9mq0^>()SId_P=%l2I9g:E8qMh'c+HYk\#PD\F"H9'63H*W$YtIr]"Di$GeBJG#&\1MqEta%U?$P`hTJ7^f->(KWTTBY$";d5@UqL=A5Fn@N)f),gn&,t53"dQ8^'o!SF1]hpIc\L?5B)-]Z#_@S)?^T(WaB1Nit"\=j^,,Fn>2,%23Qi#]p3VI'N1jgM,a#W#b584Xj<KSCja]G2:pl4Ye%,B(E=BZ.,TB)/MJYQlN@r,@#&+JeKpq^[YZrTZADTEk"E9epIJR<2u@Eh%c*=M+='s_K$T;pB"2#=HgFo?q:LXu;[L'e6AljtW#5Qh)fM(N8Z=]VW+9M](Vi*'@Ij*tX>P`X'5q<cb&?R=44E@TA^Oa>pZ1X)0%ZPuG1O7C3jhI,kL9l8O*W$sqS]Q(eaaI]V1`Gr5nc_t]..5pP"p-061G4C9j@J;=0g.Ilomr6&XNq5RJ%f's;";C#p*dP"e*B3DN%>6q<OC@(!^.jr7A+a&.LL#<S32qaD&fTf1hjL4H<iE3[Nb)_*Z(XkI`d\Yc-CK\egf^4>4VP1H%MT;BCQr=?6SUG"G(1^bdp$h<.%*$b%=n?m4>_ipgljqu>U/ij,e7lmB3X`fB#-M!V,Q\6;U/M/L[J#NM<Bao%Pj0T\'"<q[r=1D+,+dSDJ`"d/(<J\#?Xl9[HMCQR"%EgsSUNM6c6%@0`K$9*hl`,jTYY&L/76@:c52K=Ei729"m>K.Cq'NHR6Q0.*6e)GtaPfbGh(Lum@I*9LW?i/a_'=11gA-`bcBE3LW%h]l"t]KjdFU/oH_<kt)6Q!e/%bDb+(^TeT!IdtpPo\liGcp`bU+K3$2`gh8*6o]Vr`:p'rhUI$L5"iP+]^%/%bhmr.jm-@JA<47d%c<8dbL9+-$Va/)'6V*pOcPs2I:IB+<(Z7e`+on)\a]fNglpb.H%r:'uIcnpq!d%Bca]<<-P<*_8FutpfRH81<.YLu>Ah]`Sg-7?6%$Ya2P&b$<Z7UfD]MHZuU#_%G'Br,<ZIf&6aIf&s8^AS-5r<Fk;Z;r:fHRk2H0=/RaE]BVsk<E/1W9E3G;D2U`ENAGk(;+ZsFi)de%(;'c->f`8]K(69#KJ`r55C@DFZ4PeVi9-0jirZrB5gf>WT_6b0oKlZ,W90WSeJML]3Z(<GA%tEa1&+B!^E[!Y@X5H<>:/k<)ZCh_%eUgcI+2T[0&V$#l8SaEBP%ZP&)kq%r1eR>h.ai'BclXN#d'fa@MPUhXUB))\'TA5$XI&EDlpOaXC:UajXA5,Ti?"l=c"bG$"Ckki%QmULd@nSK_5D.@V2+kjc"AMDE"gJCTne2]XKX)-iARmJ=ef2`#;OrkF"-$8W?#*>K0]nFY!Y"jrg]YMLkT7`tB.<`q8_t+.%"n)j%W*#.WXFreVM$@Z,I>JPH/<%=4#a;R@iW@I=g/#`0+S8J)BduRb'J9cJ66tjG*tC^gK#V@6,0Z@lU(Nh"iNcQ>7&.TpBegYRTd]+P%_pK;R$KFTP&KQ_47BoB;bSGmV,^PUDdf^\"MsrN%'W.iX>8.1lj.]Wm7L;Mf6:"S-p@Dc'q8lHl_F7mj+P@s3aquag"_/6N7+29b%1$GMZ;49"%#`OYX6mThh"];%n-q8tZHkGcY)@_J=2#Ca@$KIjW//[?'JtWH&MG\J[/YXF'>+[L-L5N6)A;#ct+s*at4u=mKOX*NY%8OoPcWJI/R!]mW[+n2][r_PQY#`=Lkd81Aj7:X^f>=>0mY?7NJMMd(=m.uCQ;-XeBKu7_(3)#LF#kc(Nd4dm8MYS\6&I0<WJ7AT!%r1P5R$fR7FQjDXpIe>-S8`T&sKV'G:ZokSVh!,RP&<5j?_PH]=TI:^*;!SCf82PQ(*_(/@KV+(Z=[Q&BN/"HV)#>T3(J0*5(l:Ki%)KQbIU=`LD&Og1p5Z*>f6.97m;Ma=I+`a9o@JJ"U$a:Z3.23@K3m&3A@gF6pY_Zg8a;.2n"Sjb0.7rNr!3ae;kqE)k&ra+b_'f@Q%(qLl"@C?GkUVe?Q`N\KH'TF-S-AIilMLseX'Gh@'N+@hjYqV,"";DndRgT$a5VbA7KbDV-TS+Vi:^#Db?4/._3estq!:Rc=SmfPJ%GQ_Le"VDF+MLrWJTa5<k_@A*5I\T7qD*\5I)"j'qJU/SM?=B9S$;rSqHjFs!an?SE7m^&i4Kooj`2H<QXp"Ak#8&RX6>TL1^d\Q[%"bnIh/R_48#dYnQ#S%PB5D!Q"#dC/qZ9hD"d/tBlOMW-mU/2\N#YQ4sEA'dp6j5llPp"(F$8FS(#5AhM!2N.M&I&;)72-IEYsgnq%0F/S9.u^_;MI6`uehl;c/B/D*Yu%r$Hndr"0HiK/$&L58qLP?g@9*q+&I$)mMrGq<AQ)D.,R$O=dIR<7F_4^\gcu@W@!n%>3m!rb%@JmTIGQG$Po-`KsFlbpo@mL6PO-U/2hTNTbH]MOJGdl?;</)ImL"=;:\uTnDARmGp7(`K+D*6Rf2P(`]NrRTdN$"+pEFZU"]$$ZA%\^0Z,=hi<sqXaG%P]%G.L\nUe?7S(t0=8d1='G>]%$r#`^IsXb\VL-oYJX2qFtQ[ns3rq$KA3BWc;gu*:A096YJXR;d+mF&KhBl>%WB?=?473#;Y?K6G+$XpV],.fRFu>n!(h.Btb/@?I0DEB%XfWMQk("tq2X,X':>HECjOf4\?'0_Rh>,RZ6[-A,qr^64:7U]Xk[")_%RO(<bU=_;.B>K;i;0+Bi]C"[;F)X3We$6?T?125']#Lik3c)9KNBg]sUj!?1O,LNok\-/ck^K04qS'9FFoG;1[0W.j].%Q2YN:I(%i^,YPrV5fM>IpB;)p[#Ag))7koNGjVB]!m!]D52sJr<m7eV)`,/<CjA]9<(6K!$9/Qhf`E"J*ZZI,'<lq:Z>Vk(]3K'4:R1qYs[+%$i%[?mbrAN-psnRQ/CC2931j@hn!o,GFqn6gkFmg/&:)s=1J9Q/`].hqG1nmUq=76c9<n':W=X6F.pF,E"1[=]mYGAbHP;SY3r.$%<B8;W1@T>nN-u5dlZc]VVPSJ[q'Phjh05\cFgl@-f*Af\Mk>`s_$[.(HX7CM2$UF*T";)_*pWFPS%A&ee6Bru+8=YX^8^-"6ZT<j%L$lPB]j0`qg`N]Nh5s2](C'*+Uq=_J[E6(s[3t^cpK_;s>>fY1Sl'Xf$aIluTkc*GT[J3^'=2X2I+Pu'r=JB-?Yan[CFEb&0U-dJ%$7VUuie@)365R3[?,"rKYiVH's3u2[pV'0ciu1c\D=9`6P?rpk?UsfIhfhR+61N5Q,Z!n.Q+QOmP:q%P=qc"%T:EZWNR\3_+p2n[%^93U%lY"6u6b[pB!0++9F\eHHSQJ203`SP<`=!C;j[+m]EkS[B\a#;tC=OKg\sV#=+2%rKAH\/l$5A-Gn)H%.$0ou)^\;KYbHl8[%Ij:&Vcok"9F(W-52l1"WpW=T8c&h:S/tpE,]Z9TVjn&L)'\CrdC>7Y5r7`X6jm.^(h>b?9#-(<$gk@e,],okmLO9QhI;FMdd#trb%_@7lI?H(Oo(p8ELh\=RVBJ6a8=b<O,r-m7Ghch`u]B_e@0S$;NO\`)t$'@a+$0,XF\gk.J(Qsgi,j/9km&_&![bLJ&'G@]bHV\I&%O#Pq[L%:N_1jAJ)DbF`roqHQ6!prj^U$Hu?D4KaPJ&Gb"g.aZs6:W,4rq&W=e5l+Jm+NerD)_l=hDTI;(HR3P5WdTEI$Cu%RiUZ"%c/,=jpcB;?d=AJmpiCl()_Gnm7sj5>'5&C+ds^^mLm>F="E]"Bkj25YRC]/^_%PX*d,&ma;TsfRCO%N`S_426D[*f#`fP2AMOuPB%,G-Dq3hX!3E1PT<`i*YB$G*9K$^,Q`kgXVUm@dAQqUCdAI',3U::e6nT97N3.P>hW;[(9Z?0E>-`-0f+CHRWNJIr*4:\`ebR6sf`%VMTLOVP%5%D_<k9?\/n,bg6!BPGC#uX;aXM9EA/^b)+GKL#b)(a??#?!]:%\$ZTZ`5335n+[r)V][DU?L/&kC@Qge3h3?.j`&6aQ%>\*>23o=bC-HgB'g>`b#5cG;0q51PILn31iH8H+l0=74@T/P^u3(Bqjr7j?K0@Y7iH96K:;[Sla$G?IXr2+<>FCVUgW+5X++o<G[%>@',9B'0ARMD\LOZh6S3EXHg+c4O_1:8,p)!OsKlp5@J9AOA+k&+-)CEhg0VBPl$;p/[H65)GG[pSg+"7=+,&g:uSD6>LTED=S\;%',;$r)jFi.pd1N-'!np8bIEY8.HY@d7F[6t0Ph(2%L_PVZq:]3=Zo:%3VgmY++-VdY!_o;p[Vt^l>ORGW&C1ch>aDN6m[EBkYPC`%SKdfN(-R6G?`WGHi[7@4\919')Gk6ks2$^;P$qo:*F>[ZPO`gcGiEr>`VZ;=cX+uFG2NO@`G-Zu$KhN[<VC!dWasr1q>A`h:LE;'%?tjmFO?_,S^<kJR`&i$_Oo@Zd&m'CHG7QON]#r<;ZEV5Y&%!,Xfd(I"Vb3\=;m*FLQf$XBTO!/`:Q@D1IrbNn,BEalC$;/BjI,I7%S6u8]Z9\)O2S6sKd=^0kliHKXNbF$>lXsSn7m$9.Km/J-pK<A4K+4to#27@X/oklC<-po_k2n'2jddq^9:afTht,V_`sGEhM93@\%%:-$]"FW0U3ncU`36$a!5hr],gVG2?T>kTk]#M?A45[Xkd_24;K+o7A4MAY;8H,81O)c%bJ\#!(TBt4g'&6Q0U$IP@>@XTRmK]r`%e%pO-3<iR]]gs&cZZ&.\O8RS\$n9eO:BAme=uEf'gs>Y2YNrh0h4X+@lLhC-nesNUVMgO;I)mRPXRc0up_KbLpX?/0X.VhU;]D=)%Idle)CV]B:&C!/),o=/?cMd>;9j:6nDe3rR$JkAk2R2)olo0aod3IkD\U-ODY;U1k1mj>]o;Cpe%XdA]#jZ>T0-n_GaYqeI>j/>G%HTu%'5,TQ^cbCFRb6Jf'hs\6!;EnG;*rFN.A8WZ@*7Sh3'Xq#lHScPen'i:7n)>G%eu*LLjNbCG/p*/hH_oi5^b<(!7lNs[42>S*%5=ua7Zabbb0!]g_2]u/492HoGXp&0./*'%Kr8,%/rnWJ'/i59Iou=b'-8)[dQec&YF;Y2II)U.N\6XOu*@#uNk9IU4X`>RcpC1uc%R/+sKp[<fbof6cVX>pdA=.W'jadV5kI@i<OJdr*q6F88XqAr/a])KWRc.=e<A#StFY&A`J]?WM?_sdS7Tl/8u0I4]KS>"`LTkhq,%Ej+TG5fo/$+2<9LMj?9[_8iJ=MnB<`mrlFloj?8WF=dM0qRr5:D%F2&]C;%f2fu1t^!OH"['Z`Za_T)4LG#qfkP%;c(jh5TiGgqa%Z#0!M>[GaXnC6k,BS]cli*"5\]YO2nmWGg35"4QLP/T&Tea9PWNeeuPiK#+X-OUl8Gqfkigp?VoEk`p,*J5)COD>fjfX[V-fYR:\%Q;[;XbF>t^0]s7g[I>BOQ=k7tPY%D/YY/7)Q/rg1T-PqgE-P-KaBM\s^Vtcc]=t/?F$FmR98;AD.%M^KZQjJ"1YiR:q)38qq7TTN%lYA\[s!i7\:,_.;hqJ_7%2h(7B_N/-);XYCP6JMrd"TOInP\gJ.?l=)*:F)Op?nn--kRY`ro%a,G61^)]^.CFSgrE6(SWAu"j^;:%i?E^7U@->IH-LU1T.])L25QM<8)Z]s%oQqDmXZoN01a[)N+JXU663+POm*]gaL.*u:iT`Z+_>[%B=,!#jH[m$)PGEEk!O6??(3Tu%M4+fXO),/<^'%3R[=jdJ#?#lF&E#PbE!X5!1$!Pb0LZ2Qd)^Zu;W/-4X`:%MA?(-]C@>J%nh&[)G9AB6j59+D[@K$2</Nr<ce4NY%"qRE9&kIj#T\)FZfA.TrT$&(NHlO$qkclc[>Hk`5ol?:`0Vf\4;)D9XG:Ie"GklM'J?Cb7JptIr8A`P^^TW[?Pn;kiH';W[_ffIo%m)JbWlL)NZlq4MIJ>p2s`#-HFep[+05](mI]-FjsYe+\/p=37@_^=4qfQ#=Im-`W.*Vh0i?aD\j^$P%4L$lrtg@8=*?jZuj%*N9C%f\O/Fp-XCpZ+G9uGT99VmDb-fq>>39]7#SGgGe`eL`s;bm,+-[mOgD,-CasAYj4X/RL\NG_'\tMlu8sF?lRE5qu,(@IcHM1`6A7Q%khSTcpRDFZmXd<d&.X]W9,j7KU>mT.>-LTJ^nHu43nUhJ<QEdZb2S1pG?ldq]c43NEt`'2F?#kX(JY&*Cn7TJRt+cPdWP>VRbHu5%H8d2$WL`cH0e,PgrE&^1fVS?Go5">V7J-dJTg'n-9^-<iMj2W)3iu,$-KE;7^'?&=0g8<OSH3PDH!b*kI[Dn?3).k1a`YtOlQ/&j%mGpQ=5DX@q2m#'.#K'K[R6.=t5e?eqaO#s&?&MbE/?173lnnO&m2]1#-a@aC%dMfEp[q7kPp?q(qqU"#9g3QDNrZA8>GF)WZfuIm%E5``,PcV4Og(k0Gla@u2Bm``anFPC0V:rI/!egGaCS5!Q0.BVm[S&%h-]"GV/ZFY6[p^_UH-9D&S6NUFOA]@lp_UH-2pP#6*NV/:%NP+299=^tYLQd#NnSh229LV^._WAiNCcT.U98_a*iPrqrfn6s-'iqmoarRZ:T*btbnM<BG];F?1G9%2lnXW4"I_,isk.E,nTZq4F%k#i"GYX>RWISIJ]o<DO:\dS$Vku$ieJ__0cl&oaE"di2[_eFEAlg)hl-H?S(-hi<Bj-!oGT%9,or*.niqp/$&a1`PG%D,jd=tV[`%h0X"=2(A34m/Fq#8P3\W@sb.$2-_p;K54Fc48[mZhI#$%`QGA\$e?_lW6Elb.^$7rU!S0.h>b.n6WGl3muMCm3#"S]cV7-ZKr3jE%JlaY^+-g$M$:+?*FObq@AHNljD('j][eE3sRS23=i/EKm7[8@Ljo)`2:N][rJ%&1@MSF?o7'`7hpVKTAq!)S0m^W<:i;1?6^<bWF%G)N2Y>RoC5'aj&rp[u7Ihr#)LU5&94@dP'X?Go>8CN,$2+7Qn%m2QId&7km%h.*.7Dt;qkgoFo]6#dc&U_Uk+QIPrY"M#L%[3X[B%H.Y7qm]@'Q37n;E=)]g\J@*ul?0j2THY[u@4:Bfi=9%kk<%kn.G"=SA%9@5pGWV_h_jY#)EbgH?a1Di,"kN"nO8JhI@5lhB(F/&8%4mX3um:+P`!Fr%Fgqs7r5D#>U?\bBiEsM5Eh-93HqW2M,=QbdY#50[nr,1J(po!_-Zaui:bj1..fEfc?KAD0R>`:I:#R#s1O#MN3%p<VB>h"Sf,j_u:LQ'15l5s+2TAQfQ0Mo2_Vnj;MfmeT?GJuS=kqL7IBm!E656qI&r)oogL;Mm/MK;3d#R-ae%@/!d5(Hfbre/dl[%_Y;%S)tSJO[C<<u_g9u2\22S2T47'%%Yd/kN?q'^@J@FGG6\$1GV;FZq!KBmUfC\0!P>5mhAH@QYX<FcXdVusYLSDFDK[%%'S-N]%m]"S?KL[*5i)mL57b+K&LUDQ^C<,s-2upSR_S*?mHGu(%[O@ko.KoG!_)CI"m)]lLdXB:\d8<-hI=72_X:cmdgIT;/"=(H85*E;G%5m*lG+<T[cB@64q#%r6A@.5r6N<][NOr97%Go$tWl^,S8/_@Pl^qacn/A9$=d/Fn,*5/P9HB6KOs*SV')5QI$\Mg?U_="jQU"$E"%[M]Y.Xa[YmY^8"X$bj'X+1pVG1be9k.FAjnR\>)Ef,n/]pJhqUmdmrkO\O]Ombr+<\G$[t$RF>bqmu)Q3?58M2V\[P*KRmc.I=dP%o"M^*^3a5(]jg8V0!^!>_[j_)jaD9\q``'M=ZM,jrH<*Q;4&.b;s\q9Gk1$6IG<qZqk,Q?Cjd6qqJPr1;U[RJ%u5LEA2_Xb"hRiT%0:=YR)(AquT7)f\*hiKH%YkF_a"md3/Eq-pNKA:umOl&:9]=N+TG:Dh#.^b[?3P99L'e_AAaJFc2@3?clWNbNN5;4#:A-[7,uDCq%b8E_D5Nj-tpO^_`CPYukpVu@'gSO]D5Rff!j\PY*E@YIm>Z3i$+/c+qA]NuQk&705:tbT_-Jj#l?j?FcrAJXdo"&%H*c;ak<Xi=F%DI;V]OfYJcp%I7p/FsZM_J]6gN&)Uhk*^=t"t$7kn2b0Hhd&7G]iCK<d(Q9&?WC@e'C6bKpO^Asb,a_i2eN"#!=GXjF,ugt=f>l)%%+eB(`4;<e*ZPX`MTNq@Rs.Vac(4AHEJ3e1l:NFd5gM7+-g&^Q'dSBJdq%kC0MRrl7cJ7$!GT"<NO\H^3>:[IN^cPu"K&M(l*3Ts%Ym%%GEn$W::E3'R`'KhU<iAC$*1R*`V2tS5M'P1A(=_k<f;SZ(%7@"B"B,J>Nc&m40c&`Uj0#-o;I4gX]hLL><(+_hSL01Kf>`aD%PBSP%q3da_m%+[\D/c"FLELPbY!p$+1Cqa_4WEgk9pTXAIrFA+9TgqW/,jKGgfp8som1+l(JaNMV6qGt,J,lmn[j/[_>trLS#SL&%a2)eFg_ha#ljp]u_nBMoRa[BJ<MIL(OZ^a:$+G_72(8fCB3_N4mVE>6>)WoR(NYGG]7S;FSIt[>^C448f;;m@DTHZ2nTlE%=$e%q%G<lON?\:&3q!9-tA@V@;(F:F7dHH!q(TUu#!StLq"eAZM+5?`HUIc=JJ$!`Hgq0:%iR^[FNTBZc3W"flhs/'bHDO]j]V_tgp&-b5%Y30,OLqoICXcjI.M]lK.7np;9b6LCi4)o-1K^B@=7cb0,%P3l:0V,D2JBjuEYl3BJII2knr5+7)YqmS8e3NST-\R:aZTs&de_rqE%!:SCU7BeqG:k\I/N&2%k*Esaj:Y7[9/hc!)"rl3SNF%6[*1*Y;;'+q,#TTOGml[=T.T9(l\N2UsTkLK(KK.Q[$1?8Jg:FVQF/u?a%7*o$+Z]MQI-qB6WpG)&K*pAPU1-X;SGo8PgT#$Z`\QJiT6(c[h*+#$ETZ1GP;Ci8$NXRGt%(iVXe&fJDH"Y0J8)96Wgdl6TY(N':%AM,^j&6ELZ"lHf?K.S:sWOefu$&.`XZ%UM]+cHu5<c+=M!Y.8"k196hb@""D'<i:M?YnNJToF=liX.Rm,-ZXI-NUZ`J*5.g+fEWF%^`FI3>a;PN]a/sV1D9(#Xfs,2DB$37\B<qBZY,MNVq`TQFSblo]8<"nfM;-tPl.F`qd)i4lu(i9XF0\LX`8./8b6.dS+s]@HeRc:%Je@q,\K:b`kf2@ULA3d.,D@'Fp/nkiBl=X%rk_R(/_h8h'dmpUP4[a1\?E::XFq<X!JJ@#`If",K]g`+ZdY[7-"1k1E3WXiTp.g$%4pTq_(@a.uKl]r[$"Ft[/*G_0=]ES4TufHXrr1]\.+Lh!pF-3nN0GSXlANjkeEZqW;fmoj0Vtd0N`1]9];DLlfR@Ju`@+&K2Wa+S%LZ/Pm)c$<q\A;-'_)%H):RP/V_lK/Sl]EYBSm)^_hUpXu9AW2-o6ki2feGS)^V'Us/8O!]H(irBO,`VZfiN@HPZctr3"<3]EVRYY%iuEca!Ckagi\i&V3^8C&'<c"/5BX5H"cN;^]tKtNUhTDU'QFI0(re&W9q<HIAAW?V7-uZT]/eWL#RtsJZQo2u#99d[a=/El>i)*J%e1\kJgOA"5q/&-g"TLBnPS\\:dLta9@_Ki3V:!,N2-_;p]id]j13OK1P2go-!Wu=4HBReP23[=T2n:Yh?BU&1d*(rNaURY651e*O%[W@&E,gn&SZoJ6)%DYc3`MYQj4p\oe7&/e,]32<l066U%lSbW)m%f7`&a^k22'!_0PX$>m_Xs6g;NLSHY1[`N/D>+I#!7qGLO78E%S!G\*=Io?c[LJET*/s]cLn8ANijMBPQ2/-D-Ke@ikP+/HOf#-T2J"[eXf6nSf$ect)g=bg0#[nuLBiU!18/"E$an*9OZE</8=6cs%$mIQPQMji6gABaZTL>6o.]A2k&gFng.%!hep_XK>IW]oT&IU)GC@#9V%7+tCP!12V"8dm6E`WJq'5GS$ZYLoUid$WG"JG4s7ac4]%.4d(D6#'@=@c-;clODVgK4HZW_:N[.LjS1N*amDs0gs:=%hiH(n9BHUrNUG3rZAY./ko9q/C6Z%J!0RC];P:EZu+eRfKC)>og6DB%[ZhT?`q1ZWJ&UBg.6b:MJtCk<_"7XWhDm+^f:dM$g?$iO<g3uZeX7M2KZ0KJ$X5ds-ulV0K>CmL66Z'_cIT:FAaGurUa>.VS:g\E%a*3>kksrCb^oT/i`YX6>3K)?&@2"9!qf8lCrO;Cs4kp\nL%.FYk%;EA9RmOaZg3bhPdXuZHjiOc.C7D:r,F1Wf3n^2)aDLI9WF0K%#Ch'Dq0Hp-*e08qPelUmZLk3K]0cclA(t#q-fL'p/ChmQ2Ks\)cs'H6^b$ggW!rCo1&1qtPKnNtkt(k*.D`o?U^:qSe,F/^EQ9PC%69G:\6;SJRnl>Qga'#D5.>MJiPMkdgf7N;W$+7VQ*;Bo6%gMqu(?h-h"V4/'+Y^=jJ^KWWRM'6dB+9'H,WD*:2N:G0X\,gG[]0.F%!>"NI/etXCiTH3j(RFELjhYsR4+*VCkL!='U#IcUm'sjfUJoa2XYr7t[46"H3MMjkL-GQf.AU?$P3>NnkTE&(.;5rlElIdldk8gL%]O^KM-4R:K^8PnZW7%IhnO;K_5aXW*7?/1udE#:bTCMXKJIG&pXP\`6)dt6kZXE74D]0A3*7A'WXt$[)PlP)rpgDS$,d:@]L3#iE%XB&-g4!VUn8dP,gi%WU#"0i]XAE`!Ed6"B4g@tIak*gGj("X.mU!l.dPY&,%JD$c2V`eG50:6MJm$5;T.>Q]/:BYj,m4YOpdT#S>%7nnO:7O&/jfmYL)Iu)EedG^^OhaN_Z48FTrkB![YfLYOm,j2XJ"B(qDq8^ng\pr^fC(oK45H\e[?_Gej1h$.7[:"X$;f#6Qfr8lP%!7JW5dD!C/R*0;$A*W$=.2utsDI/Z;-V8Z-4E*o6k[`'^-U!2$qL4sQr3TZXmlYHI-kk(n#rY8e3dfM2*A_EG`*UD,f4cb.3X:ZF%.490X`>'Or/^+)QRrWUs0'0MV07qTq^i;!5m]?nI$dK^D99N/X2Y*C%ZV?kM]_IX=a#bGTeeqA,FccC&AZ?OAfc?9RLSdK#6LL8c%5D,fW=nGYg!is:uKVYW"M]g&m?qO'"o;W@iFne<"l0\VNYG(`CJ,SEHrCT9Gg]C,/#Z`caqA!G^."0DD3,-XVZ\-"'[aP!KnXgd'%4O05LD5Jl\Z&]Kud;R.mM4k)WFBn)gqW*6jUWpk_mq)hJonTe%VV`SbWo[XI3/ADFgSIqWc(tiXH@[BN!1PfOZB3PG$dBO?%O`kW%YQeN<8,%#,obVKpgFS!^\3V44BPg6u5N?A!HApGW$`)R>[_$Td@&!C'.FbU-[S<a;U?oQ72Q>8XII?G'41&C)Th<L\\snfL"-nf"%g&BC(U\!lcaq0r/BOlHq/:k<1Nt+,aASX!Q4(sE";b!G7$ls<P6#obN0i=9)8sF%"l=cpSPu_ReWOpHbil37Jl5hFtAVnXM0rK1U%8@:HE!]sBs\c%<jYg_o/q+V87@tUA])^K[g)j?!D'K?9C(<5kKP@BgrXFJ8:^G)P$"uPFg^TYT_m%2g5=>N/`9G:J3$0dSu%8Oj:%ZD+@A`cTX[[?d:i/B[qEQ5IEaTZ<6?jZ,PAnHQd4-36A5U%*32q'u&6aR7'CRQ9^t)llEBTuB!Dh9FSO*1\F!J.:3?#$%UbTai(9%/7c.tf8$?MH*duf!7Lt4!plirdj[hIE.0[+I+H\o]G<1Ik,@IGpM-D=n6JYfCV9+R)G^U["=IMiIo%;':ab,qNGV_QW6&ZiCP/CJ%!k9J'0H&\4OZcKtRK7o?^V3>`h9XH`L?A5$b+0cfMT'glM<R(dNuACLm7.objanYAlc.)j&qO>P_?FH*<hN/'l[Y_81WTW43JY.I%0RiAm<G7&^Z9F:cH%fPL#nNHEnMQ]HO!8n"&#?e\i3h/ZRfeVt]o(+TNnc*d<o(4q<J@2^Y\3;@J18;l+HS2$3In+r^BRg()r`<h%2^$RHCd+6n6GMn!c-AZaaP=#<MV%t/$&C;Umj(-aP_(dF*TR#QplJKhbQUp0Ks>Crn!h,&B"eM65p55RE_*2Ell*kjm.7"qBTsFf%_f2[517s5I3k+fK7.b"'(;gjWHVjH>&/PeS^XK)6bD>$3!?'F1<A5#hL6<g-n1'4`$fBtH6/F0"pPRAGoCnoghr!gG.l/[UT)3Y]%2,!8YGGj=aa2?&U#thuI$+jDLG;-lBa<fBC942kgjkJ>[]*!2UL0`%.q17Wm#-,gglb$aaCn^=%,)h@qg@<J5_#R\]qEfV00(-P@%rTL`UC3]82.u4o3qK?%YSA_A#0&8YrQ0)6a:LO"Zme5IA$oHJl'nU#TKR1Jm&9UEOR13(gUk>eEpr$:0j1!M"<IWRG%L0NWN@2_F%pZls55k;P;"@OtrRL_Q%WtYn&m4>Mo/OM0PrHU!P-+DG.ofl!BJ`%N=l+PNn$Os!/1gio*JX(F.h*fsl*l)!Ob!1Fc:j3p^oNeC#%?tt]UVQ*"=ipKd>qXc`]_;89:.eQ:gWW!fF_+;rUQ(c\KO;RJkW=h&(&=-l39=Y$rrNK\1qrHa5lsaV82[+nmq%OFArQai>SIG_6%iF<BF2P;dcUnR&_rC5\h?D5@JSOZePnE.9$\rsQi9Ltm"=BFk3(YE,<l->`!B[=HrT"sMi=,>.:jQPm$ooL-8c%P>-GhXm(g+p#W%4_4;?d?7W=^qoG9Z\"%%W0cWN4YZEJaG\$OiUG3:X7pI_%G7>of#tp?A>gEq;;5GB/6KC]%+[U,jW<9cQC_mX@%,jNk2'QiT@./i%9!2MRKlY>h_FB8/iO%!n!LA*ac)bBdOY,q.>@"YBP5XG4[ndg$^t,sS8(EtF#(*P@M[%bs7KX$L")QGL"LabcBMVh=q`@0E-lPJ?%m7J8L8jOVoM%iW_=0QX(A1hWRj3dcAXNL3m7\E3F"np_V87SGG_;:Hm80M7frh*1T?t.2c\a&@U15b>,@,:>a1Wa=b"Id<aOm3f=%&"&9+0]G=>1dL;!!UCF.A1p`*T9I60DYXKNY4)(NP;9"3;qTBV2P9>D\frhO_sGB4VFZOb2M/%r3nX[:]1;/Widg&:Q<aM(?heHK%]S*[b&Jj8W>'[o\hP]eBg@UKgU8`nEO&&6iPf>RD3AZYq#0:f$nUSB%/lXg7P$q*"5.=:sngIABTe#N*QYeKBR$LV$Yb1SBAJ_bG%N_L%@YHN78-2&8\&Ch/3g)<h<V!ei\5-GjjOSA#a_g"`'r*0m8qqU<9VRhCTRd"1MWHkh0<sE!e8@*`n>PfuZo#kn&bbuc0R-G?n%>!DT.6J-*RQh^bl;hhQk&U6QRk^\:Pj&:XmS_1&$<LW7X-MIh0DM]GmZ+6A,K_fteABq/0G2i@dgRnojb6\!e/Ws+>C"O:Q>MI'5%AgUuE0\l#KPD/&4<)(`Zo!NXG;tO8,R@0]\&H(QtFsEAD$?YS![CsmlB5@s&*g/KcS.3\D.JXqi<\B(7C:@\B2]Rg/@-P/!b#AeS%UV#]a<"4$3#U/;F#!1E8Yp)joV6N`b@Ab3_,:BKp:Upoj2,5ir=ImN^fih57g:F\,)Rlt;lf!i1.=T"WM2Bqt^heFtFG\BC]no2e%YP:/&erQ$?`[]db]l1B@(i)r`\p-G_s!c"8[WlYdHROhIqA-nbB^u)YVJi_,?S[b'm[K9O7C_W^IY/C3(Ag0,NA^PJ_%buMdh&P)%na%a1\p7D))LCL&8u7GOdeibtD6CAed36cB#AM6a:maa\.\ahj:[`.#h@*baKhlQ%@dNr\6=rmn4(.RXB&g/6\2,N6EKc`WDEsW5%!2O-oL]9CWe7i-_8"dim&^QLWCZT1rf[lqr3u$^Q+/Xip4U8kDS?*rPM]Itg:D$;kiPpZsZ7JOUnpEKOE]7`c9fYDafKZPpq."Xq%ofoXGED?3:0_sc/j,qct8<^t2nVHX&f4(p@^$S(b$M7M.fi?L,..;\?%1ad<<nCHl4?TK(iGO_bLinBU7+5UHbD\S0eLki-TGSqU%J<,G79b,/h,#98t.j7;V7#BYfMNIqf-\Du67A=Q0.)TYb+f7OHS[;Pn$B5F4XCsXd2^2A%CU)=oB>PA8Uhd6!&6sJ^djuK-=>F+_%9I?@\Usi_q18/EeX77pj;oF`D_),EZbq>&dUIupCrgH&Acf-ebf78.H.CDQiJbmt?[9B?kkZO_I-KFhWjG][!YV3&JAij6E8DYtB%HOq7mop%Ik8eZ_g=er;MK5!.Pm2ip"jF#8l]=1?1U(N;23"t&+q3KM:C9E6=R$!JC4XMjbVba.[s(p'BgjV?FQ]7(gb)FN-HCQ_?%2S_'kQnCT\%l_(7j-\aTnBG<e*f,+[k]Y\J:=;g%=r*T0%-M%kCcB?J\/@rWPGj$hVBD8"^l0SIp!Q^&;@Qa)B<c0RK@_JN;L0,5%NpCOuOKiYLrltOL?CDYG^>E!N4cArPV%84P7A_4aN1tPCap4fKNs=cb#Dn6X\jcLW'=qU92D2LcY+DnDFCXuD5H?oajY!mq1<-YG%U.J9sn+3'<Wu;LO7daeu@$Ne!kurEY<Hhp2`cfP+-!?oW68j;P$O2We$*IlWF5Q6lUfOfAG>iT`+!?:uo`9rQlM9I&E%-bQ>8hY(%Piu]PY,6*9Q]I=_S"$.Q)u%VsKLY^6H=UaF$X#q>Tk_X^cc+`P79;A(M)CLI#Z%W1H5U4IFf;8Lr_>R$<m=GOiI$>MVMeHCjhU.#%WHoPNC\Dj>dPC#"RM<GiBa*+m1-4:-19_6^Sa=3+Z(6iYeTX78Y$+KNi%!YE"\mfqqe+0tedta5d=<tp6dsV25%&:PT=!#8">i$k%R!q^>.Ob^&D"NeQJU2>WQu&<7I$kLD*QTnT^)p<ir`Lm0dp]kd@/t/N?bs0WGPUWlP6K"t;=D0&d@*SX^XIt<lc^>k[0M7W:VCDk%0)&n.NN0hWdkcT7M(RF<=Xq1km)V"XLs!).c>gjO@hITh>Bj='4eBpg*c*KS.,'e<U)LkcG]%>S#BYQsqhs981DZUN)`1_U1%t"'%@\6fn]=E#tW0-\kLh*Ft=Jp7nq$I'ACsluC.lDe5h)&;d]uh\B!gtXA?97ZqUg$<pFW=sV9HI.H6-Mh6F^Z2jRYV*]cV5=+:O0<W%+S?4rAJcWDU!X4bT.*T2).[WEL#a?s9K=)QOZ4.OSZLW#)4m7)Csm%J,g5+#Z5T1MXmlag,1Y=R>-0d\69]<]$fMf\fLutbVD]Eb%Xr[THV@;]*:8oC6aSPY3`do^$>+Fh[OC2g?PX"(ICHBNE?bpY_mOm%_@sY9H0C3*LF]tp:69L+2Bg)Z[fpB]B@uFA<>bAs&@(:T/%8Fc9gY,p5!:Wet-9QYt@VWXJc3iuG-Ag+%&.<gMFVl!a0U/'YEV=t8^<-`*Qq4,ZSf!0pYW>qkA8ukrnO)c:6pL(:5bKFOK%:!/K%]'l*">$19W^JSd>"2b^h3e7_\q4G@bnBHqmnkOGm@]::3&4Q*J:X>2UeW+Q;cf3%[ANgmT)8Uqs6XUj_<fP1'(=NT>hL6/&0Sg8C%2R_'WNMTGKo6]ne@dlD4Y>kj%$t$tU:98t_)Qa:k1*qMYg`MMVKQ4mn!a);HW]S=KJuS(*kcqcNVIQ,8HVH98G]`SgN8ItU40iY7%?Zo4)hS&rLAM@]mLm@/Im\XWXF;nM#:2k^m)Qa;"X/YZY2@bY.nGYV.&T#p0V:<;@AN8g:.'%=XC8"CAB4N:%4EgiF;KZM+4S^%7%,j/%jqeKX_OrMN-33Z,X'fhN/]XCI8>Q%'>!\1Q\OeiA0*3@P&7D$!<(na0q'a^Hj&6rWNGs@;Do#u/s1a'f#6qU_%/GJUSY%aB:%"'"E%'#)<TP[YLEV77KlJVdpd2/LJq#3Q!sK5*AUb[ATd-nSMcj3gp&X[F@Eg"bu&>!qPtiaGd*,d!bFAasZ6DRtbL?(ktWE4lmE%jOA%jl,Zo9MZu`@!B:cD<OPR[8(aReo6K[i)f'PDWTW%W@po%EE5Cu`"/YfXW=/.VOm5nqO,AJDXa\88Z9dTWf$@FAS1j<s9[iBg%<W0kAFG6DPV@/ur"jpG8cJdqP<FAH/iNSkfH[kBI]q`diD$Z@-MOKebbU^GYh@.=M-q;6i)+l.Kl]cGeam'aeN$naSl5n<hKc_N4%PkW_gB)8&FA0_PI!*"gONR=B,Um/18raW$.0V[XA4`V$+rNkdmGK;+2"K"=Y<=_6kl&^F!`Q4:7mo$TJpJf.R9#/B\V<4CqGS4>U%%K\R3KbH-W&`^&"!_=%cfE\`qodnRJ+YJ_@/^C4N9lT<7%r?%J^k6<=V(hWP*gNN[qYRGnKV?jBO,>k,[n;i!b57]@3t@6:aCCpr%ml:EDjCaP(.3OBgQPAeX%7MP*&5/g%6-C9NGRn3VcDq4!^X[S1UB>cfmBA!HI#oqr6M$<h#4^GENOV1=SdetqREY+()hb90[GN$A%6Qi;EgK\HId:dn9oUYE5,+)n!L/NEt@9PTWrQ'_n:KZ7<l@Lf=p6eHBc?Zc8h3ao8UKefc'6n#/e9X4kR)F]5jtnO2"B1BjE@U@E%bfVA2hPj+NKh'iBQo_J3S/g0.7MZN8HO[c1TNM^tc25LA6ln%YKT%@;(`EqH/"W@3.k'B`pa;g.W&N:N5iYW_QZND]^(f^\RJdlG%&5]8j9QtKh\oDT>_dH';+nHmL+$Gj"QN>bMR_3liR61JXB]oLj%?P9i.ST,=35M9p6L?QTXIG4(PUhI',Cp+b;+M2,bH-9OI>gLn%K$o6,jF0nHf9!=J8U[aDJ=WF,D6MasjVu`N=J6XnC92Sa8i7L(QuYm%maf((BFLBA]M-*q[V2gQ#:1>ngIF*%bTd4jB)%25jcKe:%QrM>qEcW+S3'Zcu\a0bk59$>*8KDFKe(@RB`B/Yh%(o$Hl;)m1JKW37`r%)O#HL9UXSVKE?rE?-S39FT,Y5N7m!Gko?u#X;Rb&=8%JI"n2XSm4uRbEaZN9pudf]lh"=D8<I;l#KEcM2.Yd6tsJ&F[L?9#m>`$rZVY5gg>]X$/!uP=2%A=PqS!""WZ?dP/-Q:#/h,O%gr)%VW'u2q/;K/e6Rdoh=HR_19]oce78Tako,0;:EI1Z<n(FJrGAPm4YKS&V^T,MqjBh,kP?mW/]/H&n#EXp\,iMD7A1LVdhB0(bCjqA%P4N7S/;a(Wjn,:o``gi8ldN$=6c`'+cuuT%QkgVn;tO1bUhj&?0a0b(WR2.MC%De^"]M$6I[[0Z!qkqqoZmGk$/.o7pp#?D3>6H;%^?jH'=[5!5,DnBRo?U_29su'9LS#PdkBk!*jA6iMbZb9=5gZ<n\*KELKptP7-rD3WQl4fXIR0$b@tW>^(LI&GXIPgYoh,QEb`"^<%eL>1@LGB_6<n(6DZc2,==C;7@-da&k'G<ICKt8&9@#-`X:Nm:nLc)PN&ZR+#!d<UZUT3N72\->m6A7U;T`AS>&iGBp#c&sn\oIn=%'\,BPd%PLX#c7_:!Shc5?@1-n-r/oqkp56-qX>=6A(S(HeIn4<NPNn.<-28h*WS"&1c4Oi^`m9'c)2a&eN0oRnI.jt1>^$XN&?YB%cb2=k:aeK`Vbg;c<Nl7#@<@^'_6W6<G$@HDGSu8Bej&7*esfGBL?tZ*#&a_hU!oqOBbjbc:R;ildL\(g5Z_TEU01[5JJ:>2l#:4>%kpaIad)\9jD:"/2bGdhZ*jd?lWZ%1V"&'s++ShJbRHg672rMnoUnksa.2\C1Wbpjc5SnuALZ@h3,oDf+8h`]!!,U&-7WKuIR:*<7%Um4D5`l'D8i8i)<Y#pg@,^&6e"L,m>=jh2+UTDO*&k9Pn`l'G!gLU#8>t>5rdZ?T+!WPgu<77P@_8teaNuUQOP1FlM_nqSCbY1)@%MbTB'9^'g>LE<R&C#W48;,X(Bm1!<9dPRmT\<L,;Am%_8gRj$R-)gbO;?O7)-'^d:?mlO;M.=i'N*&<1Y?_$=gX0%]a3q"`DkkPo%l.'7f*+Oue3b6U0C)?4elWij:,JC'X5mdA[4"A8E`%OVo<Bt1iD6l;m"'2!9ApqQZ^i&(T,_$[<:9-s8)7o$g,+@=YrJkRrDH6qH%E[K%SffMQIYm=[]f;+(+V=c[qDWilFF&9D'&[o@-@=:^X;j9!)m87``Fc5CCJ6@/]G>du7,WFI8GLC&.rj($57E%5P'KTr,`j$E/%c'?8PN"FW0J/=sp$!QS49")(X<uD!"SK$U:R)QhfUZDfQilgq(@MUoBl'fSd\X0,F>IK[!q/Kn(e]B30bbY)lJ!;e;OOUDpG^>$Y%'9e/%4#DdmHa%iJ=D9P>f"e?sg0Wf!coi-q247;H?rd[^6tgl2P0%Q=Q7NdWeOu3e.,u!S$]f!o16G?)>^A)<Mq7F@$p[Df.Q0qY%4(\UcCK)42M=jQ0\3+4c@]E<L-0d=09/AqD8V(I<Mq4`#8Mrla21UelNrj73flRTpS$`+YNF3MLrL7mX=]_SdQM$&"9a<h%T&lk3%#A/B^&i(L7$"e`dI-U\pAq<ikj0Je^j@DpjXTDlG+/N6l=a"D(TUi&+J6bkue*9Q>=2"gDN9L!PDF:msBW1jqVur>VKTZ^<,&3Dl%JptIKXDMRrZa/0u1;T8Ym8IN$+(T(]->p:t?B(-2QO:%''.@,e8G-/_o,AS#+SB&4EiPPQcNLPE"?=0dM[V:]P2#oYOu$Wk:"&hi%h18^%PL88/$S**'95"5nYCK%j1DtFI5@)L''i\k-*bL0$JOB_6Vk=,-*R+,Yqf?;^V1Zm_^2!+s`3P%M8`lW"IOP$)r_1P&K(@DJ%iV"V2K1QHWWVO`_#?baLF45eMIn\#">u67mJ716:f@.qjTM?9!Q2Nd.+LdKa<P%K$/V5[QVr@eleia]J-0B$`.28uRh&0f+R.N8$%-q_.V16k3uTd78%kD<<(PI2*^=9VDdO<s</8@CcQAuj_2nHtgZVC3l7g3E/3Q#nIhM^:[J,1H6XDrNN;6D/Rf/B*dJE0XRR0dYU5%ISHf%CqCuji?g'jMiA&[mSI]6q:B(Pcq/u:Sr&)cRbD<*Vi1+2MhI'6h`jf0e(S1#S\0m#NO?O1\=/,"RRZms&%h.Pl%")8TZ0nr%I3@A>?;L0;.\`#kJl?jrFGTs-WotrUmqm"!#:S[A>$RQ,pWc#U.1GN%c7!-^8[Q1j,/.?q]$lu9o+G3SpH^;\#QF<EQUHS/*<XXS%[TNE_"4>];mTh\1)XiJKT8VJm'B;/MIX!u,cGLLi-)k>K1=,.2kR[*?_,8lLCYDFu._A3M8TIdXORFPj];?r*b)3db'^S;,bBi7<%8u@m;YZ0$&(;4.32tC2.bK%1&:-9/F5Gah^o1hd=D+dQ`o/jIKA;B8^Fq8EoP'33nq)@3O7'`)f]\-4m<=i\u.?pcI8U@n(Rdloh%f3Y9Ml$;5#*H%`d[/M`cY_n2**gQAQ]6s0kHLoH"(icBmc:F_nQqEK$5l*!5"K3"jDD\^LVQFSWGL*QXmZ`AK;0+#l`tHd0Hgb;M%*XLOuJs$[a_3DJF*?mR>;PX#ZB[e:GglaNqgp9,:7/''h0eA+LhncIH08cMk5D3(3^k6ULZP7tnc**#I_N"du<s"&0#_7hq!^!!0%m]dR-eq7-7H(`f`[n:(1J/DWl1c1T=S=iaV76;CdXe[Ni,i5Pui;63%gpWp6W\/(n]lRG8[[F4M"Ic"@;M:!+<D-RU2>!aFl(Xis%R@q*ge4p5Q:Idg,XA?hB_13:u+VN&3R9p1riV*`>r0Hr/+,I!gQSU@F<#EI$B.g&uc"g$^%[-8'Kl!_K=/?M#2_.4fGfB.[S6Fb)%>^fC0?TqItg%F`374&s(Ah>2B+"Q:fPJRBhNsr)ne(@$$$KE^g+j!uo'J)9KUhh3bQ$5bb(M][<pS[Tf<^2!KDQ`^]XM$(*oWi;5%YsF^4BqAq22OJaE?+E(Q)hd6n3@dNT*&OG\7@,gkKm-:/ktWb@oZDLlrb-@R(<YGh@,gRkB@)0-A!63G8t]_Z8YJ2(HactZJ#22[%V93cZ(##2"O_L!uP?KUb#E?Y\VGRocf8doMJk>H5,_rS;cY6![f;-P2-3cB'"A;G(nXP36=[%-#a+7LI7)nm`Vu.c2_XTP7EW9Ct%Hpd(%YX0<a,T%cCV0!%"_B^=@Fng",[nH>6B<I1Jfncd39`Eim-#Ma$=8+^,&Y3O^KIRt]1rgZc`*3=?)<l823i7:p*D(-M@F?J[%VXkjL7E1OCM5=!#[c`LI\5.j-Y/an81]j5n@$1@$hom)u.RJ_@1oi\=>iQr!LfPDOo<5&%LlIA2#7!Vk?]7S0\B>c]!^0u(W_rBd%7!"q(@Rep1,/EJl`cFZjEOmG"PjU.^%8u#_YLUu7<2ouaIHKJ3ieF*[9%jH>9naIak%De0H=*3$oO*.r%bUDk<J!CK%%*1FIP*ig%#0b/PhQYIM)p::_C-rIqmmM$@SU3PL?oP[o\U)/E775H:&[-(#Gj0[+f`XnoYPU<uD&d$8h9X=jI>n\[5I[P6!k-q`>[IZ+_lgNH%\U&FM0p*As)g6VEUr`q?6.]M`U;uQ'Ft,u25BT3Z.#]%=m9?-#-J39\b'a=a]E6[?rHq:G1q)6=]WJmKf%`d!^:0se"kMN/]I`D_%CqKXk^4;dG\[_U+9!iUD@/\^VCoWCqLaOYaWmuY0Bcsape+a0th>UY1ib!#;rV9Mpi5!qI*-T[fXmAf8K\E%UPYg[HNe.&!eR=cA%/E-&l4eG2So$p@tJV=l:*fScg0;]P6=059sEU>%_^]oKPYW@A,7eo8L8mFtXInFl/cZiYt=fa;!5[]jPA*dTILFa8T_0oj]\=p1W%\JBT1@hN3nIHS7--W;BKm?gEY:,QJo3OiL%3W-<ZGK['e0Zc&M'CKBW+6tY^'@,lQ?kR!N-X=hVP@h?9T](k2O%hdm`'6Ui%nrG9%*+%0Z7_kJ-q`TuG9WH;VL=:'2$3E8gpET$HQ#N5=;+V"F(!f8/\BVZ4YuA($#kqSf#/^u4oFC%jD*E:8oXsScfAtefjiqmq0SqTd%jiq7oe5"M^V)$Tj<e8;G4>Zt+ZRWXJZ0E\)5=2C8/ldmHa3C!k,[GqmPMB3*ZA@;?oh&K!WG5&o;@h&k8:o[#Pgph+7(!UaeA3As%FII3eU=9PtrEn?f0u!Bf.5dTBqYB]nT/YV6]F1!hQJA^j]r/jqedN;p$o"Y<bJQG`#9u9^)r'07%OAaM0(MT+_'IZl'0Gd:L>>go%ek08gE.8H`ES.p3P&/-^cEKAa[5Q1"2G6NIZD,XPqQ_qcMDt(E7=bH.Q>OWScTKr7ej=F`m[<YjkskLKR8+5;eQHX0P.31ml"70G%a_$5=C9iU>kD@L^Zc&>UNt0RRUu&1#g[cB-o$+k8NF>BKc!!UYFUog!!O(DZ0HsnARa6J">JSor[6.-bjg#G@YgpZNWe7RPY/*No%[QX8N`3\*2?!FK:#::@q`1]f3kcp/S,!_Jr7IF3gs4?.q)hh0a]kd!Man5ut!oQ^=V6QkIZMrUac&Sp;_Ged0ie:"L=XUX(1"F:B%8HFo,*-mE>?C+%;jslE-_boaRrZ+39-;j*_H@e8BVlFK;>H`fJm?:bVCK;T6<#qRVg]CGA2-"A=s*:4LX[!AggPiqd>f&4SgSdZ+%9W8pSRb%l+Ql&aK\+T\h[0Ihp3*V)g1o#clI/bmW457Mg%o\@?&Agdl7&`E9>h^q)_M49.QNAZR^VRjM;qu#@#!s>_%%8O>H5Rr+%Kj3@idkcf$/ChE]L8;>\>XQc4%1DYT'9_0CJ5!k>HeItmLUE>:+0mVQ:WFFWV5iO+4aJD'V6JRfA8md7o+FuSY$0\:VmRG,<faOe%n+*8MYIa'^(f]6>:3``t@ncJUQ.F3j<O_(IPr^h<9ZFKTQ8eR<F:%N7jXn#%0YL9QECnNU)kd^b=f!FYCJ%`5hBJEo-IlRJD0_^\%="2H)?d%;"/!_akl:u5J8[K,sRCcMU<MKII#KgFP/p:ltf+Yg*WP5V4G\A'uRa7b32&C&EUgC,`M,S\-@[*cImI*Y??-r4'?_<-*%.55tWJ4[Wq9JbqKL8c-/H4UMo0JZBWW>H"aprh>A).OJ+m(5U`_?JN0\LeUk6H3cpo<]Y]oh6%GNB-3#chm8hq)lqmm2^:hlT+(G%DX/.?D6N'?DMo8lEGNmsD$q&e2e3op\0"PNm/9=5\\VHbJ[@_3<9/F:Ltt<!;''uYF#9-n6Yl)!hOlk/e")fnlM>-n?o7tr=tb(l%'d@+<**T.[<3)BN[8nu<Kkb<`f#Koe4/@.`G7Q%>?FGOt;I`Vf"cI=_m[f/JK0@rs^D=GT8rgG'?t,['ZuN8c%]*cEW^%6L%4@>l%oVTHt2?F/adC@TT06)o&WX)$o@%N-F!*=:YF*>>EG2#,4^pc3R(o`s]1HAhUYuUb@o+R[t3]9O$C!'=!m'0Ej\,tnoCRP?%hoA\s%G&ua8:M^E_W`BarX9o<TRq1"g&E:j5%ss!b!-W/kh%%(".?E@K)W1`sdt:7BnHHtrU5H2H_hPc[]C00UQ>dT"H8s<.>.!rkq];M#%R2*dem304>YGHf(i5Uq\gk*M>^au\cT3ETqEp%N<QmAmOnPgR#LGFF?-i`EZI'e^(Y5\/'4T_R.LOR%68*lIaD6b[ZKh^0k(Sjp]%3X)NdfZ(!p9'45EF3dC63be54M'/Q]>-'\obc7H(qg!Er>%)M![KB]1'@g4`]U\)$ERfHmPhW&0VoIoeHkY/@J$/@K.gBD;NR-q`%LkDfI1Dl!rf<"<q5,Z:5XLn#5ru=L[D)XY&:PZI4F@S%hr\V;<9R#Z@I3Sd.<_k<L>9&D0s)[ApQ_Rt)CM?\6)t(13VGhoh0JXUX%cYAG5F$mV0B%l"Y;i)`XfSA1P2<`la%*BXVH`!%kdA'<so!V%&4q*:#f&!baY\p^<;73J=gI9]QGa#(iS]KJiU/4;.]jkeV;r9CD%4D4&s,VLSriQMsklC)sXAg<04Wda+0)uL,A!C6%UUJRM"l=]P8XXqI;*80+b:kMUL'F?6T/Vf_iRGm+nC$9P,U*H5L4&N"ZrQH1?%[iZsU8?`AGJOqh!A>u)PF1DmL)L-!g8kZ.UR8JM'd4YktMG3FrK!#c+WQbA$156(6T,GVc3$iWM3)ZRL!0W<UX5@`=0ZceAAsL^M%hSfoJ.YV`EPL[m9&(eHm,]1"b*\^"p8A+78&bPV-.bRA&#T8-n-J:q7%*.r]^lBfNDmYA`;pi_r"!YuDb40>RXF@J_,W8:GZTDQ2%[FT!b<",m>M:Q=m89$B>+p=d1)D$:T9!OT+K?)C!cE(L282q_0CtN=K[\tCAg![iqe9ub[f>!2S,K8?Y#/rtgOf\8O^h@K7R9%ij%Q:V'T%n$5hkpdWE0=0Bc>aYaoHS*nAB32KWUmgjHH(WP8=6!Y^@1bTk%7nq.5tOr+4K_f\eZ9[gNla[GEY<J,p!LuGDA!J3Hs+m8%X*Nj@RS.__j#Dhtp78*_We$0SbYj8A.E/i0Raq-,:1G1qUIO/8]2B=Y\*<^0S=Cs3WUQ$,j)KmK21LXJ:1s*p`g["X70O6Pl8JnQ%9V$hP>5-(q3<,bFqj'0!XfeF]!'(57oY_nB%(p(c/W2Q&aF`(dWj0?Aee!Yu9cu>jZXTkdpGM:>==HqB:gV51HCI#"j#g"<D@P-@%:[,CO?PTTqU+SB70\tb(!EL%(<L#_P[T#2Yr5&#fQSjp/j?85[i1rM0WejaCZ\FXWB%BR$/,U_QC33+]?=qd850JbKO=ra:nG_N!%nJut_lL)/@<.As+4cuuV$0Tu!SAIu7kP^B31f71s9K<+%p^tdLED;c0@>Q<d1WV*Z+F,Y+07-"DS:>.H;21[iTH_WK9hf["!gk07%%:M#E%SSbd/=k0oj*R5fc_G0(e7PSO;),_0ZI`c)i7.7a\sFM6##gp="K&r8TiU>BU8.d+cg@S%7eq4ea>-Q'Mm>O50I:RpBlK<6%C[Jd+j1.Im&mK6fT,NT"Y`EEjpg^bZkHcA,0[JYWPPUu&p:S^Cl-Pc04,Y:1Ma=h7HnqO%G/!CqlicudF%7/-j^'g5PU&s/p9M"1%;UUE$EEtR/WOT6IftAhH;/i?F;mX"sZc>u'XU9DNKn:hCoVu?$j^AK==ViA'KAk3_]d@C&1DieqV_faDJnF;_U;4RuPH4i<E&L(Y%Y#ZU[O=#T\ZBkOp=&oURS@Pn==["`u=c]"p9uU2_V6YTr[+_,FP`K\(X[E/X#F3Md-CL*t%Jp$3b+NFsg=8=ULG\-B4sW]qg+YD4%.5f5BM-)M@`BuiQ=-oqN`]#3/Uq%n[b0%BQa8d%#[mi6#apCd]Ei$!:`Kr>:SZE9)XZoJdFBH$!c0;3k3eh6#RI:<V+]2@]ihli)%)*+o(nFYr7"u*&tFUa2%015%8&MP7*<F'YE=L7@`-7c4KJk>")8gLg/?qRh7hUS8)et!ZY$h%*Lo^H_5UtfBPR8qL41,D\Cf9\,#%^!$W3n<oI>;]uSm"."[Ta?&%D+20JoV/\b3lkGi8;..A<NTl@#B:L;(fda"'Eoh6J[fB)RC;Sh5AaYa9=6RGq>ZTaj1:D;Hh*_::%j4_4"`DJIZ<6B;%/J%)JV+e@6mQNe,l4jJ\//"?4Y3<]IO:IZ?L@Kf].VKed%;\(c"%]+Z0@25+l6/l9HI!XtVH-YZi:;V;=9,"=%-,lW!-).4SnE!6"&eC?jg!1Pb4ruT=K>hC",Wn><JdntJd"bA!c"PPFEI07(6J*bbWpqd&a3qW.1OLdl$jcQL>RE1U'3GC^^GI3m%19='sDeS33dT_L8ZRoq[Khj/(Frho_1*+AXcfba;:S"C%[N/%OAS'KFmrP7'T:TE7bK11$\fPi5BQkIcrEfq:%<YV5Pj!$.rK+@g%e#Bkmf,+Ytc1SG\!g7)AQ081b,^9NZZ&2p%.;.:IlLA7+lS<ZA[9]5tV%g]Nf^i.rZ+c(7bgnmPl71TA>]7u\`_\qrWJZ+JTM6LC%"*o)sp9Au`:`M='[W.`m)0gslVFGGiGU<]?\*JZhg8Hj(3'.PK,.7G#XjcmU.tq.99K"7?9Zh-Yd4(oC][0,J2<e1n[[YEX/7#)h%S%g?8_L#eRM4F8?K>LZS$(3TrU61<Nf,:[tVQN),bk@EHHJ&[c<#WSi5?%OJ1s],5(VUcgdn%H*n0G``,k&a_nWW'%XU?I%=Lp`5%`+<DRGt&4@YF\4`.f&JGJgm\!_<eE8<UttGB["*K!$I79e(An8WF1WZ.SZV/rI%\F2l>-?V]l_lHY:%+@Lnh=+O&7E2#s`,8]>NF%&A5h).T[q+4);&h-Pb&1)%W^g!Z\.<,TNX7JDd2d$=SS:Vnb-@:)XN;LNPYW,hZQq;sH07EDVAAVnTpDH./]cUj<:nOZKIBR*EE#%"O4<>#_qq<;RiE4J>gK3SM=Z14$t=7KicMjiE/J:,:P4K"YEWH,2#p0pTUM#Ou2nU0U>"FjTqBPPlsdLG?#?/'1``p&r^f_!).C!%e8.l4:BH[QMP[@phG:(\:dl2APEKV?]ju?iY,Hl50:+kcL[/%`Lu!Y_s)oN!kTL-&c3qX3I([Mj)cEC20U*34Wf"Ta7TD;D`91/Z%A)[heD_(Q8g@`-e\4n$(W7`o,#%YGG.KkCFMN4&1`0u`Q%S5kr3=)*4f=bSS]:!L<-C$atf>O%5esHZ%J6RV'0IcbHn#(9/\K'r'%,g"5TQog\br1m@PJe\f%QhHuf8BWsJ4$uXo6uC3JB\/%U$g\)_qG_qHju!*m.:ibic5^f)BY)@u,4nhYTQBO>Q2`fPC7)XmL.L=J%F\&=i?8&BbpITudjc+q')ENV;X7))aEKtSkeME)@VD3JemiDD]Gb`0EL8([fqNn0CK&%rlf=P7EgDZMIBI7`EpEIN_X2:GQ$i?EH%0*7fmlY4VL/P(iOOr)m/i@,YnRV*h8c?mD"E0r![VQlmEWeN_\q(C`6UsJo3pD0A>0.R9J?kZ*[f#.h``(8&_6.q]N"&J4M"S?EG%i7-*s'(+o=7U?s+U=[KLmaBtT,^B[X"IpaYcuLa2GM7+jSje!3d?o*HSL/L+IjB=;A\Fs?/"'s]S#(/FZo0?n])`.102H')Q:h4A%lA"r0SQofDN[?)Fo@d^U0XXSIV>K?(/h,hF^L!QVb?t%tFDr(\KVHuJ'*p_GRY9TphUjO`XLoI20g/b*hV1fP#"F^Z-ug@sJu#&A%W&.Y*&PP,i`lJie+MDrkoQ2gC#Wl%bK/pInYr]2W@*dqIg'+$]?uIJL_[2qH/1QH`b+G!I?E$RAH%]VGCt^$:_?n\8MslVmD*iZT%ij&*Dc9qk)fAcECdX2s5UMG$j!/ttmG@n6J+P!jl!-2+<4f5-8#F0SjM#So'i.3eMf"iW*aLh6'm]_?gmjpWV6d9UtlJ71?$`<n@%ej(S^Jk;;5K(^RQ?s6W/U@d=3I9E)FaL1Z3U<!btN0P2r0/,s#8C)_I#qX1OZ=lUD#?oUm=kq=U:lM82^rApZ*gsqJ+&\io?_5D`%KIS!^\"J7oW-Znj[OG^L!tHX3<_`S5(+_3IB(u$-3g_4HSZ&ngjAbh?j:=TjGa**RHQAsK8@t-\PcLNdb1U1DNa&a'(B%9sM_=u,%KZ[72bNI-0cY=`REfStQ/C&,b,2[b%%Lk8]1=GWS.@"CNXHr5'NAq(^=405)+=Jr!+:aLW-pYfCUZIAc-569l,V:JD?tV10,V:GW%i#"7"mBg,<k,!(u->?&3b;aobGN$imY=s\DVDKY[O&PKM'+'\?H^biPf(?$+9f<+eM[.iV!ch].7ouO1EYm7hkdV^3Ql`#J-6I+t%B!Mh&FQ03]nOPo)R[#2hNKX2@du]hu^,K^=9ZiOh^CiA^9^p)FH[?fL6I/Z^+@VbU//Gss"qWhZ7.HV8/"F\FD8C>6i./PJbG!=H%n+p9O.=ZDSl<DPt+'+]/oiL"8j=*P,GPc6a0rup_X.FX8oX6c)W^JXaCQb4d#M$3X!!u:jpace\>$&#<h\7e![H(<s0cKM%dZp&=%='Sg\L>3Sg/mckkDU+?Z<QlS;ld-ap^Y)5?AS"Hm_)OrT7.O82dN0qpA5$uBq7AH;@S'[b!;??iQujX2Oe9a^lo-kX&No`7;p(8\%f"\kfm=;C?3h2\l<gJuc8q(kd=Anu>5.K!7_Yo^\`qnON<?<<MOqHJ:SHMGcR$+CnU_KPNn6:^h\rnQ0j;`h;Z':V^em'pV>tLk`%s"KF(;3!31i&K;QU]C,!+WlPIAUQDW4Lqfo=]\KW]+Zqc^6kqPV;)G6CM#%a<!5m;<,.3Q_j&+8TQXH:$kI91(+dV&R?%MPRJ]X=%2.K*%L#+[+iKr("S$XVZ,c,i@^nao^'TL`=3K89ZjScrt=j<sg;*@^*WSFN-J*+C7=IoAJBE<+,B-tTSH/RI?QpuG?DKlJg.>ct4%;T1FS1WlJ7_7ro;%4p9PLK^u/X@p.@(nRK?6cSO]lfOJN(dT?s5TrYBV^ahbKcB%mRg11#GOA!bjZ26i2ppM1ntXP*ffaRMX<4M0%8K<%6'9GPg))F)&`C`d(>O?jo)-%Yt.4#m._\m"B1kSAM\eU:Es#kql:gUi93T3^%'OQ-s%;(DX"P<DGREm>,@FMB/%r.PT!3b.p%Q@\JaXR:shJ37JO423T`8Z9@AZelL+)RGk[rAuC9-,&:,p"ac["RX_ZiDLZBNN+S(o?PLhUACi?SWa(n2!P%'lH`\R.nZJ9fMkef%g[#\*qX'jpF\l[G(7.80"5[cKGqRe*;%+2ee0`<kq5?*HShbn#7C78_+<0'55jSGqZ^G;IOXsT3V.[MVI.Q9m'?k3dA%[AH@/"4$%7(fqiqj\BlB6i$*Y^8-IFb41D(>A%S-(SbP0NP'>k.[J\=^RCcrsh/3^F+GOAeRhNh;Y85iUVHVRV%K9D%@0XZ_/`n23UG)#*6,L%`SY+[4tqnbWoE<W!hG#T4\D".pfSo[Ve:=u\1obfh:`;KP!Ht\8k-up^7Kn,6hBo_\R>lo+K3_LHPOBbfhaP!o1VYi,gJt5WiD2(%[\Pq=1tU2.cp3ak*GUnd,F7Dp-]FXgLY"Z:<U%oiUHu84B).VK1WK`Zp/pFYH@=/oN;(jVPki$CWCLt2c#g98XsG<B$(#^R@</e'%%BI0T"hU(:CC9L1m]B/Z+s+o5C9VIbNs+1KqtImJ7rm<8*^2uF*Kl;0R<FU1BYX,K4L,PmqTF%:pA:j`P>9S<UG$U"`X7(N;%G"*%*sTr`_a>>s9H'Mgmq8QK@(#Kp`E3aE^)+HICU=>qJ.h8sZYbI9,.J#,8]U]Xqg<)PKhXb,#[/,OrP'EAW@uV?2.2B5&ua:,3!_HP%HBn0^[V.,C^H]3kBH.`;L''4]7s$QtWBp=g-%M_bEN$C=8$X^444L!7;naO&r6M2!`tjo65#0M$pXXCr^_XC=)/L.6*hps2=/R98%0M+7UMf$X#)3]=4KLV5b3u3(4@V+XA*d\o+8_atmdEadFg&m;m!)Au`o"M3WH7udWn!k,Vi#Zd"K#[!>+B5//ERt+NHVq\TT5cVD%\iaZSc8b-5DTnL1OA(XLo@D;o<c3h+B(n2\0CsV2P6MH)p4G6V)5lW^cA1WkAm=\/2hi%EKU'):(BK]%m\F@.9(ZUdEVeO[Ou.?L%+WJh630dIJ8%,I22,Bs!qE?8)h+9NAj#Mn+\[aM$U\"AQ)T(Y3I^t]6J`Thkn/mC!RDaTmCI^0h\1o_D*A=C6HC)hqo9Ugp8;hZ2%ai7XNI7^orc8_LQcehM<g)9)Oc-0VB8E4pRM#)(#@L0_,nc%NM9%E+mq^Hipm6.?Th2E#.bY(fiheSJ=?OmDZ1)NqnQjs8XF\o0.%YX^jP"&/QDo8ik[VQg_sY)'RqidYoWl_hi4-LYKJp']`cjL+H9@7>77_@sbXSsVJR=gf$Rmu:b*4RNpm6M/2WGYALlUml?jo!83=%'i$RFA?U:0%bRJCEGDk3%j#KK\C6Z32lRfgVk"b?ZgIKI%>k1E+s*,K(X1]al"SdSeD9:_#JIB01ZRQ<VT,j(\XGTDVm1S">_lWl%$_kk_jH==-TQj<iR/C0rb6u8s9$W+Hibj/uNHguSAX\VFeh$05aqKdT-d@]N;I<b7OC'F/:(=Drm@V];a&C6<2WHL(i18-A?dfLP%-jF'B/.I>M;!S<iml.89;SZ$?^bB52%@i*6DT;h-82ao2mau57]`]YU"iH8\5lTQI1-:jkNi*(lprqkmBat9h1%s6KgfaJ+^nbrY%k#'\L/IFO`.'LX2L<#g:WI;sW,`[/kBl"YHAsfSIroO_9FO1t"a@laEjq)GhD%^7)3+`1Z9T]u_)TPdp6T^Q$fatVq:A*GrElc8k%%,5Y>$%Eb"mG7/Q00;g2l<hOl54"Lb\)"Z[k"0ETrVQ$=gJ(m%F,@\#DdhtF!rS0qGSg'O'9L4Y6L<EbO9^tQp67aQrn`b<_Zmcb%'nniKY0?Q?P(m1qBuYNKDth$H_b"5)9e\Ak!s>EHc!8$Rk[5#@^hd`QT.r21cLk,#"Oe(N.8a:iE+!E$__gZ3Jk<*"(3Ib@85d]7%g,?^$h<fVD=k&N&^8d"j)!UBDYe0)!D7QbuR)B$1q9sb[GVL9jIEioV$;==i,cb;[(YH,)?,oRE"i0cg-PF/^Ru:Di*)c%SR%!K_%js0icP3bSjFDW+=k<7m<KkLt5oC[lE'7TCd7/P,oML@NRGOD2.20p`\RKqQJ)ElVmQ)E'4)Qe(lk)"8:BUn8/F*ZieE>rY<3C-'L%Q7(THA@hTLaC@cG'hk@LP7l!(-]j2MZi<MBJOq[:VaS*f`ZuHcHh0lg-IHKe1ipG#8i1j/UkHr+QrZ0%/Zne\Va[@.r/LNs?kSHj%WoC-%9VTp5dj&mYO\rqH95i;oiEe]MpW,d5@NNUegVr&U(6+pXkh6?6$4ZN*gC#<YU`#0DR"QBF1o"^^c)q)r-@j*TIUAA*R,k!D%I"4jAc02.CR^nReF&#n0ZDY.=Z_j*EZNaA-EmcQ!j<g6NUSg(>HN[9u(f,Im90(R^T&hn\'20/E-[Z)Z@e=3ZK!QA'U<MT0-[?+I%alllV*QMQNN5kB`3H)L@JmW3;=!rAlQct[:Q5;-:)B;u.II1YKCP,firkm$364X59>\LP`PmM]RH=F#XJ4VP#mr!GETasWMXHudJ%=0*:A'l>b/97Sdo]k)s49VTr$e`ND-=VB^1B&gSm;QL`fj&`l1)66*IXmPUm_5%sN,N1e;.a;X%R'_l(W^;])dk8LU@+("bM:tT/%-IHK:B[*XaCSjF<hETI[iY^'VgkY8&$V\MG]Ff?"!D,*$N_JlL\TFWdFZtTp%elr+I>Tte6B<*C1[;cO)*QKZd/llq>#+4/hip;9%IVaa%."ESg!7T@R-HTp]ngf3-=>F(=_jH!#),9%/[qlSPO[):O'i,r$7Q[IX_S7N$oK5PbksZ7KL=XCGd(!+&#i'\[2>.1#'QR`V%pClRdTTK_hmX<A9ll*QNV$_Nuhc4lSEY7tm9QJP@cOF8`W]?3;8@..f(b#Qm3.6c/R^Jk`dIISDlP,nnTl02drgJR9.,U;6\ucCC%ADC740Pr>:&)T1b86huM>s6$,O<#P@qKCifk#3>rqdGY)<fVLK3Q+OH$*/1D<fm\^ZHZqEGPCMQ00kJmJjHI@@n8"%]1h0Bc.j8[%^bLSUf[N4*Pig`u9ir[?5jDHoT4)LbS[24IBc<-hftF)^=0G>SP8&M_P&S;eX-&r(Qc-=kl*[Hff@gS/OZof9.6PPg9=#80g&hQn%m9fP+j\lQl,>PZSQ*CTp?06_oN!Msr/EPeP*?@hUN^Ep<]i+.fBQr!(59#G?/]$Opl[GH>/KHBi##7"S2@F<rNFgXP@9JSs=OOi5%bei@3aj@]%hhZ9P;K)<kIGQEA*o22_Bh76rQ#&6Y'%UHRD$JI"*Fk7L<r(=G.F)iH^VE01e<s'jU*niIR.U2RR^FCRmXSi;<JK=M%o"d.>K9r'a7pnFI4+eC>/u4]/[GiYAQunft&T.2LP5A2Re$DoL,RI$7;:j#iVP1FJl["^R!Kq9*b)kaKi;AD5X9)l`%hkd+KgSX_%P`nM9Z3l2U_BGEuXM!hGE<E/%d#4e/T!M1"$7f,EC\cbm<3dukI?e3'791k^<"^m-!Gg/fk"Ai(/ZAC)-k&cZQ4/MUqnU.(<40m:%/?2EToMgV"[UtW7fMn:TT<!kOL[%>=8jjRe)%PMLfe&RbZcYD24\U1=.c6U-L_Hh781N.L-P!!ff2+uBcQgM;gpbEX*]SpN/7LA:%Cd(MnqI;7pcfsiZmDpJQAPVa!e`ntlH%KsBdd+l>IgN6'<$,*7aH&7Fn,c&R&PT4:@*ea+9Xa4/W)4O7;KCt@BV$M^9[Y]!ES)>+%']anD>I9<%6C/taq"7#HU6u3:).o^)BhB+Pr=bn=H+LkiO)9lq)a<2S*Mt6>,e#9Sre]a*Oj:To!i`:lf:+b2BB2/,ZSEHG=*40L%7l)DN':kGoWBK$:4lH>:W[)'P,4bSkLP2Xu'e`4T!g-Yc/M)D?R,4Z#>4GH_neQ,>b&UE0+Y`T$C5M?V0T!2hodoJRc#0Xm`RBRk%@AlMj[<]S>\]Uf=TFbR0bH"OEFmXXXb(G\N+rlr9&uKbL2(cY\0]XF7Uf-K\2ImAU,`!r4>]-Z4r)CNJ%WOu!1IW^2Eb7r<\B.!1%(H6jq?n+U*r5=CnWFfYaLKU!DdQ9Yd*MWG$c;Z+O[&#b)-kMH#!OKB$(dA*`dZ*K)cAQFJU5-igq0OV!U$2("o,5^QTd.YlTH/U1%n`/,O=Wir_jKcN5&eYI]Xa90P5N."Uo9Wc$On=2F=l4im:E[$TkPo"o\61UDiX'":B35NtEi<A1dElhi_!Z*F53@"-hWH(.qE6iV%Z7k,07BFuQ4"uMLC0m*jb#Fl0'_\0&>&^jN8!BD\qp/[t/]%7sCD#"gqMTn7U?4]Y.R\0q\tn^Pe/h<B\6.SL-@o=#'^h<G3FIr5%@@Y)SRYW,uZ/VIk`XZ3JN-cqg8Q/d@PYkt7)Q34q/PV^c,%-]sQ(Y'Oo-o+M-=KX=%uj`g<';&ZII=US/5,0Ll]so7Y+,ma2U1lf%A?I\T'iNQpj.m0q[`[R0O`gVNf;bfD]DMJq"Q=&9g*Nq=6qLBQ90O:PW`F?;(C\V%Fk)rNW5b'O)YK@JJLn=2Shc)Z)N2%'Cel(9%/>>"(bH_J*Z"n]fdojpBS/NKhktC4tZ5+b5>U-PE[@PEa@,Z'Uab8&UR/ZBMO^]<ZbSpG#GnOfYf(6!3@hQg-Z;6uLV11BK'cgI<%Qt9USU7#@oOa/NC-#Zeg,kLkDoT(`M]TV)BBJOdB?>2s4G.:tb8EQ2b^E1NT256%kSs3<u?0oYFIe,!j:5pqSW$cXf`X-6Sf<;r7%NF3N@rI3d^8/kd7oh2jER"\[734nbebQ=KYQ#`PW_@&Je(5H)r".,:m2'LS=q?KD#8_RmTQ(r]mA0CCn@$cODWB)(G'cQDUE$fS-%e0;U'$.rU#V+(KqI&h:[Y*bLj'4!^SHopAfs,Bu,A[B>,)EPkTFUe9K*Yo45nV@?I;nSh`l;hAeLl6G;=>sh<dJ]iY;Dk[n-u"^;%k%HtrOf2'`"O(VRd`1bW&"hg*8G>)hjG@BX"?u0f_c)Yk-hVs"+J[4johHn>_`eqQ9.>!u(<$Sj<DNOrV/RlQ=Fua/[hD2=;f\Ae%B(YgP95AR'T"%@'`\NuFM=,#s`G8A"OunE"O%K-m22b`aL<9$/h@dFgplbC4Xo^;8>d"('>u45#U*UeKmcR>F?Lj@&/^o;SX--.M%ScJ=$d\VWOj3H&_j#@<;c<adL->')eMR':CF\TTT">?.Phnn7;G)JidF5GSs\FEjSc_EkD1nI@mINR%oBO+21"gr-+>d0c0.V2jU%KXru2Ju;LjION0M^f:$Wo;Mt;]MeI//u'JdBpW3ONU">-Xf##%`=IEe/?HE:?,;]=[9PSVPSC`!lfC'cFU"Zq&9CN?')u*eFB5!K%0o](1\%%AeP.6+>4_mSPQBl$e%t6]X)R=+kbL@^h/tI^sQ!e&:C;"t9!gm6:/qkE4A*2Im3NK9&Ch-D\TkalaZVFMoV;k?>]Gu4H%N+mcQ4)-\kUU4Ec@J`?gH*XHilg.ks[htdXlZ`T'mUf$dfC<0-d@T\d,HS\8V^k:s_9J$K'(5p\^,D?nb5H7ea2Cs;'8\d&J!cJs%,WN%""JipRGm0h+B6deqfSIjpQ<V7;niiruc8$>>g'9(6SaB+N1_N]G37.f4^4H`?'SBhbK8&PF,oji:V7?G0mW$`(o36%U.HnX)%("W-VmWjm#hWt%ie`W"8>_6ZPPq\!=@++>hc^O.,^>]j00!EM?9V/n7_j#6s)>gRS7pX93=FoY78*-=%0[2K&,AmC-:0_lpH#[61%pc_(#pAuPH4paR>KEG,%MO&d^"4l'u2XI`e$C\aukjgLP"6cVSJ:7-;(?NU4`3T?e^nfPZ:#LUUQq6ROh4aH:4@rR@XM1kAOpmre%@(?RM9U^=^nT,UQf%96IlY)];BeS_hfX\XcKurPHA@K;:=*HY7ZBns.l=bR6F7N^:^LJ6fL)_du%SDXKGKG&o>EY:?iYN^hC(8^7%a883)J?D0%G#+qA_8NF:<fAm;^f2$@bemnk=E@5`1`i(rVFg=+o$10'97S?R9nN"'\gVOF'rY9!7t)PIeU`rgpKOCsLe^6-mF]ek%M`T46q(j_IIU2L7$=[kFod61[]PRENV>4&*TV"'f<nn+ZVA0OPornG#-j0-D]*?`S,_hY_GoA6V5g>kM@,9:W+E")1(<jodUHAte%0]aoD]sZqpH_c54:Kmfm%5_>sU*!u]+AJL\rpI",*5qD)JV.)D81N-bh/r[4OKR=I^aorEa)C':jjMM'g+oe2%<a98&cTYAD(EJ$%C#8t)%mF%4LuoYnNPCd,#.%H/No32qoJ:GhC)"[(.VQ72H()nj)X-p`=USj5d=.k5^bkM<M:9?f6SOuD9s?5\dr[)%@:,d0K%\@%%9%sZe7H'0BM36QP*>l-ITmtnk+Y\hoOo+n&=tlEjHM,>Q5%i8&juYO*!OIW_^U&8Y%<NNc<a3CN[f1B"JKu19dm%HcQAgq:4,?>c%W#XLT!OHXDc0?eqX'\9T#iOet!EfOs,r&bErLt1mq'S7k9qW1)F>AG:1[`kt\AUI*8&p&l?l,(hai<kB>T?p)JtcpJ/G%9*/0">]%!"<I:-#1,jj+1>kNa:lr'JQ"UN5=\taXp(BN]>h$4YVdIQ/<uj0[%I-]#EgF>#J=G0lG&:P%kub2.r1>enFpR)hkS4MeX4ZaU)GR%/=q"K_5nNP,L*Zf</We;@-rpH^2)!':H_@%CrX43=*E+8aZ'm-JlqI*bIAp0<fFrT0RY"dC8,10obpM]EMu680(b;p$"HjVgWcgt%@E#`'5KrGr4uH2/C"[g\UWK3[5f?hj9_)$nLi@]&Qjs9+6o`^#VV12.[@Uq>V"*T+UKG(5l.If>3Qkp$4r#?Hk,IWR()+ZjpXJ#q%p7Z3&b.7+?VT#JZ:1n/qR#V?Se/qb?@\V<,ZOIW-LJC(.U@S2OU3*Vu`Wjnsd,'jR@oa9!rM^PcBcb]D\)XcHD4bR+G:^;6m:/Ep%P&H+n*s%P;oUKVLM1:!5MQV7VqUWU`?Se'KhkXi[jbq0S1F,][`iR]SV^.WZSe4h-;LN=!NTu9CWL`IFmn(#?$EInI<39^o9Z-W_%bM-O*^a/d]<h';"9`geb@P(nKXdWTHF_-?V@)q)LJ%)9ZhsIu1R@"('ff.)DfCq:.1<DiCl8$RXdK88,e5b$ia#"1Q^ql6WDQ9"I%7F=J]B`X-\)qa?iC3Vh5%3$#'-of8[g9g(5YdeO%1)%Me<sMEIjSF3JIrF!Ik\!%J#Y]#6Qff\e0^ims_m9SKbIgBfE4aHsk$@kq%oSi0LM2Z's>;UEoN5&WSn[)$(Mjt4CA=r+WWR.sIk5bs:\'@'dH2ju:1A"reI;<`qdbeP>PkKfC$[\l2T$6/Ep)26b-IFbf+8[d:%kojeaB9#0;,Yjdr#jpRDPY.df)c*]i[kj%7nprY30VjDl\-uf#2'UColpF%6lnTa'>o(GmK6DZa0>Nge<E#icb#aYT)eL3qX$s;e%`.V\#1miL@r_Y&Y1aH'NVtGgJ'aW:MZ5f80IE@;VmKM_n8QNjaa$ltoi8$_jq<kI<d._.)K@$ID`3QQWo"N(bO7L"5T1')Pj7g*_%!k"@\?dsnR)KT;^"W#>Zqi%Ed!iECU*D4AL$[E&Z!\NU(N(Ga!Z:N6K[R^>E6An%?n@U%ba%4Of>;-N$P;$HqO;6fK+a^4?QlR)3%BK%i#=Yc#iG`;AW8IA%#d'K2X`G%o`I6VF_0KV)oUn/S0VP!rc`N]Cd7CT:9VS0+P'#kS7VBLKCT.s-hfSO&W0i`@:U*!#B8]`K<%4HYR:j+oG4mrS29)#q##a"/'_j.5:W/7^$N/<aJnpnAQPB@O*WGRBb*%8l!F//X.dk,=^<+=5:L:9t")/e6$'*/j?//o_5-o,/&_%\Mt(31L@n.,,AQ+(hAjq[5^mY2eG'Dk%pGf&#Q"YnQ)d+O#\+nm_(DeYrK6Pa\7YkRL+PBjB$-HifL0aXV"75JV]bT3<EShMh>^!%+(T@c":/8?!OGlJiWUXSWEG1:n??$3'[1$+m+nj0bT`Qn)!B_jX;3/jL"@/HGFC3"k'lE?f4o<c$OL^1Vq%d".;&gj=I]S]GW?AG%dt9ph5E[@f*&"]Z"ogcK+IB?ZV<)-J>qcGrA,jtpj9?kSGq?C7aD,]oZ+W/kQDq?_dW(:0%<.P@DgNH[0V&GHn_Nkdf4&_uUQ>Ab%Vra\<Xi[FWR;49T"S[b)al/L'JI>1fjE-[h5i22kS$N'nmXSFl:+A7f;kP;*ji$perfC0C>+DHcfCq;);(6^$D&P+q2ihtY*i=^i%1nIj(?n-=J.sUX?V'YD+Ul-Wd2<?B9Jg3=N4-/*W[,UqRIuF9iM!j/n<A9sNPiFNcBoT#8WZLb;K1RSRlCJ,NNEJdDr0g0lF=Ls?%[^-A%abZPYDooUOQAVI0pqlUtA44aN/-%+pB**p$G=dD^:cL[#rXq)R)YY%nBOa(;W1Z2j%&>[FKiZN[>Ve.0'P,*L>*%]6iAT^*%^c3!^g*Z/P:!&3k$p52fbfGT<6@Qbt/Cpauq:RWe2'X?GJ\sPc>^\"scJE.OK1WFc.(;,:l,Zg5h34/@F=<*rTCa7n:'K24P9Qb`%Pidm$rXM3W(::JHpKqMtXr/*SE<_TVA2X_6K#Z/LDeo6-dI@+?'qu^9]+TJ,%aU)mW5c&R=cb?!>gV-Qq*([!>Knu^h\/[-#[ktA%SlQF<0>l!_+BBWONKBc_,UoTNS]RbR@AQ*teguAo/8.*,ag2pM(,X=Bc1a4IO$QEqV!X=IgG'Id>qhfW)?jitn!__g_Jc*B0bs48%8("',96>+I?^_..rs?(OP1LoD9Nth_VL\\85>MUs1Rp!0Jo$IF"?cpbB+mfo650.FI$dS\1o0*`,thK;dA2j/bnE5uWF2E<JB<7T%AmUc@jFn89PT'gWA/7$XcV6E-14^@3kAI%@roOcVR:AJpjNnT(o;.fLRl-Qbjf0*\ds(c9<](b%^Yj01]mQH%+kk.5r5I]CfH,DD%-BULJf?OOYGN%le=2*GFjf.ERh<cL_YNa)QEYI7QI6@49[5=9a<YM[WqO:mLn<39F%o[SE[p>M5;JuY!R8re1WY0SCNR0LUO4@@$%T?RjWJnMRU7fG\)J%E*_+C<Q,Bh'$-=%$:+947'CftJNO>Eg[m\ZB0`S)qT=<7,lWS)qcl5k6QbXOc4;@)"9S9_hpMI&LbPcHNQt%Oq8`T5#^X[Uk0p;Q>(P9C*)25q4-)J8:u3rPXYNKKEMB?(#&)Ge3V`Il@I%F*fC;==SC%279`\(]"^AS@pqYt$ifeUUUR4"k"4u-%`)r^37E]T9BQ._5HHL]*QS(=!J+Rt>Dg;[L(7k^D,=/Zua8!F#hRE6NjLFW)"lK(DHU8i0@X>UuVPcM$UbEQ.J;IdZJcuuW5V+j7%J6aq-.*Hr2\Y!q<ot=!N&EaQ,J\,RXIdc'[m],QP;g%@dRfPR\EgE<J3PkfnS)g!'n!'G:k$8G/O8[as.c$&\-Z8Bq94oqYcL?jZ%&=Cl@Pe)DNQ%J7nN<:5GY\8MAD^GV#7tjjgWK&!NbijUm<mBZP$B<,+;\U@MX>ZgcC2FBo8bM'V85"@Uh](BJ.=C3p;)N+*Qi,R-%cj5#".U4Z$Q:f]Ne"_mKG!j]u/sCJDVHPj[e[CU!j"qROp('IDjbe5-%Y80J<(658%j7c4e+M\RNll'ZPD=lm35LjDQakD`Z\qqb%U=(%HQ+.[6b')78^iV?ECt@l4SOXu6jo,E;=\QqV*=`91T7B1Qm)eZ+M%CRlUljeW:G@Vf9'Yf2KupW8kYg\fY[V:<P-UW?JA="P%7tQ%ghH9uI<$&/a&Xh-A'BSi!W;oM_d$.3XibXl:H[RYlatsT[a@tnFAI@@j;3usaS<`-IOl!oOE`hr/J>GMpNiIs`,D+%)]7P:Y%F^j33BRU_o(nIF4aRrqUXl:$ua.+#]<h38)kS(GOgVWGmb7e%0jPrX5)1Ili;bc]NE,T6,%]\!sa3A2Y+OT)"K:;G!RTq2(J]ToC%[QSPAAR(*Lg6[$Ind%TTCZTGB!tM4K.V"6mb#q*T4=Uk8c9Z0(,WA_]i6SAScXAf^-2Q.jp6p,p]YgQm9!\n+UgpT/A%7*N*6@Fs%Nu*7%SWp/0Yr-kL84Jr'6-l]QXXMDV9WE$u<nAT-'l#ar`;@VajbuT*Nh/*`?2a`RX@#XHCuk\f&`I846\lt#Pt8NJP>_lAV4E`H%:dt&XoP-5sbXWK_J'2li'u4l_;c2hYB"S@k($Tqf\PJEiA8SaSnuYtM4m0KlQD>*=hD`b!R/6$D<"%tQH+HWIG4$]1LXVs(5Ol\#%!(\D-]8pnTSmgH;",2!^3NZ[dah@VVNEIH)MQ!X@C\9liYNDcI0WHB;b/E_0.orY6Nid41(+IXDVtS2d9"f.29&/'b(X9`:0WXr-%F.[6@A#\,-MP:;#ofepmn%-XkUbjjV^;ru=-8Jo8BV-]:9"<D0C8LQE3h7L/7]c5G2ld+5-].TRR6PU@&uLEjOiAs/7oJp"[[iO<%-"ED%ARu&K,,#T\I,KNHlh&oremMPIX/ridl^nfnVgQC:OJ3g#L1E'<[7V,*C,I:TbUS*1fUcS0RHZ#ge2(\TUh?j-p+1`);b7[,%mfVd^Ei0"Y!:-Ru7(jW\R,s$%&(BQe`E(AeAX'r`$c+AS9S^N\GS//GX5lLc*QU"S7*HE>"1&-2'H]dPAnb_TD>MTOaKhgg+h(?i%`VhCq#;AfY;R8RX1J5NoDnQ3+bI:+=6jjFIZGm;GY[#DJIP+4D^5)Z>=mENc\^Y#QFD^n3%4:m\%8b]D8^WgApA6=4,.Hb,Y?B7Q%A=;Cp/Xb[C=,ZLrTXN$G6j]dV"4Z%$8MVY'bY#">f+sha239A)gS-W7<ad:c@s.m?'j$6n:Og?>JJQL=#-s=?r3iXKfj0tbdm*/T%4t<lr*!&b[Q8#3^SQnA]ZgR(?4=Jj@SNQ?,F<Cs[_N/Z)(sM.2.$<j&CJHpe)QS3$Aug+AdEl:0@!m(<NQpVX3)B_YJ8C[!0\K11%<gb,.8!o)m>:[P:;4S,'&I3`ad2ji2TMI$0:.d$;rLB-pS^K<.(+"rL$^g=4maGNiC@eK6Z^r:?rIg*l)B5&C5;b(G*GlIeb^-p@%,-;5"eP?r_MB-*]ZCLDXoE(3h.$tn^_/@H1S>,Ys97Vj)GtNg+e90WRRM"I0bNoDD1Vk8R"K%TaCqCD7^m#qjki+W$TLspKGL+Mk%-GotP=u_o+Q-;S=;3M?.X@I_/7$o-r\Af&Tr!(.hHn[7r04M:Fr;l8)*FDFUV@e?(bP'H5N2_.0_\gp/0Zc.De@9.Z4dI`aV8,uj%3"VJ;O`rN#Kq;o[Q]+LY%dP`),\'_4Q$i0B;a8*4<K?pW&n*a6&%r",js*'&R-6>'rM&ZnhisOJ?okDDcT.dB0F=Q7f?+jdaY:p:%Kj"MqCaV@.iT_kRaocn@B$J6H%h#A.f8)1<O<c*Ji,'r.R']kioGoI"^^/ZBE;!/t"k.Kj:uG%)e?Dt)&*G5h50_qhYU@MJF<d.U%-oG,\eJ#11MWK$se\H"0mSo@/W=+N,-Q7K@QOYh-S<f,(/86!P@@(lQk"Q;hB47.EXA!mrQ9alDnqf)hq,7UZ=]ba9;=R#?$FAD)%:)a60$^Tt*)j2-+q7Q0u7$oj32imR;5V/FaoGrS;IW!Q%g!_?j8qGMcXHs._1Q$rGV-g'\3ZW1ZCh?7V4hX$0.4p86-3SqRoW%N)%HORV,/0MfV]hW&qa%BJoaHEF90OI-M(Ln*9KEi)48MF/UFjsOjZSpPX7%IhZBR\>BHrd"u0qQCa?4VfkKKkNsDODP+H`9'TFE-F^%L,EgjKQ87L9Z@$Qm?>Q.=IgYJ9oFuJP95=b&=tSCqK,/20G+@[AlttF"JaJbTaZ!'N)V6nI)C*&^CtG;2i+;Lp;0eH]JK`6L-^)a%nh%m7%YMk^>T/*AZs`G6&/FoP9N.W;2-h,(N]Skm7BR4rY(<A@W*<SO%@?5Dgh/<><hnXa0Z7F+<in2(a)FUId*@6%1$]WF6HBt,%Qrn3=ln"b:^a-L7C#"X8m>QcWabJOQS1,L6W@uB)q3<[u6lgh<Rc_R`\ON?uqc8??B>grEI.ZYnHoAS@8-tX/6!t>='J#jn,gQH@%iGm0KR$KE$QF-48aYgk+#`WA8<)A@DW+IiI4G+u[+#_neUpHbBLTri!es%=m`u.EJh^e:"%EUDf>Y9e(4<q+*&h6Ho0Y%Ct$VB2K%'b0*#E,Ia=@<)fr(XaB^cNl+cr5o#T.D7s%.Vd#5&R_o%qAQPC.KGYa&`qp!s1p>Nl<;H+!u'j`(4u$-^a.O3p4Hcmc1@fFq9g+O%ge5#fao01Q99_iX&Yhr/@&!M7HcXlg.KE#77Ik5%EXcP&6S/::M4ZQsRFU?9d&"$hIdF9aZJ%PR4+]7\iKl%+/W`qp8V`o1>DHRN%3_bX85,p1?Q?;=Q,:J##4nfjg67o!A2%nH,[O17mA*(6cetiP>LE4APj`.dFYP><86dtQX&*3JgSJIe#Ro_d84_OS:G)$Hm*5SHi%SkUsS8335344j%+ZL=MqN-sr39i+!3^"6gN*9on5gWtNRWQ+)0*'9Ms1*rig\Z`pE:n>'j3DC?P1:5PVbbbK+'!lo_l8t_<WQ)[?%*CPM=$%50.e;UreYKRS)7^i_KF\;c^:'/#.C&iFf\%1rmLlATcS+j;K$.6i=c"FFMJ6g^\S=D+^FE@%V;q%X2`U5@kA*%pj^'/q?%j'Kf[\`(SN\;>7*HCNHsCX[>nZqZNuDYsR"'XQL.^"T[2&d)ikZ8'`jY8!uFH"Uo9S6&h7Wi?TY?&`7KZ;nXqp>"3GQ>I$<Dt_Lp%;P;4Hc(c33Vl#"dmX\]LmV4gU7p@8d-j<RgF'3O<Mn6Cngp%':3;5<iX5OmWh:p0M46ekh'\05G^7pJJQ$SoKft5WB9Iq0HOIfe^%,W03-q\o@,hA*u3LP%n(Z-Mj>V!)SfU7R\U@Q8ajYGNB)OeIQM]R)>0F4PIpp1)7nAIKoG#$B#7;pon?$QW:D2<J0kDGVCtA]\R=%9j0J&>u-`/EeK(LVP`YUW<)&NN\7oc4i?TJd:[4$^=DXj#?/O`V&<r4k_N;9gRUQ`GWHllV%WhLjQ(U1/d%<7-^]S>N(NL6de'1p%c027hh4d4A-I#2r@+[>EC,!G-7U?*h";3Ej4\6R92F)B;?D!MB1EQA!K]=Vk*^'1f58R<Q3I'_R_/(U*/TJK5?rIFm</mqBWj+(@%Ej2tnSAs%nXr0/.eF0?J'9ZT9a-s$N%7`%>!cLd2]L4`B<]5\J-4X4F*<D>bOmMRCT+mW`&?7<(L[`1GRQGHZ"H7%))WB:ZPB'/D%Sg`ta',=3j/V:ORPrGqf?$!Wu)GG1t"G\^ibQ;h6gemYVVt:WOd*WMiFfiLY=D6]::IPFc#!p57FVZ<0:[.EAqP_mk<DQ8nG@]82%Tl<%4^a/Z%M)XNT9@;6PF5`o5;_mAGn%g>SrMX!6GWL/$G]s;UFe4/fVOfeBU!+&5<dQ1]YCe[,J6M5Z+`W+5;[fa1)@K7+/fZ']%E`dG,*[*e8fqr/O[^l+Wc.'fsc7ThsN2X3`gJc.M0bs&OU#a380\be,d6_?+HfiPZ+2J](9et5iV8+orOu$5%h-d>+Q:lhRl\r-X%HLr'cj+7W*m5mm9Ze2-a2Bkdl[!*;**LhOpkt!L_H`2SAc"'(["(^/a9cIPBC@>eo\*(MYfejbO7U\tJ]F;t_`Mjtl--r7#k\">p%%+HN>blX)Ai'<euDICn>k28?8=fRaBjQ6elc'UTqL[OKL6[A#9e7gTWVndIcJq2S/lIS5n$u0R!0c*NTJ]%IMcMHmHlWi?3_b/+&%2>7n]joOEY,k@4"qj@'ck;l3Q#4,=Tgee3(+=-\V<RVuM6TN."\?F0VNNed/:VAU//hgFQ.?Jg1$^d<Q8tI:KX+Bg+J(qYN@$4kt%%FrEf0\KtL2!K1SFEj?k5WMFE*_a"CFk*#@$,)\R6I#GM8J=p)DUmtm&e?<0A@;'""j&YPoAfu4HqkWtO6S6_N#pO$N9cmH>tY^_%i=bla:D&F\V@:G44cs(s0pY9c0Qo.s0lhKI9p5@CP#d'MRibOH1Ne65X91PJ@sEaQ$3f;)V9c@L;9P62%N6cYgocs'eYsdIP)N2E%$A5;lYL9X:#JlYg<V)R3NTMH?GP?oQ]\)Ho**>fgcZC\(>0]8(F["!>l<pT8Jn\`+L!@4AAe=Y9/FA*h_K\jEpi79<#mb8JR&R/P%hE4&8mnCema5n"K<!T9)Pk\I$G6C[cYW1H\=,HJ#4Pe$*Il==5HX<K8/lad.9-!aB2FfrV\E>JB*g7`gC@(#TjOqqf"XRB$Gc@$#%d<<%_/tAL^M5f75i]1X[\-BVeo6,\LjjRErneJY4UjEqK@=%IAAj4p:c]#jA>U`LABV9!(KpjnGD++b^Zh1T-;eaEj0b=8gP-7d)%Z&Fd0BQsco<aCI?dV;Qm![Df`ZVr.TA"(63ST<n[AO[lrP>j12]r,'/Rcf8A'1_B<>\cEM1:&YQ[6^"_@[9%Ee+mf7GVD_IC3,jf%!i@&bC)En9'V["25Isam`\MVb&pki.$-5.p7c<(4dabIE#8XJsPQn*h,Ng[Z=!&D?.d`uEArO=.U$I`ob%XFMYd")'k+4.`5h;fa%,bn+M7P%\#*ph<dmpdQY1[:Y\A!,7h4;[Z`CSXuA,]QnYLl6iKSI0F&eB=Ss;cD7+;%ES)mENs0lE1O)f10m'O=NNMYo,,kYfhMI%A'mQCW2dR,Hc@q<T$$Lo$$)jKa?SPgS!?U[*g;(?l5q,]683#Z;sAV^C;]1Q,P,'D1(36!)jtmN'$Q60)@pm'-?W3\gK!=HNYWp=%-M=sJD4,;,_Fg=@=<p@?S[m@7ZD`)Gh1;mX;aAUs3Sq4X2/R3:hY\C,1dN!nHsStgkuQsB96W,n4mljP2=5<&&q$#@0HC/SF<gCU%=9e,3,P*;q[WUA+k>[_hJ`Tc]?f(0";nc5,Q[@Je<"%]S)jrYV!UOnQF/u0LYi/(6n6<[LO1V(;G0$N^_+I^!cM:$S<=bcVKdmKX%V+\sV.7(.I\s)uT*40N3QmshT%&IHI9QHD_(8j\&/lb.*DtNFb*sAIl<GC3Z=TZbY3p"Q66c'Yh!;/'RX'4PM7/AN98=,;^OT(A/%C1R*?CUWN+11jTrMMiq-7Yh^OXV\"p3q-FWKRr*/hYDNSlAq0Ydm:])G=,?0X^)D`INVa:4WMZbLa.)HO6WF0BD&L3Q?im70182+%<5!1[[upnA\*Vs!0PNb',le/`D<h+sC!6QNNhD9D/A\i"B`aLYYNL(3q2l#3[+E,>H9n5g/PTUkBIPRa^&O[Jm+H+p(mr$4>QD5j%0A%"S9g0)3Z5HS_/hptAVH0/$WfX@"7$eK;@HQb1Q7<R2b,*W7fk>B)`dRoa$*4bO<lD67,?TsJ?rAh689('<%]5d(h]d`@eY3G!%Wl1EO-s^4X2,7eY<q@jG=<>Ab/<KX9YX(Sq"g^LG!g%!b\4Ko;/5J>1;s,;LPj+;r@%+)+f%i3k>#^%rYh[f/#F"p-7$m/S#[eQ&%Gd^J)IkV<WK/f'?/uqDU(kPJN8\q5%.(7]jV6ZWMJ=MfQ-(%/?6/m/n&6glLrioT'8:&XUs5ZQUVBd6'U&FJHZPd."[B:QF@.B.a%A\0dM9gafkkuN6;Wc.9[/)+Mj3P&EXR_WAs3=uLnM#h"XaK47"o6=a>4mi;DU5gT(3cdO$Uu7&8HBK_8EPcf2T6N_MD(nO;p9cAY%"/]3HII0Lc7E1-bKhD6-4jYLeqgsQ,[gbo&&V9]1h>OWu@P8M%0dZZXith)af89*N@!pUEM_0P>lQUd"4d[dn`TCAI8KIN8I[U'R%2Jc[iM6elB*Hl-B5(R$Y\Bdl:>G<>o9AV$]!L#,#&n:Qtk`9ir]:(kQX/9`-NsM[-aW1$-PB-kil0)lDnWoip%Wren`=uaFYR-j<%X<,RrVKp_j=iL)AV_rdOY-oL=oX`On'EWo$(O&kECp;5tZ;=WOeI87ufqkaI6k,N(0js7.?1`fTl2!4$=:M./03AMG@+n@]#m4OX%>32t]')O;?h9i4,Gk_]/ateCGHie!s!(@H0SX0Yc@%k,^M*BC\];fLO&igYLqXp$lVBO-M@kmg)85T,gG)C%@]Onn<nokM??$%a^%S:Zm#eK$a%$`"RB<Z^1H4RfL(kKrX)df'<k3#41S#(g-P$bLB-F>n=KSN7U_HqItBpCdlaR+O`5W[rZP'3)QQo8Y1HTME8Ujhj!<%V#+7C;)VdMHZ4<(KRa+N8Np0]1J\i]np=Zb`PYe6a^9tWUJ8NL*5pj^9PuP@k^c/mEN/isRG&MT?Fp/YQWC\!!@?6.BUbjYFBobJ%#F=62V&%L[CPPMM_O)a3?!=l6ZO5:[V&`p/!DY\H2INKbJ16b;[5cEp>a/'A*5F*V#UFGu%#sR^9D"'R#ufkGfMFLh#3tge&kHU?%D#3&oVAmLaS`Wg%C8dXL_5:uO?ton]/=uO-*Y2*NPP,mH[#+u%[9K@G9\air@:%]O*:gs$1m^GCQ5/)gC:da!jqO%(.ZhBHYKb^,%pL.(0?DhjS;G[HOHQ#G',P[.^Lm.oaE;02Y#rs,f*!$t\]msg5(KfgS/J[I0h9M`B0'Q!L]6W>L+cHn%UlEuSg'r[gN=;]6[BN%1%pZ^KeCug=(-RjaPOpt)TEIGlk41QmeVE8cZb*$-GhG'`OIdD9'f_T1I8-5!8R%Ah0!,!ZD\b)2>.'[4,lN?`A/1/>'ccE&-5F)l`%PDqDrd>`IWcAmEh7Mj_AC>k=4e)g7e*Z-RCla4Z:B*+9U(i(kZc_X7;QZfZH5`u]]gE0_`=0jLPg0'GP]=J.4Cr]t2TZu\Z.%!IN%p3G1KLoM@RH([371>RMI/F7taDi@7WXM5X7@*0:7R]W9R]I[@n708=7hFgJtR)Ur(8:/_+Eeus)_50%Dmg:@dr+\_k"E^K5T#0!I%dGGW@0JR*")3S5?A\nB<)O@TQ-A;U</)`*S?4e`R0ea?WqK%mW"dldP=OeCsUfN*[(hleL]</-\8TWYs5cJ9kq<4VQ4\cM]7CPHI%b;@3Gmc,<1O>>s(0YehN?N9]kJM*K'V_gp^P?7-67@0(NUhA)#/$=JT.@]!>J%D9\-LIVS!kImoL4u;3dN#$b'6gQW@ntfP.190n%BBa'PP=NX.G)GY.,Z)W-?e.joa-_P03]mLcR?qs;R">,i,M8B.(B#KR+b=f1"4RG]$SA>t&Ih:%kR"%),#Io=_5+ou`G`jk;k$b,%cC6E!;BY56NPqhaEHfG0A]68D$Tfucg$1Gh@+_<SP97"k?(t]FA6pLTL)gNU2C>?QM$L]\T'./;kZMf)!g@]id(Q<+q@i86?3BhY%M&tBs=egqlCrd`)\ePiOT"[SHbA$Q>HWc+hG]$1mktZbD>n\n2]Q9"+K1Rf#T*]Y!fa'o:4mOjtD!?WMD?F"%jV9kT#ELJ>ib<U-%`&X\X;-`H[5nkTD\IL"<7"FquKX'h_k+i\),AFOKN)>#oS@X2FJ'Ve2lCB2*d^WFuV^Gr5SHH)$g4AL]fK#Oagrnr&;hk^AiuHT7%qPlU3iLF8HLcY6Qmq6[O[Bk?."%^kXVsTG:Ie#HO/)58.H9If2bZ:3^U-@l2C%ubI_Om#+UW<aM3_0%eM$`\Z$.HscRUusTl[EZH%66MF!SIV`'<1Qm2(WY*d"B.6s5PDHp0KT<T`1+<P`*=S)A*eTk+\ub`SLT%#a-'GI]t_SWh;'tsEXZg0@`sDG0K6<5SpLR:^::Vk%Fs)b<i1[Q$QS9&>4@<?)c>#Hb__sgj(Bmh[(u+=Uh?+F&TrmUq!Kpr+l`a>.fX,.%DZL\/BpU\V@,_;GNdcRCDDF)h8oH]fj<6OY%>l;"A3.X=u>`I[TG/ggtBKF#nL80RXAq0:1A]FdOfkHI*0P]?96H5B46dm%-Zi6O96_cK-TT&.dNhL/nM'",fiFLb(RUra#Oi9%3%l*`RYSl+-VXI>[G75oW4E3K\m'oNL)CV+IV[lB,>9"^eeN"Td@,e->M9V.q@]Aj/j&o:r!c@GHW0X-Cg6g8Dhot$86-oS_m/$`Q_%VLjLa$`:ID9gVW#OF0F5j*H)5QrFO2%QF9;.C<m?4*$LQdI_>:H9]$jrJYT0r@K]P*B'd0--`M.nF`[u*3-sVS-/T5%6@S]SRd@T%^^[1`42@MKf0QIroC)U9gP;s:3RRGV^nc,*mOdQ/VA0>:7[3Kga4(:oZ(C0`&I")[i"DsKA_YsfmCgO`P3q.a7;5G!LL?hKJB@(6%V?iX*Z&#c0HY8VBQq)]b'6NC<9Fo,(Y>li9_&+]!Dfl(!9N$YW44?m>Cjl'n#uru(d+-YtaP2="W\DaP5m,4o\uEK2)grJ*A!m^Z%kU#;e@]TeqpI!=ZC[AjM8Sa5e0>'L*m;uDGR.iNj2[a&FH%/JoeI`J8<)V_WWRSf:MC^/kY9c!310kA@,Kmm8^W/Eg7'W-sYZ3Mp%bkla'IOCNW2pn5M05JP)J;"BF2"_f'9*F@Oe%0:@+%83lgY;UFLF1ZKbBbm@JJ^JsT'RAgaH8BGG]!(Drb?rCm[h)GgLjrR=ZVSY%eDuD4$fqH6)k<^eM'HEbi)n+^`gG0#ASbSqj9:a+,DJ6BCLH#k1@f'`-Y^UJ*@HW!.)=kgn0=@9$RYb+]?,0_[A&<-hSTrA,QW`p%X7ROpgYiS"q3FO`Jr*^_F<8aPLgV^hFlo2'DiUVldf^m7>J)3+gX]7)j);L,aINCSbU>SE<IpT$&I"js?Is9W7fc/.)0#_K<!4[#%-6%$e7u\_lP1i'!2o;>W5e\?*EE<6i&G\0BY::6f<FOcbK$%KDa:S&Fc4Xh5R)al8dfl`&&i_H@80"%`C4T8.+:*rU(F]9N,$6W4%"A5eu9A*NhUHkC>#bA;s"A6S6=,39\VM%cI-^[r:0T76mI\r)1',d`ai9]_43W^ScCYL.3eND,%.@^a0-06hE2!585eq)m)FOcq[%SC=\6+9`JTL%AAL[fjk;EcT@?(FZ[BcA">8$^<+&@&]GQJZ%TPI4Ce_5g^6)dO(e?;#0`9)R=aY5a;j?FItb]#Sb=[MhHDa!]>4e%Uqi,-G^7^s3JKM8JKfmApJ=nACbkQ*3SOkP;q$R#TeOlGajD)G<#6rii7^jf[bGZ(8e/8@0KBF%A]G!4f<*BD.hjD@6.RU+(kL+i%ll'l=e!<6Z%MdJoh<+24mh;^Z;ZQs]3_i7>4\pXWN+AqT`52\8S5!F3\r0R]PU*56L7Thje:(#emra`C-u,t0)@MeHhC5^qB7i5e%S^l=4:qD#'VA%Da`/1E<DVgs=]EhO3DCpJW2D%?a);b`-@<*Sh"Z#pTT_o)nKUgd"b)qJ[iQ@WTH$HSF>WiZI<rthNnH=pi\Ell<%m;?K=JT<+,7FDr):kfnj9%Y*b7JmmIV:Aen8`l7LnCjN<!Da/;c"^<S\VGFope[X)<\T-Bf+KL(U65CuSgIaV@P0m1],%8H7]/^8%B"9k*R)Skq>K7+ef!]h/Jso,^i?S60-:l:KE1&MK>bE([WN:Rb<GV:[E3e<H/kit_hKS]6.Y/B"4H?mVCuKJl^u"2X/`"Oo39(TS%["UAqIDeskDBGX6k#qGMfq#JW6omr5F["Q8[:CAX_*s(Q]^=.\TjK"GZN@7VaHC^%6(g)$4/J!b'PKWtND_ja!j*.d;<9%3FBKoP%ih#Ij_KspZ>IhE_eP+\>Nk$l[MDAE#B_r<(DVWd(QGP108m]ldjqel:@Ci)&.so"-j3V6MHE]XpR7ecb@kuaY;,U<2AT9CGl?FJY%H/AEj3>jm5HEVNV8uPVDVA0pOe([49!OmI:]_Yd(KhXRa*dn`9;+LEQGHLHK\Pr,UO!Ck&M:CQHlC96K,,gCYa1bFQO9D<Ll%Q*n%Mhl,mNEL[s[f8Z>QHCW?*Y[,5p@)#ZR0"*ABcuS]mjkM(XCP?O@@KFfC-(PtZi%&'\,%XPe&E8*Rc,5>E7r3$K_gX-AF>6VgR4^2%hF)eg9JAokVUm_1FtpI*AY/j?Z(;ggS%QI#R@.7gak;c;Ag##Io(Kf'qI(K)@Ml/XQTDbsXR8eq>(oOi+5p[jDQec5#SKOf=m:A&%%qAtB(I-piH6eRaTMH:sTE`'&?@UjXl93#*\&OJ9X$BP2DH`CL2>>0<hc)MZF+7Hdd;C]W.kA;g!r[FdV&V-b@kV`c.2O<AF/utt%Miq3gGaSA*$X[>je\"IB[Hq.s4#iUs9['&/%Ta'"f'D3D(GASpk2s=_@^15MZo:!(%kJGD#BNi:^$A1[5%37eA]i]dppkOmFaXF?%rFX>,B>'&C;HGfnIZJ:0;0O(#D;EVd:k@#%laVd@TR=t&do9c(],c[('93.U@n*FU$G8OrDnqa1ou&'c4g:aDGbbH9>+_R$:ffp0%-:Z`.Z3#01)(a&\/daTjRWF5?>_5rY[I>oGCQq+nRL(kHLGOKG6mZ*^d#b`j&AuAZj3.M8J9!C)gqtlM8oAa,5uV"NOc(+$1FVGA%X\_/;B&_[7RU-4%Os:aC8%3f;6!3(i$n.L(j4a?h!p*qs3]^jAQrHDXBlIar';P25>`\2"qR&Qtf,mfuqYNm5l*rbQYJT@1`iZ\G%5g"D3qlE`f$VV=E:c,e"lf@+aaL&(f;0Zt@bda:+Qb0=g3)l3HLVE+`L5$&SC\97ATd^Isj1Hk-o;Ei0!?l@iq?2ir&dF]8G3C%O%/>mPmH@(bP>hMgi_"nB<7eNecP`H\l^#.k<4KT=WcNH(;A@dO7^ogh5V?*FLI[@T,,Mk"hp,[;cc-""'?CtA&B-b1<:Z$pgfO9"B%M5@ClI:eiXmn3k5SGPp()=*b>6pl/,f.H7XG4-sCAIp!9"S[FU<CqbSc7BONn1mOhBC;ofkrq[/gnL;?j^eu/&)C;09H'/1,@Vl+%0-fTI3o6JE'pm.RW?3e[EhC*']uqWc;5:m(b1pPZcc@U[\Xe=6"]gO2%hE#Q"j/+kL4:aNk'r1t;caH5HBbQ#ZD6Te;+Ith($<^A%A\TO%4``a%;[_'1nN;cNPHFoS3gi97UR)QH>#GEuXt2<nb/p0AO<SYpPr!T*h5-qlcmD\hjOf*+`B6aLqq@\p+l,"gD7(+RV^uLV%;&fi>)l$4U83KETqS)Z7U=)[[r(+*pef&Cb4Q,2pZ9ZB;H5/s:mF>Zjf(&a'4XOd`!,^*6KMg,QAsCcD$jSShO8MC<heZUNXg9/3%`*&CoPpB1BLnWNl4r[3`(4(]h$IhIAD2B$PGX\0nc1=!gY6(Omau4TlfaVQV'@iZNj%=\-c.VU`^@'_M+6Q\irHmT!Cq]0.%/cfP%E8)J\`o#7,"KDu^W&lKLUFUFYCsd#1jDPMARq9!2>S<7g[.2\Fg'SMb)FKn?T0Vdj8mHLX\1BTn,T'K>R3>)QgV2qZ77qu!ShJ[Z%9&=J7'MOU27::OW@,/"Q74CTe,5')']8iq:lHBB^%r3shp.9dZ7>uZA[c=eWJXTr&9?R/<JMnhh4'#%.VYiSEDJk7+=6+*#o+aAt%:S?o`Gf^M+?JmSQ$@hpCr_J(`>!""^FRL_KKu"e-%o8kJItt$uZS3E;LI`udBo&4_#k*g^kHZ'iZ,+Z#"^WA?AO&;XPj]WPGXWDB%qb$BnM*]Qj/C;E()XgbDT-r#]#a9^<J[TgiRA>gM-5+Q3:$]n.-A<]qM#(O!)cWM>BNR_tn/^chTiRcO;gpBjY!W;Qk5Ml$NJ9DD%=g"QCn^`A8HiGcBk"t+e)4FQuPWFSGEt\/o/p/L]S/%%?RIN(P^j"QE8nUM"B-s@c+HML,5.t#ugF\]fd<BB=+Ot7^@_HRl-EG3;%CN/.D5:d*i@cJFB=<Y!"&tOq0:b@n+?h<>gF7(R@S't0poU+jZ<t6Z8^HZV*Y/-BC4G8WM00.$9fd9n0\)[MA$B3u`B[8bUat+D;%<?**P2^YruTtu"W^/R-RYP[f$Ma]7Qo\Q7_C9.kZC[18,es4.,f:dlQ/.<QNTmUc:,GSf%ap7N5mX:WHb+[$s02Sb@J`'$9Fge]j%bb:bAroE,&3[t^_cu+TVr3>s\&hG&&$<g+\#B%'iMAPHi:u(V]m*U+\m:?c%bK6#*=UYU--A#m1%';<EA'(A(La^4%AiPI(>.i>%%2/X6/>(Q6"S6g8#U<5d"k,k62*/EuVh<!_p\t':FCB)Q&r`)%%fuX48l[:(Vi`:\Q49EuC8=uQ?d-JE4S]j5uM<hQ:KB1D!+W$V2%4-DtE`JI0fbfPNT`9D_(hiX*V?lnaWXSmK`%1n*]0]WVePlR32%QrJbnIs*+$'^4UaW\uH13g.J@&VttDQ$^Rm5Eqa/5RDM-DJ9G%(3*A/R;NHdaIRN:Ql?r>faP78T_ST],NV+&*&ncj-!,A=;Dtmsh9U=ad1M\m/Y;@C6)'iQP"XJ<6a'GqRHVo/YgY3/E1b#rFj[1:%Wu!e>"e%%u$TXg*Gm-h7qM&D1l=#E$6&I(4!.j\G\!3/!@Y7mCkpOAjeiqJ`YEtNh`u[#g:^3Hn<NgG/L4[+3X(L"uT]*o<)]D(:%SAS#-nf^VN?&@Ap]7SfVkM0Cino;;:/XgMB$e$f6X+7l0:luSO+T()upG6Y<msC+L'I_.L^P=?IPS#0JQOsBSE67$hod<$Z$maP#%D[87$dj4ZW9&kpl"FH=/"abO&?D'ckO=P_(`'_0f%+-["b/F*T@UsQJh=)c<p-kt#\1Yj%1+!DV)d,[oeA6%XS#.H--Gi^+cGJ*%%/b"_(ISQer%&Os97(GcpCpbUmO9rWcN_rU%lub[<G[SOBp*m_Y$9M%*lM3T3jX'EAp:L'L!eK3BppG-5F?Zt/R#cD9Uj4.:YK-Xl%D%7pe!FNn<X$AP&!^=$:Pm>8rh0YZe5Qt,;&U5$=%cDb"70\-jU&D:*+pKVqU=Oi,3>SPOb?G%8#u!>IOOq-H2<G2YTc7sQCd/bf%1kacHU\:^EOieru666pn`D9CJ&iRntJCld^Xt*W[=FBblYq($t#ndZc=hpS%TIN8Y[l3mmV_k11#.X,c!]\&:&lsrK_kb2F;Js+c%:3`LD(V#B1$mhVsiRZAS]Sr80bP-AK$C,'jV&6?@A.)Ag0&U$S8qa=Be;;"dl;uiijhqu_B!@;]TK-L=RAM7Kc*9m3klm*gCXT"t%AY[/HUQ,*#KV\h6P".ZPSMRY3"[3OMH]IB&(MHN:'kI&mU.^()iuJARM-W;l0VUgDk&:d!E&+>6/>6o^nu6qDm\dgXPGJS7b;<b;%_mJIFJdXV/*",_-WD?tVb%)0$8B4KN.]3e*\X.%<kF3&LWe7a:>F*7oJ7]l/;8VnRacg\R(KTL]"NZ5G5)!oFPH_c4D+rC_KXL_q%JuNP\f49-c$]O"*@(R&aWTWSh-"UZ`Y:-s=:TkWfL^A??Un7#p)jK'8?:5A7841deTNCh4=gOp<Y#eh'ic`lpXAs.J7<RmENd"54%1)Dc_^^NRF-uE4mb#t)PbuenVZ6G"J6;L+-5\o/Tk9DL"7HIeIVk.'>ME[3,*TN[q?WJl4^>5EQ;5Vm"qg)c"-C9:n'A4f+`cI0H%)#4680T.)0mB*c@,3/Ee9I\?BZ'l'ca;iPnZ,@']/m@3Nf"N+n!*TD(_1CWN5j>t.W+@d9,OR$Akjp:N;Qb&oa"#HIXnPhZKO8*k%-/S:n*U>71I\tZ&COt&[Ug;BlH)+OdjB//D!Nk(#8]($Ick;>,Kj0&U@bNcOY'[=gXM-*>Uus0\@]aC`Qj%g1>^[^B>:IJj*i:Co%oTg[7n[)/$KO'Z(3"bA&Fr_mi,g^Go9Z8uaUaZj,<P,lY#\H`O2!%b'9h7Xo1u557XUTXF"#QCn\7!@+RaK>KoJApo"DY#""mIan%=Z$"VMb^kkl\<Qp!*NIuI$`Uh]ua\1[>e=,QD-uD<Iis$,XM,UY)(Hu<B2N_)[!(5c<d0?BpBU9FW'jgoMD0IN@*=l*%BnTY&"&3%FU1pb5=6T-/J?bM7_\G?QuPK[WJ"._Y6.ta[]<tI'W?n[kQ7_E!a>1rjlWh_82?.5`_?/IZkah?rf1^n[HX>14Ej((a+YRr(`Z5h%#oZ.d9ZY>=TH;,XD6V_mj-3nQO,P]5NnX2DMeSMULTlSKhpj8*0QPlkl.$'Hi\"/CZG5/Fdlo"q9k7=Og1lk@"fa<_O[I$/"'V2'%m=muZ,.%E[=N+=(g2.@9'55?kf#"KnIRUR:d/;WqTJ_'r+0S1@]%UtnQ'L&UX7dU(AcO+,hErLnp:&,i_I:+6he^tP#`2&pCs2>(%>9qPl/C99en/99V$afgaWLr`#9Z9kfEpTY2JPo!)lTMXq0QlD""$>PM)R#`b4$'U6mk%?SLmL(.k:1FBiq;l@87C!<L@B^g&$?MC%PI]a_4j@9*o%Os0SQ<56gsRcl;;$#iUbc/B-Add6/PSma`U-Q;K+]CL=sD2]&J,@%3suqK+TPn,B&=u=#-C=OZ;R&2Kge3!XS+B"%er$$XJbjB5lmH5o.9al"TJU-9>)fk\"^:J^+mmCp1o,#bmg<8`]Dt3T\WYLRcOF'gPtnFA7N0iJ19I(e4>0lG%I3[u,sdi)jk*X1%k`4RN]l!A/"^52sW?h?Ih%<ePA7W+_":aUm;TcFiKKtHk5#Hn;BLPlq_(?%t7iRounED/0.'6DXekb+6A?Q#$@VIt<f3h%!!jlM&%,D!I(TERr1WaC$a.nV*]</p-td3.[Nc-&3BKbbS,M9Lg0`jfcP^As0l%O_W\K0JT%5.R@alNM/gSa?L%ik[+;X&1fTmd\N>)r5i2%?B&B"oIK2sQB=.Re39IJ3>YNP]E#Qdmbj@4XA]XNk#\.Ng8p^%Z#8(\l$!/e''Td_*](L%.u'Jfi%X;iN9iGiJWX,*\2QYCG$D0d%9GiG5d81mre-]m.%(\E"SpH5<ZS:^_)%[tmK%`>"W?.8s#_B$RiP?[QrHhFo5X2Zs9sqfZ#*BsKYErI&`U'o$bS9Au<2/Q&rLYB(%bU-'3\t,ZYXPV%a/C5$IUchmEU?0s2XML$08\7SWQkm_=;#rP[ooauRf%(RA?jo^9B4/k4@uB!_K"4MDQW2%^@Ad@kZ*DqNSC1DH%^>u1^QGHSD]h!*q1'2-[?Lf=4o`IhDnX:O#iY;c+$"AR7"K:3$h2EkHa^oU#l"eetUc8lD)R(<'crY=10?q%ejg``)+KuXY'hMZG%9JI.s?ZZ4P,.oF0[m.]`Gr,G=4edbbl>)tgQn%4/ad'csAU.IiO!i-IMAE=CU5,<IP[`<Gc'e\Y1TO#kh]%NLH.PXhj(J]NK1.=l%66[0h&h):#/VCJ)Po@l?"d;$_-2K*jQBlI'%hFDZj*D&1Y#\2Ak&bTUhuI//H^d8H`%2mlLF]?uqp*d9IG_`NbaT:HBTXpD44aZo%qG9p:Ypi[Ra_tktClW(?E?+[";/m@`D(Q1cWk6KR>Dqc/Kip6j$H6#;^+>h28BEC!ad%'1RA37'$C!*9FFVH>/(G"`>91F<+\7A*%Vb-UNMY/>30+f_7&nbZj;SC8Z7^]6-YE1lsLt5NjV5_fa\PbC`"/pS]M1rQZ4_*Cq&oReLJ_iA^(;_a/N6]r.rBoim[F!F0Gs?fl%+hUeIN6)Z76;g`lEuesQh-*`ueBP0pS%:C-:7-\?V*-T:%7Y7#XG0H#d@6<)bU?;>;cN\dF#&XgrK6Y*_]l2qf;coK"LSB1+AYtL%3[3BP(VtC35trFeJYWQ[JDT.e;pN$Z8qp67\t70AG#'uB*lF0e%2D6VTd3=[b]<fl*KW,"fN6dd@R`_6#IO%9U.K"k%]Ldgg;oHl%rt3W3;iDe+4&;F)1lNPRZ6L*h]SX&TQ'LU3n!C-cGZaN+TQR7kR4T!RHr'TQOXWl!)GKErOp\l16Cj3EOCqp2)cVu3!Aso:;Qs'V%)bF5/9.HK'GHpcHeT)<!Q.h=$`(Ojs;Z)_D+_(Q=ksW2X;P'WO%pRJ[LS#C0G"p3;m(3l.=p.N*ViSGTX87pA#aJ,4qGJcl8<Qu?%"gu;<Y/M=dgT-):'%"KZ;Vk+2Y.=&>@)X@L7$dOIh_Npf/QG>o_3)g0)MN9,U>mcB@YJm0rP<;I3CM0&kn+q?<(eEFhItEIR;M]Q%o2D`U?t%f<qZ:V^>KsnpB#R(L"BRbBB\?_7+Ol`B;>JV(iRm!!4kiUm\\0\T(+Mfg=$dWjNDLn!cM*UT/NfmXW!9V,(la#lf1+8U%hQ6%BpV!<p_f4irER]fGXV=H<c^@n=4t';2Q.$T$[JanB"-YC2o6!7o3pRT>-mGUEDI7/RNR`MNg6T*f*TE^>[T*AP@HpeN[d-Yu%=+e08D:_^LPl`OU93U:F[.TZtmCI)[S3SP'88,@X>O[loX[onr4j3oc:SD%!dmLM%dg(#1.bcLJ<e7usWX.%G0+Ba0Tn]NR..;ac%8bGXVl3N;Kaj0-7h<ot$^C8$oW-Yfb9Lb!#,H4nh[:Y/<@haI#DBYHRnZ.miph>7IaD+Mmh(i+*N]gICL_7,fW_#\^X`uq:WhD]&%4-9ZgQ&OQuU:8RE.nHt#V]s+HPFC9f#0P5>BML]B[%nt=6u4pSd4NODR1pkHX]*E1[X,Zsbs"HB;:9@+2Wu$W+7mV%:497j]/<2*%&CeVolm\0Y)$j+g4S=jM%m86u4]P/qX$H"5YWgMR^ap?@>/2ug$bY;!\nX"+5eSUM9/?sSC"e/"7`TnSg0ifBeKbTA+DT,e+@^sj%)0&]:V6Ag3H8ai/M/J"0!@STf(p2_n!BQD$ess28d2>7#F54B5$;abo\fc3es,:!Y^iU^-&ks(-hX!/&KDM:.dMN<7dD?E&'nHu$%P5rf!#0"$9@`X?uT@#:QEO8?@cNoeNEdrE*!54f*cKV!1r.I!]7X$2_23VY#3t&=.c%pf4m8a^4>"]P\@o.kNkt(p\[A[_K6D]--%X,)?cR?@*oC.SJ<kbQs3>Am!uP@\$<1;]WarqRfEV.la7pJ,Kq&].MR"NK6RBP*"PWU.I-5tPFg7l0PD29g2+%DJIG=KiDug+bA5%nAg8kH`\0&:r#a?'.Ef0m)Z+T^l2_N(+4-0NF<lsmtS[4Bnd?Cd8SM?@^)f-9*C.X4l[Sbe4$X.,<bUdGpO?0q'Nj7:!$p1o>A_8%ctq;ZR!"WoS%pF\[2PJW0N)#T7O&8!(05otJuI%sWE^*JP&I1H`+iD@oC;s0a^O"C=U5j-XAQ<P"eMW7^$`8"KAH*oec+cp@-SP8%2=aA4APZ`X<aeZ)8tmS9H_n,NWM(BhA)[So16G]QGDt9+NR["bGj8p0'9Cu#hGsr\*ddaO5fZf^-tr;<Y_ptKSrU=X&[7%CX:,LP%-qUSB[@21id*dcQ^Z0DFHQggO4okemGbPO=0i0:9S.aqtGL$trjV'LN5KOTBA#,_FRD$-s#q.P=s5VR+;!\dA$>'T5[COj$/4EWN%n+S%F&Q.oBEXlb#75\1Z6PCP57o:2kcb@imYPm.PTG:H5:)!6#Vd>grdVFZ*Jcqdmnh\t5J/2(ZC[;oX[$m_Vlt9a-;mc2g^<h1`%A6qcbes[1M4J-g3]/$aXKALsIbt'<V?oTTLGSOsE^Z<C<JPnVC\qd*dPH#fY4-_<u;5L*RB"soP=[cL,W`lZ"X-VPpPu8d$N$jVb%n'tGG[Uclt_aFI+U_T/jEXnDg6.WFic'0"NBQ6Hg-*@<OFpgb0IA,1+@HCX+?D)+o`3M0*AreXY1ks1HMckfZif^g6``PJV/<47S%""O',A5N6L(6(bBT(P_Ye5RnsY'X9.J6#gk6hd!!I;lj#h)>\)bb>R`pKa/.(('%hAd>Zh,%5P+e::S'<:OSf:KqT(Oc3E1]OZ8D%(;l16ZjnbJhUTmQ/]:;pQ31K\liXXbZKW,>([,p%ot%2b!j0H=d0$@>:c/2K/St0d6$XBkMDar/:eQrQA@8'2>*#$4`\BENk^uLj%@2TZ.nhc]CB4q5+m<;:t1unH:>*G;J:LEukXho3uAeE\'>g9*C;4+2*QR;@n%pPN)!a""Q)Z,s\,6?[Y^lsIJH22$NAq=t['V_Wm%$;_-dlI\O;!L0XYin_He#F'+mLHr5`jD(W[f<D9(7%m]4p/sK8Z-F@iq<H90PcLLT?PWuF]t.2Ca#`pZE]&p`T(Cf?8eY"MK96P>%>n%d-C'b'ne>ull9V-[/>RaYgB@WTDdM]VRrM(Dflrij1MR`d6:NK0/k/m!YX]NH$Zdqt6H=;?Ri0g_P('lgSW$DfR-r0rij;"J.%:pQ>T;<m3G-rYCacQp]&=Z[h-pT6;":p(!\9]^CR.ou"Za>@>m!(t$;g.fgWd6'75%0W5jVu\;L5PRClI`+o`q&7%MLt`<eJ03u@%FUSG<YCTqXK9J.?QB30W[?b$J3!#sLUUQ47Z)i6d+;rQR\]e8&MR,-CjEfc['c@W\'M>X3'(7W!=+bq[@hk=C;"arKf:?>@JFWa1%^0W]QJ+KtV^Kid7"j4,<0WX6G7fG<.j,Vs:aCnuJ24QO$c@]hQZ.Nn"0*!lZ*jFk@RQ@?Q(q&8XB7ZN1%um_rj?fN&ICH)Xh7:d(%H31`\lnEHPQq+rd=olbY$I#3B1Sk8MVn\W\$m5pH?_11](X_L>%sk@_;5!&SM:gEp'kS)OL8`n8$C<,-hs+Fk7Vu#]i+]p^Pj_/r%:lL?d54XGqKd;"cU<r)-"43nIeWDYJ'#KLL"E-H.31qh>q498AVWjeJlfCo3H<NtE3>2ndSUP<iHS82+OVOA=`WEj&@1n7A!%:;D%H_<nm$jQ?!=4TI&"hok<qV"*3JD'0[OrV<Dd8=S"_%BKK;`8s,ScQ1FeP;GqH$M4W`Zm6B!jg9m1Y)V"Ds^Rm@s/e*(i=B_pDWpI%1*HrC=7Iu3a7cl'Fc,.5hW^EPMN-hn]P^[7Y%4L4^&=?^F<=;0RYupJIKdl<J[Pm/AifAYEG:5T3)OQKb.>*@?B.I<L:X@*eHcCn%j'agX_JVH$UD.GG8gR-ZP4"<$JeXRH*;+=oo2Og6pC08$-G;9)-JO-t;t];bI+/A[V5i40/G3.aiirb.NrKCp"]12%,-[mGK44.\%31@T?>%*;$M>bV(pIP8rSW#)85bHUh-&su9!:3Pa^6DPk0Yk5UDEgI_Of<FrZ'9qeL,pj!B/ObH,sAAGK/.cVCElho5j<$>QF77>%Z7W_RmB)AZ.]C!=CR&?%dZGfRX@rejRck&Bn!1S<<n2?)N5*8+kd-eZ72K/7#hZMF=A#plW10^I0A";2>fF'FBsT82:63%WGZ*g)%5s0fl5QiPCgl&3;VK2n)e`96:A;I4*=5$tZr&I\pNd+I="dF/D<.9^IQ=(m/;9ETcI8@523Q4r.'VGR/2.eFC!'o4WN_A]LAq>gh%Fg.m])c)K6Vu6JhhgG>q#(oP>b!p%9$2m[?ogWPsFkKsh&uak2fn#(oU*#9Q@sAbsRUe`"q"5l(!nD[?=U-.C^+9bjibfUOJ.gO7%*Ok4I"RX>8gG#NkFIj0SW,D-GN_Msprr.7b/!i6V=dY.WD5r[QgFf2@)>RlZWF]OHCgANPAk]?M3?$<VZgR:jRdKe,'@*O=PL$0C%GLRhtAk7]i9_JZ:k"1-1\o7Y?]7=5`e@LH^)B"t^OTd-tF,=%'MgnjV;\dDNVAM3A5GR4J`l2Tm/`b>Q]\g9'Pb5M)D6A$O=P/f_%<fo-<nM=,OpS%>gdPSM?-^,Rue'Pr2dP35+q2G;03P"FA"-iX7.D7,l$^@8,q,\f2!3Pb4(u_A$6toYbWj,GnA"p,kHHA\=G^>[+%[78\/=+OEJUmYoG.pnG7X>FWVMu&SG?=X"0$[p=2duh=),"Md=MA%k.'Wo]l8(.jQ!:W*paTBh(T+&b9;5^JfUAm(K%4JncfLHep%ak1!X"\W;gLT7C#[)XgeM=0g#E&Hp+@p<!GIsfhQ_A"/Wq?)]/p0gAqJ\B!VkO,MVZii<Fmu0^;N!/\L5"&a(bfp.0<DTa3Ko(lD%2JD2J]#LA0]B_#Yio;%96N`JEkP\0*!F#Jd_#maY-dfQu5;`]t>D5=Jd`2#&eLo2UTMVb*%?n5a"R+Z#T,UTFTF;'>)j1O`6VYjA%@k*D`"I+HR?krd^IV'E"T_61d!da-?>S0Zl,BZ\k8k#7K70^1#>"0C9HIW*MEH0Q(MM6Qr<u0no(04"eZO>5C%qs'rV+9iANi7kF%^=(aBBH^t]Cqo\/dU?Ufmo`KjR8(dZ6Y@ih_PA23)@6=C2A=H3br";D"oGh,%XHq7<H&TtjK(AZFmG)XBd<(NdF73n&5r)DZks8#%QKU=@l)6NQok/r)Y=u<c#a2"1q\I`uBHcRXP8MXJl2=nN!OOsG#GW[*b>kk4;L@g.M^/L`=Dsu]RT5bPNGd,g$#&"*`fqHY?YS>0%cCSH4"'RZf8(W&#b@7KL3\>)`X_:5b<(;fk.T%Am&FA$*LKGu+Bm#I&$S<.=nD$*<3Gjj^HG#AVChQ[K$(:uf`ElBm,l?@Pof\s*%SoI>EU1#.l(*s"<:n7W(f1C:B@j>hAR;fa`.^-gu)HlCd,F2lXb:n!>W7M6aP,Fup]>SqfS<:ZD$-;[90@5$fa1]LoF\MkO4HfTB%a*'s$=\A)7P'#)=Zdu&KO1\s.2/GD.&.FqB*f81bX[5=<H,CSfiF*j\//cpRo/0<SM]^-Y#2:?@d;fs=7H,2:"-_Xf83GeW"rp5c%&hg^O#1O&n$S1D%K.ss>L5&32WPa=PJbY0s+E#=;d.ijYo16*2gQN'RQNp?6]Y.N5_6h>K'KYjA0H'BuXSu)[\5Bj*Ugkml!0`Yc%_C;JK`'gBMhALfi`F>fp*ucbnkH+='hO?XE5Q\oL_&OF4`!_r,hJMohG"]$\RT+HPPVtYGJi[h1&r5ot)\OX\P!Jg;jhCJ\4jNj_%F1&V`G$,%YnI,MRq>K11.aFlf"-rDjD-EPm%5DEZlkc5Al8Bq%03b"34+0LC^.4kjLh5RA%i6")=bdkBOfGcVrN$Z^Iq$f^+1jBJ%0LG;ja++:l."a%Nc548e`NSP@7@h4lnKNY+!&?f.VM3Bqij2KsnH:62gn=$DB:FicOQ(i`iYdjP`ZtV0?<c-\p!P]A#,q&CJF[eM%$Uo=@Zt;F/`Ep8-bnGOgqZdS>,W!TWfJJ,Wdh:"qKXpafh0;Ur78ot7j$iU3qa(T_'0(iB):5f%1GS2J90?N#kh)"plLE(I$853O%%p]U5k+kX8Rmg@o(ncBpOCs\Tc%pX"ZB`)%OGir`$$f7=G[DoI?D>o;=sTM.M9(`XiogFija0V[.Rk:^%UG.TA7_hfTG2jKfL-WX%TV^`6kmF>r98Mac8SmS<T#ae@X@N7q+NI0C1IiH;T?,,!-WXjY.6VqpB.@_FEb'nN;re`[g[BFU\L2pUie.07O0DFEbVOgU15e[A%dNT3u-%aGED<mn&<7D6O#h"TdL1M;AU`]o86.4Gd0H([!Y$MIX%>bT%&teLG\HXH*>#'*b?U:!)7#2iO';MqYM"TBkIRB?3QO&^p%:D<qrYW!8\idW,9W]hk1:hF.a'BQb#AEIBOgd]2l[Y.Gle3\;jgG?DR:=H-#kcG2V0_hJJ>lD[cNeW10^QP4A3_4,qY/rkF1A2>N%F+#kU"3M6].a;M;5+u$Rk^O?p5=:I(pcT6e;9McTV>DUdBa[Y$ItJY768IQ5gA\V[$u(W:FO`rSFdT/l'g4;(^Pf1AH>'1k@9mL,%8(-KA1%\[dD:gFs";hfJQIe=WdC";a9Ko*-pdcV-<k;npB5%ck8eaR+Ltb<D6^/FI6EX>XprHlI8_[>3!b`n!TX)q'E^eS5.m_EG%>VlJMr/S0L/TGm<<%UJ-O9:fX;?&n-MRtX6d#5tEls5a9WhdO=HYQn:DkiVQZ<M;8e:Pk83e_EaT6M;QDIXunUrM/,#0L8>R6![O%m`@`qF/)K98WP7]/;\R.IFRLI]miZK@:c)02,h1*Ul'R^e$F)NKT`6+h\GPPU82<@/YH>X.7oeM!ihK_QC'La!6WhsGL"S:V=&e(%;pO]i&P?>'1#ngH:bs7G,fYUm,AbnU=@d0Ab+bENT&rr?HL8Hrq:LU[S'%79$9p'e7d>]Lh_ftO7&LY8g%b%PnMKNAWldR)fBP,W%-?P2#\T9kBWT8JhUOc1Ba)kp`CO_I/%BWVfO],`?LU5Im)*8$1QMdm"MrRe#r+#E[,HI=F0pWm\CIB.+TH&sg^Y6D"$MAqUe^n'o%)H0F7AXm16_Yk\]s,),8JasMA6tGV%hKB6DV66G3qbG6)=6gfu9YL3X<Ki&n/uu-0@EDV=Qb?[%Gf@k.0M0fqiAE4A-pO\l9oX['%;*[fCSc>pb.p"t,^soYNlcID=<]I-k,NLPtYsBT%g7SnPnppE'(#,\(8W<.4/llMSr@4.Eld^>bAnQfoX"MXh>gjIm49*bU#Pbh#%T2)CK@_B)f1=+3.QJ-[CAF<phC,%f=4Ish'.]H+#qDkmcE;$RbCka=2_!3Wpm%k%=25XU)cJ_%d*9kq"N]_KM^9Gi.dEb4ubQ@7t%e?!Oa^pBIb9,%ZYgD=p9M3JohcB@G"#nSk6lT\;b`kKmums35JlUV`Xf)L'__[Xq,Wdf%Udt!=n?(!S('l^_XT8jMu?2@CQqL<>3%NNS]nrB>&5@XC@U<:<&FG$7s.&qT?H+!:D4(l[`m-7q=2#*l.j/G9DR`YHBi;oes8gj!P'>eQ&,c"+V\14d?AY0:c8M.#%d*.(mA%,)VK#7AK8/9Rtu`SF*@p$%l)"#3^d5qF<Niqip-\Ba5*G=j"&0bARX4S+hB?irkTiZH?h5I=U2%bUP_l3<60oUf"m.^8PV4_j%OB%[6S<Hjf=DAQo_WpC6]/3]J[f]%cLs%!0qcI-^I"'TI=b'FS>Psh'1!dfr*NC!%OAQ*S4t!5dB)FO3F^,j?/GY=6!+2=VER!3B)Ph%lV@,c[/upS0iI<tH\&1:]?#2f"krC+\prQY=7o4o^U(*FD2bDsbe!JrHHO/k-0oSDbOT\\<:Mi=1l[<lMSKC/ZUOC69h9e434r3N%486eG$q^NOpXa)%T;9*IkX*!XU<3Ug`E/BST*@2M3plMg:bDR2k%N@u92Y>-/&D[A*0&P-7A]ZZD<H7@+UPg!e]93G!i^MO.eRr6%:DpF(e0t(fNBW&KkhZZR&V\uEH=9`")L*RAhTZ_O$E5>HirGPq76n1NJ)i'Wcr;tL<@Z?-'Q]u9=dUd[5B^D=Kaa:Y)UDPNEa"'[%,=uX`?qk,X32T)X"]5/]PXeZD#Eo_Xe]'f$.p]6RqKD>C##K41P/:B<lB8e9kGu`FJ;NN@Y2!%3DT0geA8-IEMDdK#.<??Q[U6A3%C.0`s\iBs1]+`O$iHU9!P"Sg(4^ctZPpViacjMl.Kp#s-$sKc@b/DGFYRG/&4bLB]I&U?!;)k5gE9aNo6n:9%$)#^tTohP?PrHCP%8o"A3BI@l6#KA:UX*F]tdN#ko*G9"[jJb<C8tqaeE04^'%a3%7TJ*ks+RDQmri-J6]93V:nQX-ej(21>cHu;a`)fiBZq+_d*h^0)%\i<&6P\asD/To_?1HOo8:?daK"]Os$e6(H!ge^8H)8I^A!_S61oLQC6!A:j>^8[/m<h'`PE2g/Y..M+O0%HKp.)Sc"VSY/T\J005%Kf,M+3\,aOom;,BFqe\BRcalT*gKEFbHDn'Br62^4245#RLE0?C'N0O<^f*Fe]>MKI_-7Lp7%5p&id?W&"p#0$JiD0I+e]RH+%H&%:Kq&OCcTakEKAF_5+8/+r:aiR-D7a0cfa*23hSMK::J4M@pU2DpXF/#LU"#.;3N51Q:)CZXIFMolX:o-LESaOj)$KDm9SQHIj<DN%!+hfu`H_3M/mG.6_,O1F,Qb)+c5'n!C%>:hj's*dJEdaKg`)oa+'&8u3DHL<:^rjjW"pe.TZ!kj0e*dhq<&U,q>dHgXq&YR-a2n"%&QMAQ\$te8hes*u2'FQEV@Woq=L,_!5u??u0X=YW7m5eh-8:!P6/GFiXurC*HO"N)grI$/?^&U7/ra+R2m$JJ=u'(uFdj`5"ha#d%?^U>E&IN9(-HVkgRB"a$Fsb=\>oQa'="U@"`;jW`"/[AKj_ja'Nj6,?J/VV,CHQW8#*^a?3#PR2E!`(=3k>,A/P_:^TQ&2&8Ym;$%U:hdW!lB6dHH?Ck'MH#2>.c)3$3;`j96NI.7k+1'r\0nGKh3pnX8cB#6KKEmX8#@o8>>EZUP(=o@M*)m!,FP-TG4[3=%EU]OJHtk%PCD_T+t6(5<Wh,e^s>(L[SQ*?!f%0TD#BS5j=)!0KqBaH.KMC<^h+g_6MWjGcd-r+Op$c"8dM=.h#WesFdI!s0T%M=K'.Ko_5Fl"%%G?m8U.?5lIt2Z76(:K5,[URf;APq:lIG[ATDPo"$K)Df+m*Q@!BK3T*W\,\9"$VU4t<1="9CODE`4Ye1i;0]WttuaZGs@*B/!=$%"g43ua@7'a5Q\N69^H7t'h-J[V^VVlY-:ibZa_nq7=NU849XU!,CfbGRB>_&Fd#nVZ(H79!RO0c4J>S'!%kq_Q?6!WYN>hTW>#D;%bPJba^(Zl6X*M6gS27`W*WpA!3CuJO;,aYH>BGkG:-UTJJO6+(V9,r)DfA?@Du0YN`cka!29sBl.2+cAqWhL<X`+6iJ,SbQs4pcV%p5e+6Du\:qIm:[GYK+-0IN@<R3r\?hR.U1*?iTV<]e93V\c;aU&pqQ85CVk0Fk%n<^OCV/?[]1B(Uam0gSE/X2Sk#+VQYLEG3Ju*%p,?@GgHXup;C6h2U9D>O$.-_aLIk22YZ)3)2/,iKR7VIj@Ej5`4!8Ed4bb&m&=C(jNsf8*VVrE]5;EhSQlk5VE=^rTrU9T:H3Us"%8J(;)d]IH\Qh^Mg^t6&TR5Ui/r-0?%NRq7`mI(#R_cQf4rAXA<qtj%WmG,e?]H68%iT^CBp7K(kfRE]To&fp]rp/PC8oK6E?!meV%T).u8K%2#1hm;OR)k(CdL[ECkq;K["d]^Fb_q2[#qVBafqZjmnDh%N#fP1I?[!>*Qq=0Ao?/rA\b%:B&%C3S&(]F3r04/YrJ,#1`%D'!&dJR:Wj;2LE%_tgg?&YAag7!SK<1V_n@4&%PNB^^_#O321+mS-QJ,g?G@;h#"]/ZnO=cj(iA,6L06R5*0\RsWGb)gHde6Q_jc%"lW`M9DYpo)k?5@h/D5`0A+;nJ%VtA^>&W;=CJ1I]YE^R[''-\c!B!e"%WITooT]B%!erMlh.47W]p1?UH??q!Qt<SmuCVYY1b7R%Vn%(pT9+A?:FXGthoM]2GPJdKl/dEe767"'>rP).-;d5[=ob*k*+YGIY%cV)qLT938_MH$?Q+-c609sa_(Dt9B@IRN^iWN;G@,9%%81`qDn@tRt$75HFP6Z0P-[e79X^(Jur].47e/QOlZ>dt^'0oa%+)b=-l9=)':cJ=D?7mGJN;gA`7OEr(Y?B6qWkUmF?HUL\0B-*/%g#MrJNd#pL*.Ws1*W1T_Zg"SOg;frI@+:h=q=$j7"uc)X&3`?Gf?J&6<,D$T]-aJ8fX9q_56*-FL`k6-cJ/5'Q.(7eU1VRM^12Fj%>C0]ZJ[&A-b5*)+ZEn&?9+:O=T:)B[^PqSFqjS,bpb2X+Y?Lh4huDk(If"%jB('+)jWD5:rbm8[gY[MXDu=Ogq=4?sqV?))s3L]=%^]*9^s6rhWn,M4qTA&VkAb_:(s5q)C4oU-tF*ZkoV!gl"e7b]XnVu?:3l1j1@_/""n\4Q'IU;m8e8H(u?fjW&baJIIVeA8l?Y+li%D`ms`bAYk&J,6X@F#070:F/bCVefmB%e6t!(*!i[s,pr<G\+(Z\l5O(YJ!'r^90t<nqXE05M)32e^#n^XVgji2i$E^8jfo9+1HX0%Z?bTMoJofPI%BHWhf,V!q`<3o)gUiA8+ZXCn+V65Ib,*;n%Vjero<mEcbt<^=9&"\_LM@_DEkU\5N7ScM`rJ`6[CX-l+j:f'eiKg%O`"tg^@d5L-8R'D[6M4,+9)2A<R=STa+P7)!f8+/]+ln]P1t_lo/[K040j/J8^kFYmkE3)?bmU8j)Ar_&9i(fO.PP>:@FDKIeEQa%D,s_(56t/-DM0\LTXm!,ISS(YJAtK9p[niLiWpZI.H<'f.sag>91nVa2=m6Z7mHZH]IjB7!Ki6\LIM7O3$qGq\m`1/BocU=nFjG%%d2e#9J;_&2%"59!).bbQE3D1jqL2"5^E1G9<O^FE5DQbFKo^XIar!o3De[<8cH6G:]\WpdHYh?NeFj0B$l,U+1?2;Mk-"k,ZYhbr%^-5OE</itc3NpQHO,*j8"9$[>\m,LUA`ORD]H35V1WYa956%nkVg:KO_=qs]r4@2d''f?-5Y?7XID)?'mr#-7o?oZ8X(a&mo=P*Q%ArE2X^8==`oQ:-,7!Tg5`DW?Jp/eH=q<aLI+cbWOZbI\e1B$STHh.cG(eKV)fG$C.6hZ$m5i2j2@J!o5*p.&6^X2"?0B+5<mT8?9%U\:E#+ZF"_@FP8Vkt?*_UY1UVn8L-j49o5>H?SlYdN:ZU,D5cK)R]<7;l+s:])$b<]I[R1C625hEU86t93d8.LedO(?Q^:Z/GG#"%fk5er]red5s-Mj7s%b68,:Obl&"=ZPlg(WB3eTQG`d[l;BiLQWi:"u-p;>5S]g"Bg++FSPe'$NoIcDEFh)qLGn9PV0)U-a,N-^t3%j:tcH9g1eFJdDjtiBdDD3lM>E3lh0pgaAtUr#j/!F'$cpGTcKRc$lMsm\de&\Z#:B$KiV=I2j(FU)nXH5EOW?H$jF<h5/X,'!uQS%cK)hIl54A*)gQl"%V>:mWmeEB+l_te:PHUaBArElN=?EHi"(p!j9IfkPCN!SqO^:R`(M2AjrZfU&EJ1(eC=A/"<[[57`Yia;ZFNT%QEm,tLA1SYcsB'Ci:H?`2260t?Zhc\p8DlH+8PsWSA,Z-c15LXf05;>hKpJpm';66:Tf:5%e)Nl]`'*P!IR+[44=K2fOGduI[]8t%#DI+FRk-7-E:MEFpV6RpMu3!`8VY.]*(%68qtY/hA&\*+Q:lHJI=!mrLQSqMEg)H]i4Y+,hLha^aT@R``s6Wg`Qb#2G,lEZs*Kn)%j%`"Fimk($ZB8r)3cs4[C&?buVjf$E%Fc0nWR(C$?Qu+=+5i2/6hKCTdfNLkgXr^efVCRiks#!N)uJT,rna99*@p"YX_:,ZD#$OX%n'(K-9]?/Bf!YD^U=h$RI=.&q?OMuk2BV#En1A7J8N+HKQiqC-jJp*"gd0_UbtblX(3":,+GP,hma5RRWI+-iD^`/t?@GUUO&ZB0%!K='Ver.jKk?fRA<3od^A55IgQ<#Aq*uT8YTfb"Ql;q>]:IadP+Y-.U_%4Be@oXUcfjn.&35\]_AY^4K2,"+p2Y+E_3*XTRq7,^/%Mp+Og><K\[P2\<jgXu.47c[\6l-2RHek<A+YpLfn#hXiYm^8P_HQP&r<1obGda)]W+qF#=O[.B(Uf_B&F+C9lYS:b9,8%JKfB8NW%^fGhi,lnAO-)m9e*sf@.A^s"!k3bRd?it1MCucA`@D*8emkE)Q-W_lh3.Yb9S2ar\8&GciNL*G3(3jJObF_@]!7/jrdk#OeQM^=Z%pt.?-rI#86pa@Bc*:c()kk?+a[U%of.[l(cn>n_4]\uk9*(k@3>mG"[_XUOT?-0G)\q/c?\)e(Sf$EJWJVZNYNmDnuN*'OSVT402%gu>*Gjng6$?(#Pe+&[Y&g8/HfcV0%Xc.":>-6$h7Nl*_#ba_.kn>FfJqIlMc!-=,.Nd+N"Ji0K/]etKGbJQ35UpJn`5Ap>^HsB)l%;c1S<[!2qT;]\SE76[S3eDHXbP0EeB;=B]eZgl]Dgg^DbDZ):I;C-%YqHW%_J:N^$btT,"M3`'ad+*,P/L*aG,kCD,P5VmS/qM.h%TXc!57\4<8L"CgYbJdA.CPV*KW+I".kA*kbDoD*+&%A]fgi=bab4?:;QOrVRl*LCgLF'Zh7GV>s_D.pl7>5('U]Q&E#tk'Wg;FPP%]YGV<mVi*(f2;dtU1TY.gU0pT1]NRp.C*?V]5L=oZ2Y`%GTNUnjL['RWo&8128dVpL`0dJHe*EAI;W5(ehU.`nt.jXm`Bb>'B65Y%pK%Rcel>6?e-"nfe`?\\dUKp65)R<4FdZJn1(EYLR=4u9#q866/5Y,?Z2f9)76Tkm@*[EFXVIZ/D:[tL\;ip_l,>fUiq-F0pcpL_%W=Mn=]pk:d'Q^hAh*/S="aH5-5JND7^)1nZlY,9X>7tHNK$b*"g:j?ZUDqFaGgg9ST_/sh-=B3uRJ<M-2BS9FORQ\3^b$3F0!o_I%M#)/,QKVc70^HdGM:P"p-Q(B0<@G;Ln&up$#_A'&,cVTVrI@uF#r/f/qY>"[brVR%kkKA$_fO)K0;Wgkl1ra>rJVZI+9m\8#lJ5H%2R@+.kR+=ko/o7Jlm][>)nJBLf0lCO?eR:^+)m4ir=,3lb^F.HIR&/UVdK+n!P@Imr7BFJ,Is^,o=!EZ($Ia.YgaBeH!O'-%cIJ_%h?S/%=[+"a+@MYKlUJfB%+KE6jjW.il+I7KB1gD4<jI/0=^!#<E`%qrV5!W[bJ?Q)BJ!0&:n?(EAj#IqFj6P-SL,,NcYQrD16tDT%"j5+<`,*`cQT$ntF[oV!Ifd1NU`b*O8rMd-3gm+j0pPB<5RFb@^U`b"AW7pS;e3,?'YTJ'/%sC>q9I1r@[3"4:<+iI:uZgcTN`Yl%I'[aQYo!qfcEWbJQJ)fM/;mM":\`6GBaf#/b`Fi=]_jfGBm(IRotl1V`ZT"TcUli_rP8EQQYZJjIo?*_OWP0>OHeO]?YKZ_DiEP;%H`3!PB!**YNCT3M3.CE67!`Lt#c>Ka[,8ZX"O]aV8&$$C]Wjs?"?$6a=hH+VO1p?[D,`.M@j>i_n6@hc)2H/_CCn_rfY;;K"Hi?0%XO!rg/kJBeOXXpm/*B4L(,MD3j-b>:\7\AR'ln&:nadFTrTc@2$_*/7D^88Q/G.Ytgn5hP3N-uR3QJ.]l*2Rg?Ahd`Ie*'@%Z[Ds%0M5/H$I-g66d'(/0F4"VE32&*J(t*RO0sNlkngfb5N!D#@GgCTWhEu[3cEf-c<c4oE`OHlp/T7`%m>&.\Zrttk*IMHE@fit]EtDk%Ef]Pq[>M]eqMeJ9pC2*pOFe5]:s>As$"p6XRp:*I#i_,Io7Za'X<W$^V!ZYl>&BCgV:RWb1OXbEoA_<C;%?MlV.ml3]^Kg,,s_@`%f7)RQWi`>0han+Xs4N>-eXmV^J,S8SrSfL0lMf]?jmRZqlehWhpODu$s8;1!^\D/bo69*lgHYVus7kRM5CEFchuDh'IK/[n^\cjU%s7i'JIfFo3rl_dcqnr/Xs2X$siVRPCruZ^iO!(WeeE+I?`P;=PJ,/be!Kqo!7f~>%AI9_PrivateDataEnd